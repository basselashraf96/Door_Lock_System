
CTRL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002880  00002914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006c  0080006c  00002920  2**0
                  ALLOC
  3 .stab         000029dc  00000000  00000000  00002920  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001154  00000000  00000000  000052fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000065b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000673f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008784  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009885  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a808  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a988  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ac4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 37       	cpi	r26, 0x72	; 114
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 06 	call	0xce4	; 0xce4 <main>
      8a:	0c 94 3e 14 	jmp	0x287c	; 0x287c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c2 13 	jmp	0x2784	; 0x2784 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d2 13 	jmp	0x27a4	; 0x27a4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <timer1_count>:
uint8 f_minutes = 0;
/************************************************************************************
 * 								INTERRUPT SERVICE ROUTINE
 ************************************************************************************/
void timer1_count(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	Tempsecond++;
     ca6:	80 91 6c 00 	lds	r24, 0x006C
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 93 6c 00 	sts	0x006C, r24
	second++;
     cb0:	80 91 6d 00 	lds	r24, 0x006D
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
     cb6:	80 93 6d 00 	sts	0x006D, r24
	if(Tempsecond == 15)
     cba:	80 91 6c 00 	lds	r24, 0x006C
     cbe:	8f 30       	cpi	r24, 0x0F	; 15
     cc0:	29 f4       	brne	.+10     	; 0xccc <timer1_count+0x2e>
	{
		Tempsecond = 0;
     cc2:	10 92 6c 00 	sts	0x006C, r1
		f_seconds = 1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	80 93 6e 00 	sts	0x006E, r24
	}
	if(second == 60)
     ccc:	80 91 6d 00 	lds	r24, 0x006D
     cd0:	8c 33       	cpi	r24, 0x3C	; 60
     cd2:	29 f4       	brne	.+10     	; 0xcde <timer1_count+0x40>
	{
		second = 0;
     cd4:	10 92 6d 00 	sts	0x006D, r1
		f_minutes = 1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 93 6f 00 	sts	0x006F, r24
	}

}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <main>:
/************************************************************************************
 * 								       MAIN CODE
 ************************************************************************************/
int main(void)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	e2 97       	sbiw	r28, 0x32	; 50
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
	uint32 recievedPassword = 0;
     cf8:	1a a2       	std	Y+34, r1	; 0x22
     cfa:	1b a2       	std	Y+35, r1	; 0x23
     cfc:	1c a2       	std	Y+36, r1	; 0x24
     cfe:	1d a2       	std	Y+37, r1	; 0x25
	uint8 recievedData = 0;
     d00:	19 a2       	std	Y+33, r1	; 0x21
	uint32 password = 0;
     d02:	1d 8e       	std	Y+29, r1	; 0x1d
     d04:	1e 8e       	std	Y+30, r1	; 0x1e
     d06:	1f 8e       	std	Y+31, r1	; 0x1f
     d08:	18 a2       	std	Y+32, r1	; 0x20
	uint32 getPassword = 0;
     d0a:	1e a2       	std	Y+38, r1	; 0x26
     d0c:	1f a2       	std	Y+39, r1	; 0x27
     d0e:	18 a6       	std	Y+40, r1	; 0x28
     d10:	19 a6       	std	Y+41, r1	; 0x29
	bool data = 0;
     d12:	1a a6       	std	Y+42, r1	; 0x2a

	SREG = (1<<7); /* Enable I-Bit */
     d14:	ef e5       	ldi	r30, 0x5F	; 95
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 e8       	ldi	r24, 0x80	; 128
     d1a:	80 83       	st	Z, r24
	timer1Config timer1_config = {CTC_OCR1A , NORMAL , CLK_1024}; /* Timer1 Configurations */
     d1c:	ce 01       	movw	r24, r28
     d1e:	8b 96       	adiw	r24, 0x2b	; 43
     d20:	9f a7       	std	Y+47, r25	; 0x2f
     d22:	8e a7       	std	Y+46, r24	; 0x2e
     d24:	e8 e6       	ldi	r30, 0x68	; 104
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	f9 ab       	std	Y+49, r31	; 0x31
     d2a:	e8 ab       	std	Y+48, r30	; 0x30
     d2c:	f3 e0       	ldi	r31, 0x03	; 3
     d2e:	fa ab       	std	Y+50, r31	; 0x32
     d30:	e8 a9       	ldd	r30, Y+48	; 0x30
     d32:	f9 a9       	ldd	r31, Y+49	; 0x31
     d34:	00 80       	ld	r0, Z
     d36:	88 a9       	ldd	r24, Y+48	; 0x30
     d38:	99 a9       	ldd	r25, Y+49	; 0x31
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	99 ab       	std	Y+49, r25	; 0x31
     d3e:	88 ab       	std	Y+48, r24	; 0x30
     d40:	ee a5       	ldd	r30, Y+46	; 0x2e
     d42:	ff a5       	ldd	r31, Y+47	; 0x2f
     d44:	00 82       	st	Z, r0
     d46:	8e a5       	ldd	r24, Y+46	; 0x2e
     d48:	9f a5       	ldd	r25, Y+47	; 0x2f
     d4a:	01 96       	adiw	r24, 0x01	; 1
     d4c:	9f a7       	std	Y+47, r25	; 0x2f
     d4e:	8e a7       	std	Y+46, r24	; 0x2e
     d50:	9a a9       	ldd	r25, Y+50	; 0x32
     d52:	91 50       	subi	r25, 0x01	; 1
     d54:	9a ab       	std	Y+50, r25	; 0x32
     d56:	ea a9       	ldd	r30, Y+50	; 0x32
     d58:	ee 23       	and	r30, r30
     d5a:	51 f7       	brne	.-44     	; 0xd30 <main+0x4c>
	callBackFunctionTimer1(timer1_count); /* Timer 1 Call Back Function */
     d5c:	8f e4       	ldi	r24, 0x4F	; 79
     d5e:	96 e0       	ldi	r25, 0x06	; 6
     d60:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <callBackFunctionTimer1>

	/*Hardware INIT */
	EEPROM_init();
     d64:	0e 94 30 0b 	call	0x1660	; 0x1660 <EEPROM_init>
	UART_init();
     d68:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <UART_init>

	/*
	 * MOTOR IN PINS AS OUTPUT (PD6 , PD7)
	 * BUZZER IN PINS AS OUTPUT (PD4)
	 */
	DDRD |= (1 << PD6) | (1 << PD7) | (1 << PD4);
     d6c:	a1 e3       	ldi	r26, 0x31	; 49
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e1 e3       	ldi	r30, 0x31	; 49
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	80 6d       	ori	r24, 0xD0	; 208
     d78:	8c 93       	st	X, r24
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	a8 ec       	ldi	r26, 0xC8	; 200
     d80:	b2 e4       	ldi	r27, 0x42	; 66
     d82:	89 8f       	std	Y+25, r24	; 0x19
     d84:	9a 8f       	std	Y+26, r25	; 0x1a
     d86:	ab 8f       	std	Y+27, r26	; 0x1b
     d88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d8a:	69 8d       	ldd	r22, Y+25	; 0x19
     d8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d90:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	4a e7       	ldi	r20, 0x7A	; 122
     d98:	53 e4       	ldi	r21, 0x43	; 67
     d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	8d 8b       	std	Y+21, r24	; 0x15
     da4:	9e 8b       	std	Y+22, r25	; 0x16
     da6:	af 8b       	std	Y+23, r26	; 0x17
     da8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     daa:	6d 89       	ldd	r22, Y+21	; 0x15
     dac:	7e 89       	ldd	r23, Y+22	; 0x16
     dae:	8f 89       	ldd	r24, Y+23	; 0x17
     db0:	98 8d       	ldd	r25, Y+24	; 0x18
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e8       	ldi	r20, 0x80	; 128
     db8:	5f e3       	ldi	r21, 0x3F	; 63
     dba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     dbe:	88 23       	and	r24, r24
     dc0:	2c f4       	brge	.+10     	; 0xdcc <main+0xe8>
		__ticks = 1;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	9c 8b       	std	Y+20, r25	; 0x14
     dc8:	8b 8b       	std	Y+19, r24	; 0x13
     dca:	3f c0       	rjmp	.+126    	; 0xe4a <main+0x166>
	else if (__tmp > 65535)
     dcc:	6d 89       	ldd	r22, Y+21	; 0x15
     dce:	7e 89       	ldd	r23, Y+22	; 0x16
     dd0:	8f 89       	ldd	r24, Y+23	; 0x17
     dd2:	98 8d       	ldd	r25, Y+24	; 0x18
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	3f ef       	ldi	r19, 0xFF	; 255
     dd8:	4f e7       	ldi	r20, 0x7F	; 127
     dda:	57 e4       	ldi	r21, 0x47	; 71
     ddc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     de0:	18 16       	cp	r1, r24
     de2:	4c f5       	brge	.+82     	; 0xe36 <main+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de4:	69 8d       	ldd	r22, Y+25	; 0x19
     de6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     de8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e2       	ldi	r20, 0x20	; 32
     df2:	51 e4       	ldi	r21, 0x41	; 65
     df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	bc 01       	movw	r22, r24
     dfe:	cd 01       	movw	r24, r26
     e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	9c 8b       	std	Y+20, r25	; 0x14
     e0a:	8b 8b       	std	Y+19, r24	; 0x13
     e0c:	0f c0       	rjmp	.+30     	; 0xe2c <main+0x148>
     e0e:	89 e1       	ldi	r24, 0x19	; 25
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9a 8b       	std	Y+18, r25	; 0x12
     e14:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e16:	89 89       	ldd	r24, Y+17	; 0x11
     e18:	9a 89       	ldd	r25, Y+18	; 0x12
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	f1 f7       	brne	.-4      	; 0xe1a <main+0x136>
     e1e:	9a 8b       	std	Y+18, r25	; 0x12
     e20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e22:	8b 89       	ldd	r24, Y+19	; 0x13
     e24:	9c 89       	ldd	r25, Y+20	; 0x14
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	9c 8b       	std	Y+20, r25	; 0x14
     e2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2c:	8b 89       	ldd	r24, Y+19	; 0x13
     e2e:	9c 89       	ldd	r25, Y+20	; 0x14
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	69 f7       	brne	.-38     	; 0xe0e <main+0x12a>
     e34:	14 c0       	rjmp	.+40     	; 0xe5e <main+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e36:	6d 89       	ldd	r22, Y+21	; 0x15
     e38:	7e 89       	ldd	r23, Y+22	; 0x16
     e3a:	8f 89       	ldd	r24, Y+23	; 0x17
     e3c:	98 8d       	ldd	r25, Y+24	; 0x18
     e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	9c 8b       	std	Y+20, r25	; 0x14
     e48:	8b 8b       	std	Y+19, r24	; 0x13
     e4a:	8b 89       	ldd	r24, Y+19	; 0x13
     e4c:	9c 89       	ldd	r25, Y+20	; 0x14
     e4e:	98 8b       	std	Y+16, r25	; 0x10
     e50:	8f 87       	std	Y+15, r24	; 0x0f
     e52:	8f 85       	ldd	r24, Y+15	; 0x0f
     e54:	98 89       	ldd	r25, Y+16	; 0x10
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <main+0x172>
     e5a:	98 8b       	std	Y+16, r25	; 0x10
     e5c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(100);

	/*sending data to (HMI MC) from EEPROM Registers */

	sendEepromFlag(0x031C , &data);
     e5e:	9e 01       	movw	r18, r28
     e60:	26 5d       	subi	r18, 0xD6	; 214
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	8c e1       	ldi	r24, 0x1C	; 28
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	b9 01       	movw	r22, r18
     e6a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <sendEepromFlag>
	sendEepromPassword(0x0310 , 4 , &getPassword);
     e6e:	9e 01       	movw	r18, r28
     e70:	2a 5d       	subi	r18, 0xDA	; 218
     e72:	3f 4f       	sbci	r19, 0xFF	; 255
     e74:	80 e1       	ldi	r24, 0x10	; 16
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	64 e0       	ldi	r22, 0x04	; 4
     e7a:	a9 01       	movw	r20, r18
     e7c:	0e 94 01 0b 	call	0x1602	; 0x1602 <sendEepromPassword>



	while(1)
	{
		recievedData = UART_recieveByte(); /* Storing Orders sent from (HMI MC) to initiate its task */
     e80:	0e 94 23 12 	call	0x2446	; 0x2446 <UART_recieveByte>
     e84:	89 a3       	std	Y+33, r24	; 0x21

		if(recievedData == UPDATE_EEPROM) /* if users created or changed  password reset MC to update EEPROM */
     e86:	89 a1       	ldd	r24, Y+33	; 0x21
     e88:	87 31       	cpi	r24, 0x17	; 23
     e8a:	11 f4       	brne	.+4      	; 0xe90 <main+0x1ac>
		{
			WDT_ON(); /* watch dog timer on */
     e8c:	0e 94 9e 12 	call	0x253c	; 0x253c <WDT_ON>
		}

		/************************************************************************************
		 * 						RECEIVING AND STORING PASSWORD CODE
		 ************************************************************************************/
		if(recievedData == SEND_PASS_TO_CONTROLLER) /* receive users password ORDER */
     e90:	89 a1       	ldd	r24, Y+33	; 0x21
     e92:	83 31       	cpi	r24, 0x13	; 19
     e94:	09 f0       	breq	.+2      	; 0xe98 <main+0x1b4>
     e96:	98 c0       	rjmp	.+304    	; 0xfc8 <main+0x2e4>
		{
			recievePassword(recievedData , &recievedPassword); /* receive password function */
     e98:	9e 01       	movw	r18, r28
     e9a:	2e 5d       	subi	r18, 0xDE	; 222
     e9c:	3f 4f       	sbci	r19, 0xFF	; 255
     e9e:	89 a1       	ldd	r24, Y+33	; 0x21
     ea0:	b9 01       	movw	r22, r18
     ea2:	0e 94 a1 0a 	call	0x1542	; 0x1542 <recievePassword>

			password = reverseNumber(recievedPassword); /* Rearrange password to its original form */
     ea6:	8a a1       	ldd	r24, Y+34	; 0x22
     ea8:	9b a1       	ldd	r25, Y+35	; 0x23
     eaa:	ac a1       	ldd	r26, Y+36	; 0x24
     eac:	bd a1       	ldd	r27, Y+37	; 0x25
     eae:	bc 01       	movw	r22, r24
     eb0:	cd 01       	movw	r24, r26
     eb2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <reverseNumber>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	8d 8f       	std	Y+29, r24	; 0x1d
     ebc:	9e 8f       	std	Y+30, r25	; 0x1e
     ebe:	af 8f       	std	Y+31, r26	; 0x1f
     ec0:	b8 a3       	std	Y+32, r27	; 0x20

			savePasswordToEEPROM(password , 0x0310 , 4); /* store password in EEPROM */
     ec2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ec4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ec6:	af 8d       	ldd	r26, Y+31	; 0x1f
     ec8:	b8 a1       	ldd	r27, Y+32	; 0x20
     eca:	bc 01       	movw	r22, r24
     ecc:	cd 01       	movw	r24, r26
     ece:	40 e1       	ldi	r20, 0x10	; 16
     ed0:	53 e0       	ldi	r21, 0x03	; 3
     ed2:	24 e0       	ldi	r18, 0x04	; 4
     ed4:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <savePasswordToEEPROM>
			EEPROM_writeByte(0x031C , EEPROM_FLAG); /* raise EEPROM FLAG */
     ed8:	8c e1       	ldi	r24, 0x1C	; 28
     eda:	93 e0       	ldi	r25, 0x03	; 3
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	0e 94 39 0b 	call	0x1672	; 0x1672 <EEPROM_writeByte>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	a8 ec       	ldi	r26, 0xC8	; 200
     ee8:	b2 e4       	ldi	r27, 0x42	; 66
     eea:	8b 87       	std	Y+11, r24	; 0x0b
     eec:	9c 87       	std	Y+12, r25	; 0x0c
     eee:	ad 87       	std	Y+13, r26	; 0x0d
     ef0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	4a e7       	ldi	r20, 0x7A	; 122
     f00:	53 e4       	ldi	r21, 0x43	; 67
     f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	8f 83       	std	Y+7, r24	; 0x07
     f0c:	98 87       	std	Y+8, r25	; 0x08
     f0e:	a9 87       	std	Y+9, r26	; 0x09
     f10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f12:	6f 81       	ldd	r22, Y+7	; 0x07
     f14:	78 85       	ldd	r23, Y+8	; 0x08
     f16:	89 85       	ldd	r24, Y+9	; 0x09
     f18:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e8       	ldi	r20, 0x80	; 128
     f20:	5f e3       	ldi	r21, 0x3F	; 63
     f22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f26:	88 23       	and	r24, r24
     f28:	2c f4       	brge	.+10     	; 0xf34 <main+0x250>
		__ticks = 1;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	9e 83       	std	Y+6, r25	; 0x06
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	3f c0       	rjmp	.+126    	; 0xfb2 <main+0x2ce>
	else if (__tmp > 65535)
     f34:	6f 81       	ldd	r22, Y+7	; 0x07
     f36:	78 85       	ldd	r23, Y+8	; 0x08
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	3f ef       	ldi	r19, 0xFF	; 255
     f40:	4f e7       	ldi	r20, 0x7F	; 127
     f42:	57 e4       	ldi	r21, 0x47	; 71
     f44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f48:	18 16       	cp	r1, r24
     f4a:	4c f5       	brge	.+82     	; 0xf9e <main+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f50:	8d 85       	ldd	r24, Y+13	; 0x0d
     f52:	9e 85       	ldd	r25, Y+14	; 0x0e
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e2       	ldi	r20, 0x20	; 32
     f5a:	51 e4       	ldi	r21, 0x41	; 65
     f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9e 83       	std	Y+6, r25	; 0x06
     f72:	8d 83       	std	Y+5, r24	; 0x05
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <main+0x2b0>
     f76:	89 e1       	ldi	r24, 0x19	; 25
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9c 83       	std	Y+4, r25	; 0x04
     f7c:	8b 83       	std	Y+3, r24	; 0x03
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <main+0x29e>
     f86:	9c 83       	std	Y+4, r25	; 0x04
     f88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	9e 83       	std	Y+6, r25	; 0x06
     f92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	69 f7       	brne	.-38     	; 0xf76 <main+0x292>
     f9c:	14 c0       	rjmp	.+40     	; 0xfc6 <main+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9e:	6f 81       	ldd	r22, Y+7	; 0x07
     fa0:	78 85       	ldd	r23, Y+8	; 0x08
     fa2:	89 85       	ldd	r24, Y+9	; 0x09
     fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	8d 83       	std	Y+5, r24	; 0x05
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <main+0x2da>
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			recievedData = 0; /* reset to receive another order */
     fc6:	19 a2       	std	Y+33, r1	; 0x21
		}

		/************************************************************************************
		 * 								 OPENING DOOR CODE
		 ************************************************************************************/
		if(recievedData == OPEN_DOOR) /* Receive opening door order */
     fc8:	89 a1       	ldd	r24, Y+33	; 0x21
     fca:	84 31       	cpi	r24, 0x14	; 20
     fcc:	71 f5       	brne	.+92     	; 0x102a <main+0x346>
		{
			timer1_init(&timer1_config , 0 , 7209);
     fce:	ce 01       	movw	r24, r28
     fd0:	8b 96       	adiw	r24, 0x2b	; 43
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	49 e2       	ldi	r20, 0x29	; 41
     fd8:	5c e1       	ldi	r21, 0x1C	; 28
     fda:	0e 94 4e 11 	call	0x229c	; 0x229c <timer1_init>
     fde:	0e c0       	rjmp	.+28     	; 0xffc <main+0x318>
			while(f_seconds != 1)
			{

				/* Rotate motor ACW */
				PORTD &= ~(1 << PD6);
     fe0:	a2 e3       	ldi	r26, 0x32	; 50
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e2 e3       	ldi	r30, 0x32	; 50
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 7b       	andi	r24, 0xBF	; 191
     fec:	8c 93       	st	X, r24
				PORTD |= (1 << PD7);
     fee:	a2 e3       	ldi	r26, 0x32	; 50
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e2 e3       	ldi	r30, 0x32	; 50
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 68       	ori	r24, 0x80	; 128
     ffa:	8c 93       	st	X, r24
		 * 								 OPENING DOOR CODE
		 ************************************************************************************/
		if(recievedData == OPEN_DOOR) /* Receive opening door order */
		{
			timer1_init(&timer1_config , 0 , 7209);
			while(f_seconds != 1)
     ffc:	80 91 6e 00 	lds	r24, 0x006E
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	71 f7       	brne	.-36     	; 0xfe0 <main+0x2fc>
				PORTD &= ~(1 << PD6);
				PORTD |= (1 << PD7);
			}

			/* Stop motor */
			PORTD &= ~(1 << PD6);
    1004:	a2 e3       	ldi	r26, 0x32	; 50
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e2 e3       	ldi	r30, 0x32	; 50
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	8f 7b       	andi	r24, 0xBF	; 191
    1010:	8c 93       	st	X, r24
			PORTD &= ~(1 << PD7);
    1012:	a2 e3       	ldi	r26, 0x32	; 50
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8f 77       	andi	r24, 0x7F	; 127
    101e:	8c 93       	st	X, r24

			f_seconds = 0; /* reset seconds flag */
    1020:	10 92 6e 00 	sts	0x006E, r1
			recievedData = 0;
    1024:	19 a2       	std	Y+33, r1	; 0x21
			timer1StopClock(); /* stop timer1 clock */
    1026:	0e 94 cb 11 	call	0x2396	; 0x2396 <timer1StopClock>
		}

		/************************************************************************************
		 * 							     FIRING BUZZER CODE
		 ************************************************************************************/
		if(recievedData == FIRE_BUZZER) /* Receive Firing buzzer order */
    102a:	89 a1       	ldd	r24, Y+33	; 0x21
    102c:	86 31       	cpi	r24, 0x16	; 22
    102e:	01 f5       	brne	.+64     	; 0x1070 <main+0x38c>
		{
			timer1_init(&timer1_config , 0 , 7209);
    1030:	ce 01       	movw	r24, r28
    1032:	8b 96       	adiw	r24, 0x2b	; 43
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	49 e2       	ldi	r20, 0x29	; 41
    103a:	5c e1       	ldi	r21, 0x1C	; 28
    103c:	0e 94 4e 11 	call	0x229c	; 0x229c <timer1_init>
    1040:	07 c0       	rjmp	.+14     	; 0x1050 <main+0x36c>
			while(f_minutes != 1)
			{

				/*fire buzzer */
				PORTD |= (1 << PD4);
    1042:	a2 e3       	ldi	r26, 0x32	; 50
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e2 e3       	ldi	r30, 0x32	; 50
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	80 61       	ori	r24, 0x10	; 16
    104e:	8c 93       	st	X, r24
		 * 							     FIRING BUZZER CODE
		 ************************************************************************************/
		if(recievedData == FIRE_BUZZER) /* Receive Firing buzzer order */
		{
			timer1_init(&timer1_config , 0 , 7209);
			while(f_minutes != 1)
    1050:	80 91 6f 00 	lds	r24, 0x006F
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	a9 f7       	brne	.-22     	; 0x1042 <main+0x35e>
			{

				/*fire buzzer */
				PORTD |= (1 << PD4);
			}
			timer1StopClock();
    1058:	0e 94 cb 11 	call	0x2396	; 0x2396 <timer1StopClock>
			f_minutes = 0;
    105c:	10 92 6f 00 	sts	0x006F, r1
			PORTD &= ~(1 << PD4);
    1060:	a2 e3       	ldi	r26, 0x32	; 50
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e2 e3       	ldi	r30, 0x32	; 50
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8f 7e       	andi	r24, 0xEF	; 239
    106c:	8c 93       	st	X, r24
			recievedData = 0;
    106e:	19 a2       	std	Y+33, r1	; 0x21
		}

		/************************************************************************************
		 * 								  CLOSING DOOR CODE
		 ************************************************************************************/
		if(recievedData == CLOSE_DOOR) /* Receive Closing door order */
    1070:	89 a1       	ldd	r24, Y+33	; 0x21
    1072:	85 31       	cpi	r24, 0x15	; 21
    1074:	09 f0       	breq	.+2      	; 0x1078 <main+0x394>
    1076:	04 cf       	rjmp	.-504    	; 0xe80 <main+0x19c>
		{
			timer1_init(&timer1_config , 0 , 7209);
    1078:	ce 01       	movw	r24, r28
    107a:	8b 96       	adiw	r24, 0x2b	; 43
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	49 e2       	ldi	r20, 0x29	; 41
    1082:	5c e1       	ldi	r21, 0x1C	; 28
    1084:	0e 94 4e 11 	call	0x229c	; 0x229c <timer1_init>
    1088:	0e c0       	rjmp	.+28     	; 0x10a6 <main+0x3c2>
			while(f_seconds != 1)
			{

				/* Rotate motor CW */
				PORTD &= ~(1 << PD7);
    108a:	a2 e3       	ldi	r26, 0x32	; 50
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e2 e3       	ldi	r30, 0x32	; 50
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8f 77       	andi	r24, 0x7F	; 127
    1096:	8c 93       	st	X, r24
				PORTD |= (1 << PD6);
    1098:	a2 e3       	ldi	r26, 0x32	; 50
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e2 e3       	ldi	r30, 0x32	; 50
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	80 64       	ori	r24, 0x40	; 64
    10a4:	8c 93       	st	X, r24
		 * 								  CLOSING DOOR CODE
		 ************************************************************************************/
		if(recievedData == CLOSE_DOOR) /* Receive Closing door order */
		{
			timer1_init(&timer1_config , 0 , 7209);
			while(f_seconds != 1)
    10a6:	80 91 6e 00 	lds	r24, 0x006E
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	71 f7       	brne	.-36     	; 0x108a <main+0x3a6>
				PORTD &= ~(1 << PD7);
				PORTD |= (1 << PD6);
			}

			/* Stop motor */
			PORTD &= ~(1 << PD6);
    10ae:	a2 e3       	ldi	r26, 0x32	; 50
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e2 e3       	ldi	r30, 0x32	; 50
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 7b       	andi	r24, 0xBF	; 191
    10ba:	8c 93       	st	X, r24
			PORTD &= ~(1 << PD7);
    10bc:	a2 e3       	ldi	r26, 0x32	; 50
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e2 e3       	ldi	r30, 0x32	; 50
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	8f 77       	andi	r24, 0x7F	; 127
    10c8:	8c 93       	st	X, r24

			f_seconds = 0;
    10ca:	10 92 6e 00 	sts	0x006E, r1
			recievedData = 0;
    10ce:	19 a2       	std	Y+33, r1	; 0x21
			timer1StopClock();
    10d0:	0e 94 cb 11 	call	0x2396	; 0x2396 <timer1StopClock>
    10d4:	d5 ce       	rjmp	.-598    	; 0xe80 <main+0x19c>

000010d6 <reverseNumber>:
 *  Created on: Jan 29, 2020
 *      Author: Basel Ashraf
 */
#include "door_lock_control.h"
uint32 reverseNumber(uint32 number)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	29 97       	sbiw	r28, 0x09	; 9
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	6e 83       	std	Y+6, r22	; 0x06
    10ec:	7f 83       	std	Y+7, r23	; 0x07
    10ee:	88 87       	std	Y+8, r24	; 0x08
    10f0:	99 87       	std	Y+9, r25	; 0x09
	uint32 reverse = 0;
    10f2:	1a 82       	std	Y+2, r1	; 0x02
    10f4:	1b 82       	std	Y+3, r1	; 0x03
    10f6:	1c 82       	std	Y+4, r1	; 0x04
    10f8:	1d 82       	std	Y+5, r1	; 0x05
	uint8 remainder = 0;
    10fa:	19 82       	std	Y+1, r1	; 0x01
    10fc:	3c c0       	rjmp	.+120    	; 0x1176 <reverseNumber+0xa0>

	while(number != 0)
	{
		remainder = number % 10;
    10fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1100:	9f 81       	ldd	r25, Y+7	; 0x07
    1102:	a8 85       	ldd	r26, Y+8	; 0x08
    1104:	b9 85       	ldd	r27, Y+9	; 0x09
    1106:	2a e0       	ldi	r18, 0x0A	; 10
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e0       	ldi	r20, 0x00	; 0
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodsi4>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	89 83       	std	Y+1, r24	; 0x01
		reverse = (reverse*10) + remainder;
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	ac 81       	ldd	r26, Y+4	; 0x04
    1122:	bd 81       	ldd	r27, Y+5	; 0x05
    1124:	2a e0       	ldi	r18, 0x0A	; 10
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	50 e0       	ldi	r21, 0x00	; 0
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	0e 94 81 13 	call	0x2702	; 0x2702 <__mulsi3>
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a0 e0       	ldi	r26, 0x00	; 0
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	82 0f       	add	r24, r18
    1144:	93 1f       	adc	r25, r19
    1146:	a4 1f       	adc	r26, r20
    1148:	b5 1f       	adc	r27, r21
    114a:	8a 83       	std	Y+2, r24	; 0x02
    114c:	9b 83       	std	Y+3, r25	; 0x03
    114e:	ac 83       	std	Y+4, r26	; 0x04
    1150:	bd 83       	std	Y+5, r27	; 0x05
		number /= 10;
    1152:	8e 81       	ldd	r24, Y+6	; 0x06
    1154:	9f 81       	ldd	r25, Y+7	; 0x07
    1156:	a8 85       	ldd	r26, Y+8	; 0x08
    1158:	b9 85       	ldd	r27, Y+9	; 0x09
    115a:	2a e0       	ldi	r18, 0x0A	; 10
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodsi4>
    116a:	da 01       	movw	r26, r20
    116c:	c9 01       	movw	r24, r18
    116e:	8e 83       	std	Y+6, r24	; 0x06
    1170:	9f 83       	std	Y+7, r25	; 0x07
    1172:	a8 87       	std	Y+8, r26	; 0x08
    1174:	b9 87       	std	Y+9, r27	; 0x09
uint32 reverseNumber(uint32 number)
{
	uint32 reverse = 0;
	uint8 remainder = 0;

	while(number != 0)
    1176:	8e 81       	ldd	r24, Y+6	; 0x06
    1178:	9f 81       	ldd	r25, Y+7	; 0x07
    117a:	a8 85       	ldd	r26, Y+8	; 0x08
    117c:	b9 85       	ldd	r27, Y+9	; 0x09
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	a1 05       	cpc	r26, r1
    1182:	b1 05       	cpc	r27, r1
    1184:	09 f0       	breq	.+2      	; 0x1188 <reverseNumber+0xb2>
    1186:	bb cf       	rjmp	.-138    	; 0x10fe <reverseNumber+0x28>
		remainder = number % 10;
		reverse = (reverse*10) + remainder;
		number /= 10;
	}

	return reverse;
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	9b 81       	ldd	r25, Y+3	; 0x03
    118c:	ac 81       	ldd	r26, Y+4	; 0x04
    118e:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1190:	bc 01       	movw	r22, r24
    1192:	cd 01       	movw	r24, r26
    1194:	29 96       	adiw	r28, 0x09	; 9
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <savePasswordToEEPROM>:

uint8 savePasswordToEEPROM(uint32 data , uint16 address , uint8 locations)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	6c 97       	sbiw	r28, 0x1c	; 28
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	6e 8b       	std	Y+22, r22	; 0x16
    11bc:	7f 8b       	std	Y+23, r23	; 0x17
    11be:	88 8f       	std	Y+24, r24	; 0x18
    11c0:	99 8f       	std	Y+25, r25	; 0x19
    11c2:	5b 8f       	std	Y+27, r21	; 0x1b
    11c4:	4a 8f       	std	Y+26, r20	; 0x1a
    11c6:	2c 8f       	std	Y+28, r18	; 0x1c
	uint32 mask = 0xFF; /* masking byte by byte from data */
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	8a 8b       	std	Y+18, r24	; 0x12
    11d2:	9b 8b       	std	Y+19, r25	; 0x13
    11d4:	ac 8b       	std	Y+20, r26	; 0x14
    11d6:	bd 8b       	std	Y+21, r27	; 0x15
	uint8 temp;
	uint8 shiftNumber = 0;
    11d8:	18 8a       	std	Y+16, r1	; 0x10
	for(uint8 i = 0 ; i <locations ; i++)
    11da:	1f 86       	std	Y+15, r1	; 0x0f
    11dc:	94 c0       	rjmp	.+296    	; 0x1306 <savePasswordToEEPROM+0x160>
	{
		temp = mask & (data >> shiftNumber); /* taking 1 byte at a time */
    11de:	88 89       	ldd	r24, Y+16	; 0x10
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	8e 89       	ldd	r24, Y+22	; 0x16
    11e6:	9f 89       	ldd	r25, Y+23	; 0x17
    11e8:	a8 8d       	ldd	r26, Y+24	; 0x18
    11ea:	b9 8d       	ldd	r27, Y+25	; 0x19
    11ec:	04 c0       	rjmp	.+8      	; 0x11f6 <savePasswordToEEPROM+0x50>
    11ee:	b6 95       	lsr	r27
    11f0:	a7 95       	ror	r26
    11f2:	97 95       	ror	r25
    11f4:	87 95       	ror	r24
    11f6:	2a 95       	dec	r18
    11f8:	d2 f7       	brpl	.-12     	; 0x11ee <savePasswordToEEPROM+0x48>
    11fa:	98 2f       	mov	r25, r24
    11fc:	8a 89       	ldd	r24, Y+18	; 0x12
    11fe:	89 23       	and	r24, r25
    1200:	89 8b       	std	Y+17, r24	; 0x11
		EEPROM_writeByte(address , temp);
    1202:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1204:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1206:	69 89       	ldd	r22, Y+17	; 0x11
    1208:	0e 94 39 0b 	call	0x1672	; 0x1672 <EEPROM_writeByte>

		/* go to next location */
		address++;
    120c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    120e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	9b 8f       	std	Y+27, r25	; 0x1b
    1214:	8a 8f       	std	Y+26, r24	; 0x1a

		shiftNumber += 8; /* shift data to take the next 1 byte */
    1216:	88 89       	ldd	r24, Y+16	; 0x10
    1218:	88 5f       	subi	r24, 0xF8	; 248
    121a:	88 8b       	std	Y+16, r24	; 0x10
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a8 ec       	ldi	r26, 0xC8	; 200
    1222:	b2 e4       	ldi	r27, 0x42	; 66
    1224:	8b 87       	std	Y+11, r24	; 0x0b
    1226:	9c 87       	std	Y+12, r25	; 0x0c
    1228:	ad 87       	std	Y+13, r26	; 0x0d
    122a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122c:	6b 85       	ldd	r22, Y+11	; 0x0b
    122e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1230:	8d 85       	ldd	r24, Y+13	; 0x0d
    1232:	9e 85       	ldd	r25, Y+14	; 0x0e
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	4a e7       	ldi	r20, 0x7A	; 122
    123a:	53 e4       	ldi	r21, 0x43	; 67
    123c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	8f 83       	std	Y+7, r24	; 0x07
    1246:	98 87       	std	Y+8, r25	; 0x08
    1248:	a9 87       	std	Y+9, r26	; 0x09
    124a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124c:	6f 81       	ldd	r22, Y+7	; 0x07
    124e:	78 85       	ldd	r23, Y+8	; 0x08
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e8       	ldi	r20, 0x80	; 128
    125a:	5f e3       	ldi	r21, 0x3F	; 63
    125c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1260:	88 23       	and	r24, r24
    1262:	2c f4       	brge	.+10     	; 0x126e <savePasswordToEEPROM+0xc8>
		__ticks = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	9e 83       	std	Y+6, r25	; 0x06
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	3f c0       	rjmp	.+126    	; 0x12ec <savePasswordToEEPROM+0x146>
	else if (__tmp > 65535)
    126e:	6f 81       	ldd	r22, Y+7	; 0x07
    1270:	78 85       	ldd	r23, Y+8	; 0x08
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	9a 85       	ldd	r25, Y+10	; 0x0a
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1282:	18 16       	cp	r1, r24
    1284:	4c f5       	brge	.+82     	; 0x12d8 <savePasswordToEEPROM+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1286:	6b 85       	ldd	r22, Y+11	; 0x0b
    1288:	7c 85       	ldd	r23, Y+12	; 0x0c
    128a:	8d 85       	ldd	r24, Y+13	; 0x0d
    128c:	9e 85       	ldd	r25, Y+14	; 0x0e
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	51 e4       	ldi	r21, 0x41	; 65
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	bc 01       	movw	r22, r24
    12a0:	cd 01       	movw	r24, r26
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	0f c0       	rjmp	.+30     	; 0x12ce <savePasswordToEEPROM+0x128>
    12b0:	89 e1       	ldi	r24, 0x19	; 25
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	8b 83       	std	Y+3, r24	; 0x03
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <savePasswordToEEPROM+0x116>
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	69 f7       	brne	.-38     	; 0x12b0 <savePasswordToEEPROM+0x10a>
    12d6:	14 c0       	rjmp	.+40     	; 0x1300 <savePasswordToEEPROM+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d8:	6f 81       	ldd	r22, Y+7	; 0x07
    12da:	78 85       	ldd	r23, Y+8	; 0x08
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9e 83       	std	Y+6, r25	; 0x06
    12ea:	8d 83       	std	Y+5, r24	; 0x05
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <savePasswordToEEPROM+0x152>
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	89 83       	std	Y+1, r24	; 0x01
uint8 savePasswordToEEPROM(uint32 data , uint16 address , uint8 locations)
{
	uint32 mask = 0xFF; /* masking byte by byte from data */
	uint8 temp;
	uint8 shiftNumber = 0;
	for(uint8 i = 0 ; i <locations ; i++)
    1300:	8f 85       	ldd	r24, Y+15	; 0x0f
    1302:	8f 5f       	subi	r24, 0xFF	; 255
    1304:	8f 87       	std	Y+15, r24	; 0x0f
    1306:	9f 85       	ldd	r25, Y+15	; 0x0f
    1308:	8c 8d       	ldd	r24, Y+28	; 0x1c
    130a:	98 17       	cp	r25, r24
    130c:	08 f4       	brcc	.+2      	; 0x1310 <savePasswordToEEPROM+0x16a>
    130e:	67 cf       	rjmp	.-306    	; 0x11de <savePasswordToEEPROM+0x38>
		address++;

		shiftNumber += 8; /* shift data to take the next 1 byte */
		_delay_ms(100); /* small delay for R/W */
	}
	return SUCCESS;
    1310:	81 e0       	ldi	r24, 0x01	; 1
}
    1312:	6c 96       	adiw	r28, 0x1c	; 28
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <getPasswordFromEEPROM>:
uint32 getPasswordFromEEPROM(uint16 address , uint8 locations )
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	67 97       	sbiw	r28, 0x17	; 23
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
    1338:	9e 8b       	std	Y+22, r25	; 0x16
    133a:	8d 8b       	std	Y+21, r24	; 0x15
    133c:	6f 8b       	std	Y+23, r22	; 0x17
	uint8 dataFromEEPROM;
	uint32 password = 0;
    133e:	18 8a       	std	Y+16, r1	; 0x10
    1340:	19 8a       	std	Y+17, r1	; 0x11
    1342:	1a 8a       	std	Y+18, r1	; 0x12
    1344:	1b 8a       	std	Y+19, r1	; 0x13
	address = address + (locations-1); /* accessing the last location of the data which are stored in */
    1346:	8f 89       	ldd	r24, Y+23	; 0x17
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	8d 89       	ldd	r24, Y+21	; 0x15
    134e:	9e 89       	ldd	r25, Y+22	; 0x16
    1350:	82 0f       	add	r24, r18
    1352:	93 1f       	adc	r25, r19
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	9e 8b       	std	Y+22, r25	; 0x16
    1358:	8d 8b       	std	Y+21, r24	; 0x15
	for(uint8 i=0 ; i < locations ; i++)
    135a:	1f 86       	std	Y+15, r1	; 0x0f
    135c:	9f c0       	rjmp	.+318    	; 0x149c <getPasswordFromEEPROM+0x178>
	{
		password = (password << 8); /*shifting the password 1 byte to get the next byte */
    135e:	88 89       	ldd	r24, Y+16	; 0x10
    1360:	99 89       	ldd	r25, Y+17	; 0x11
    1362:	aa 89       	ldd	r26, Y+18	; 0x12
    1364:	bb 89       	ldd	r27, Y+19	; 0x13
    1366:	ba 2f       	mov	r27, r26
    1368:	a9 2f       	mov	r26, r25
    136a:	98 2f       	mov	r25, r24
    136c:	88 27       	eor	r24, r24
    136e:	88 8b       	std	Y+16, r24	; 0x10
    1370:	99 8b       	std	Y+17, r25	; 0x11
    1372:	aa 8b       	std	Y+18, r26	; 0x12
    1374:	bb 8b       	std	Y+19, r27	; 0x13
		EEPROM_readByte(address , &dataFromEEPROM);
    1376:	8d 89       	ldd	r24, Y+21	; 0x15
    1378:	9e 89       	ldd	r25, Y+22	; 0x16
    137a:	9e 01       	movw	r18, r28
    137c:	2c 5e       	subi	r18, 0xEC	; 236
    137e:	3f 4f       	sbci	r19, 0xFF	; 255
    1380:	b9 01       	movw	r22, r18
    1382:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <EEPROM_readByte>
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	a8 ec       	ldi	r26, 0xC8	; 200
    138c:	b2 e4       	ldi	r27, 0x42	; 66
    138e:	8b 87       	std	Y+11, r24	; 0x0b
    1390:	9c 87       	std	Y+12, r25	; 0x0c
    1392:	ad 87       	std	Y+13, r26	; 0x0d
    1394:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1396:	6b 85       	ldd	r22, Y+11	; 0x0b
    1398:	7c 85       	ldd	r23, Y+12	; 0x0c
    139a:	8d 85       	ldd	r24, Y+13	; 0x0d
    139c:	9e 85       	ldd	r25, Y+14	; 0x0e
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	4a e7       	ldi	r20, 0x7A	; 122
    13a4:	53 e4       	ldi	r21, 0x43	; 67
    13a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	8f 83       	std	Y+7, r24	; 0x07
    13b0:	98 87       	std	Y+8, r25	; 0x08
    13b2:	a9 87       	std	Y+9, r26	; 0x09
    13b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13b6:	6f 81       	ldd	r22, Y+7	; 0x07
    13b8:	78 85       	ldd	r23, Y+8	; 0x08
    13ba:	89 85       	ldd	r24, Y+9	; 0x09
    13bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e8       	ldi	r20, 0x80	; 128
    13c4:	5f e3       	ldi	r21, 0x3F	; 63
    13c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13ca:	88 23       	and	r24, r24
    13cc:	2c f4       	brge	.+10     	; 0x13d8 <getPasswordFromEEPROM+0xb4>
		__ticks = 1;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	9e 83       	std	Y+6, r25	; 0x06
    13d4:	8d 83       	std	Y+5, r24	; 0x05
    13d6:	3f c0       	rjmp	.+126    	; 0x1456 <getPasswordFromEEPROM+0x132>
	else if (__tmp > 65535)
    13d8:	6f 81       	ldd	r22, Y+7	; 0x07
    13da:	78 85       	ldd	r23, Y+8	; 0x08
    13dc:	89 85       	ldd	r24, Y+9	; 0x09
    13de:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	3f ef       	ldi	r19, 0xFF	; 255
    13e4:	4f e7       	ldi	r20, 0x7F	; 127
    13e6:	57 e4       	ldi	r21, 0x47	; 71
    13e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13ec:	18 16       	cp	r1, r24
    13ee:	4c f5       	brge	.+82     	; 0x1442 <getPasswordFromEEPROM+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e2       	ldi	r20, 0x20	; 32
    13fe:	51 e4       	ldi	r21, 0x41	; 65
    1400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	9e 83       	std	Y+6, r25	; 0x06
    1416:	8d 83       	std	Y+5, r24	; 0x05
    1418:	0f c0       	rjmp	.+30     	; 0x1438 <getPasswordFromEEPROM+0x114>
    141a:	89 e1       	ldi	r24, 0x19	; 25
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	9c 83       	std	Y+4, r25	; 0x04
    1420:	8b 83       	std	Y+3, r24	; 0x03
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <getPasswordFromEEPROM+0x102>
    142a:	9c 83       	std	Y+4, r25	; 0x04
    142c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	9e 81       	ldd	r25, Y+6	; 0x06
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	9e 81       	ldd	r25, Y+6	; 0x06
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	69 f7       	brne	.-38     	; 0x141a <getPasswordFromEEPROM+0xf6>
    1440:	14 c0       	rjmp	.+40     	; 0x146a <getPasswordFromEEPROM+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	78 85       	ldd	r23, Y+8	; 0x08
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	9e 83       	std	Y+6, r25	; 0x06
    1454:	8d 83       	std	Y+5, r24	; 0x05
    1456:	8d 81       	ldd	r24, Y+5	; 0x05
    1458:	9e 81       	ldd	r25, Y+6	; 0x06
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <getPasswordFromEEPROM+0x13e>
    1466:	9a 83       	std	Y+2, r25	; 0x02
    1468:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		password |= dataFromEEPROM; /* store the eeprom 1 byte data in 1 byte of the password */
    146a:	8c 89       	ldd	r24, Y+20	; 0x14
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	88 89       	ldd	r24, Y+16	; 0x10
    1476:	99 89       	ldd	r25, Y+17	; 0x11
    1478:	aa 89       	ldd	r26, Y+18	; 0x12
    147a:	bb 89       	ldd	r27, Y+19	; 0x13
    147c:	82 2b       	or	r24, r18
    147e:	93 2b       	or	r25, r19
    1480:	a4 2b       	or	r26, r20
    1482:	b5 2b       	or	r27, r21
    1484:	88 8b       	std	Y+16, r24	; 0x10
    1486:	99 8b       	std	Y+17, r25	; 0x11
    1488:	aa 8b       	std	Y+18, r26	; 0x12
    148a:	bb 8b       	std	Y+19, r27	; 0x13

		/* go to the next location */
		address--;
    148c:	8d 89       	ldd	r24, Y+21	; 0x15
    148e:	9e 89       	ldd	r25, Y+22	; 0x16
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9e 8b       	std	Y+22, r25	; 0x16
    1494:	8d 8b       	std	Y+21, r24	; 0x15
uint32 getPasswordFromEEPROM(uint16 address , uint8 locations )
{
	uint8 dataFromEEPROM;
	uint32 password = 0;
	address = address + (locations-1); /* accessing the last location of the data which are stored in */
	for(uint8 i=0 ; i < locations ; i++)
    1496:	8f 85       	ldd	r24, Y+15	; 0x0f
    1498:	8f 5f       	subi	r24, 0xFF	; 255
    149a:	8f 87       	std	Y+15, r24	; 0x0f
    149c:	9f 85       	ldd	r25, Y+15	; 0x0f
    149e:	8f 89       	ldd	r24, Y+23	; 0x17
    14a0:	98 17       	cp	r25, r24
    14a2:	08 f4       	brcc	.+2      	; 0x14a6 <getPasswordFromEEPROM+0x182>
    14a4:	5c cf       	rjmp	.-328    	; 0x135e <getPasswordFromEEPROM+0x3a>
		address--;



	}
	return password;
    14a6:	88 89       	ldd	r24, Y+16	; 0x10
    14a8:	99 89       	ldd	r25, Y+17	; 0x11
    14aa:	aa 89       	ldd	r26, Y+18	; 0x12
    14ac:	bb 89       	ldd	r27, Y+19	; 0x13


}
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	67 96       	adiw	r28, 0x17	; 23
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <SendPassword>:

void SendPassword(uint32 password)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <SendPassword+0x6>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <SendPassword+0x8>
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	69 83       	std	Y+1, r22	; 0x01
    14d2:	7a 83       	std	Y+2, r23	; 0x02
    14d4:	8b 83       	std	Y+3, r24	; 0x03
    14d6:	9c 83       	std	Y+4, r25	; 0x04
    14d8:	22 c0       	rjmp	.+68     	; 0x151e <SendPassword+0x5a>

	while(password != 0)
	{
		UART_sendByte(password % 10); /* sending byte by byte from a 4 byte password */
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	ab 81       	ldd	r26, Y+3	; 0x03
    14e0:	bc 81       	ldd	r27, Y+4	; 0x04
    14e2:	2a e0       	ldi	r18, 0x0A	; 10
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	bc 01       	movw	r22, r24
    14ec:	cd 01       	movw	r24, r26
    14ee:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodsi4>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	0e 94 05 12 	call	0x240a	; 0x240a <UART_sendByte>
		password /= 10;
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	ab 81       	ldd	r26, Y+3	; 0x03
    1500:	bc 81       	ldd	r27, Y+4	; 0x04
    1502:	2a e0       	ldi	r18, 0x0A	; 10
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 a0 13 	call	0x2740	; 0x2740 <__udivmodsi4>
    1512:	da 01       	movw	r26, r20
    1514:	c9 01       	movw	r24, r18
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	9a 83       	std	Y+2, r25	; 0x02
    151a:	ab 83       	std	Y+3, r26	; 0x03
    151c:	bc 83       	std	Y+4, r27	; 0x04
}

void SendPassword(uint32 password)
{

	while(password != 0)
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	9a 81       	ldd	r25, Y+2	; 0x02
    1522:	ab 81       	ldd	r26, Y+3	; 0x03
    1524:	bc 81       	ldd	r27, Y+4	; 0x04
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	a1 05       	cpc	r26, r1
    152a:	b1 05       	cpc	r27, r1
    152c:	b1 f6       	brne	.-84     	; 0x14da <SendPassword+0x16>
	{
		UART_sendByte(password % 10); /* sending byte by byte from a 4 byte password */
		password /= 10;
	}
	UART_sendByte(STOP_SENDING);
    152e:	82 e1       	ldi	r24, 0x12	; 18
    1530:	0e 94 05 12 	call	0x240a	; 0x240a <UART_sendByte>

}
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <recievePassword>:

void recievePassword(uint8 recievedData , uint32 * recievedPassword)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	00 d0       	rcall	.+0      	; 0x1548 <recievePassword+0x6>
    1548:	0f 92       	push	r0
    154a:	cd b7       	in	r28, 0x3d	; 61
    154c:	de b7       	in	r29, 0x3e	; 62
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	7b 83       	std	Y+3, r23	; 0x03
    1552:	6a 83       	std	Y+2, r22	; 0x02
	recievedData=0;
    1554:	19 82       	std	Y+1, r1	; 0x01
	*recievedPassword=0;
    1556:	ea 81       	ldd	r30, Y+2	; 0x02
    1558:	fb 81       	ldd	r31, Y+3	; 0x03
    155a:	10 82       	st	Z, r1
    155c:	11 82       	std	Z+1, r1	; 0x01
    155e:	12 82       	std	Z+2, r1	; 0x02
    1560:	13 82       	std	Z+3, r1	; 0x03
    1562:	25 c0       	rjmp	.+74     	; 0x15ae <recievePassword+0x6c>

	while(recievedData != STOP_SENDING)
	{
		*recievedPassword =(*(recievedPassword) * 10) + recievedData; /* Rearrange bytes to form the 4 byte passowrd */
    1564:	ea 81       	ldd	r30, Y+2	; 0x02
    1566:	fb 81       	ldd	r31, Y+3	; 0x03
    1568:	80 81       	ld	r24, Z
    156a:	91 81       	ldd	r25, Z+1	; 0x01
    156c:	a2 81       	ldd	r26, Z+2	; 0x02
    156e:	b3 81       	ldd	r27, Z+3	; 0x03
    1570:	2a e0       	ldi	r18, 0x0A	; 10
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	0e 94 81 13 	call	0x2702	; 0x2702 <__mulsi3>
    1580:	9b 01       	movw	r18, r22
    1582:	ac 01       	movw	r20, r24
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a0 e0       	ldi	r26, 0x00	; 0
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	82 0f       	add	r24, r18
    1590:	93 1f       	adc	r25, r19
    1592:	a4 1f       	adc	r26, r20
    1594:	b5 1f       	adc	r27, r21
    1596:	ea 81       	ldd	r30, Y+2	; 0x02
    1598:	fb 81       	ldd	r31, Y+3	; 0x03
    159a:	80 83       	st	Z, r24
    159c:	91 83       	std	Z+1, r25	; 0x01
    159e:	a2 83       	std	Z+2, r26	; 0x02
    15a0:	b3 83       	std	Z+3, r27	; 0x03

		UART_sendByte(CTRL_READY); /* Control Mc is ready for the next byte to recieve */
    15a2:	80 e1       	ldi	r24, 0x10	; 16
    15a4:	0e 94 05 12 	call	0x240a	; 0x240a <UART_sendByte>

		recievedData = UART_recieveByte();
    15a8:	0e 94 23 12 	call	0x2446	; 0x2446 <UART_recieveByte>
    15ac:	89 83       	std	Y+1, r24	; 0x01
void recievePassword(uint8 recievedData , uint32 * recievedPassword)
{
	recievedData=0;
	*recievedPassword=0;

	while(recievedData != STOP_SENDING)
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	82 31       	cpi	r24, 0x12	; 18
    15b2:	c1 f6       	brne	.-80     	; 0x1564 <recievePassword+0x22>
		UART_sendByte(CTRL_READY); /* Control Mc is ready for the next byte to recieve */

		recievedData = UART_recieveByte();
	}

}
    15b4:	0f 90       	pop	r0
    15b6:	0f 90       	pop	r0
    15b8:	0f 90       	pop	r0
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <sendEepromFlag>:

void sendEepromFlag(uint16 address , uint8 *data)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <sendEepromFlag+0x6>
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <sendEepromFlag+0x8>
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	9a 83       	std	Y+2, r25	; 0x02
    15ce:	89 83       	std	Y+1, r24	; 0x01
    15d0:	7c 83       	std	Y+4, r23	; 0x04
    15d2:	6b 83       	std	Y+3, r22	; 0x03
	while(UART_recieveByte() != HMI_READY);
    15d4:	0e 94 23 12 	call	0x2446	; 0x2446 <UART_recieveByte>
    15d8:	81 31       	cpi	r24, 0x11	; 17
    15da:	e1 f7       	brne	.-8      	; 0x15d4 <sendEepromFlag+0x14>
	EEPROM_readByte(address , data);
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	2b 81       	ldd	r18, Y+3	; 0x03
    15e2:	3c 81       	ldd	r19, Y+4	; 0x04
    15e4:	b9 01       	movw	r22, r18
    15e6:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <EEPROM_readByte>
	UART_sendByte(*data);
    15ea:	eb 81       	ldd	r30, Y+3	; 0x03
    15ec:	fc 81       	ldd	r31, Y+4	; 0x04
    15ee:	80 81       	ld	r24, Z
    15f0:	0e 94 05 12 	call	0x240a	; 0x240a <UART_sendByte>
}
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <sendEepromPassword>:
void sendEepromPassword(uint16 address , uint8 locations , uint32 * data)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <sendEepromPassword+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <sendEepromPassword+0x8>
    160a:	0f 92       	push	r0
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	9a 83       	std	Y+2, r25	; 0x02
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	6b 83       	std	Y+3, r22	; 0x03
    1616:	5d 83       	std	Y+5, r21	; 0x05
    1618:	4c 83       	std	Y+4, r20	; 0x04

	*data = getPasswordFromEEPROM(address , locations);
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	9a 81       	ldd	r25, Y+2	; 0x02
    161e:	6b 81       	ldd	r22, Y+3	; 0x03
    1620:	0e 94 92 09 	call	0x1324	; 0x1324 <getPasswordFromEEPROM>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	ec 81       	ldd	r30, Y+4	; 0x04
    162a:	fd 81       	ldd	r31, Y+5	; 0x05
    162c:	80 83       	st	Z, r24
    162e:	91 83       	std	Z+1, r25	; 0x01
    1630:	a2 83       	std	Z+2, r26	; 0x02
    1632:	b3 83       	std	Z+3, r27	; 0x03
	while(UART_recieveByte() != HMI_READY);
    1634:	0e 94 23 12 	call	0x2446	; 0x2446 <UART_recieveByte>
    1638:	81 31       	cpi	r24, 0x11	; 17
    163a:	e1 f7       	brne	.-8      	; 0x1634 <sendEepromPassword+0x32>
	SendPassword(*data);
    163c:	ec 81       	ldd	r30, Y+4	; 0x04
    163e:	fd 81       	ldd	r31, Y+5	; 0x05
    1640:	80 81       	ld	r24, Z
    1642:	91 81       	ldd	r25, Z+1	; 0x01
    1644:	a2 81       	ldd	r26, Z+2	; 0x02
    1646:	b3 81       	ldd	r27, Z+3	; 0x03
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <SendPassword>
}
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
    1668:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <TWI_init>
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	00 d0       	rcall	.+0      	; 0x1678 <EEPROM_writeByte+0x6>
    1678:	00 d0       	rcall	.+0      	; 0x167a <EEPROM_writeByte+0x8>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1684:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <TWI_start>
    if (TWI_getStatus() != TW_START)
    1688:	0e 94 48 0c 	call	0x1890	; 0x1890 <TWI_getStatus>
    168c:	88 30       	cpi	r24, 0x08	; 8
    168e:	11 f0       	breq	.+4      	; 0x1694 <EEPROM_writeByte+0x22>
        return ERROR;
    1690:	1c 82       	std	Y+4, r1	; 0x04
    1692:	28 c0       	rjmp	.+80     	; 0x16e4 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	80 70       	andi	r24, 0x00	; 0
    169a:	97 70       	andi	r25, 0x07	; 7
    169c:	88 0f       	add	r24, r24
    169e:	89 2f       	mov	r24, r25
    16a0:	88 1f       	adc	r24, r24
    16a2:	99 0b       	sbc	r25, r25
    16a4:	91 95       	neg	r25
    16a6:	80 6a       	ori	r24, 0xA0	; 160
    16a8:	0e 94 0b 0c 	call	0x1816	; 0x1816 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    16ac:	0e 94 48 0c 	call	0x1890	; 0x1890 <TWI_getStatus>
    16b0:	88 31       	cpi	r24, 0x18	; 24
    16b2:	11 f0       	breq	.+4      	; 0x16b8 <EEPROM_writeByte+0x46>
        return ERROR; 
    16b4:	1c 82       	std	Y+4, r1	; 0x04
    16b6:	16 c0       	rjmp	.+44     	; 0x16e4 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	0e 94 0b 0c 	call	0x1816	; 0x1816 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    16be:	0e 94 48 0c 	call	0x1890	; 0x1890 <TWI_getStatus>
    16c2:	88 32       	cpi	r24, 0x28	; 40
    16c4:	11 f0       	breq	.+4      	; 0x16ca <EEPROM_writeByte+0x58>
        return ERROR;
    16c6:	1c 82       	std	Y+4, r1	; 0x04
    16c8:	0d c0       	rjmp	.+26     	; 0x16e4 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	0e 94 0b 0c 	call	0x1816	; 0x1816 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    16d0:	0e 94 48 0c 	call	0x1890	; 0x1890 <TWI_getStatus>
    16d4:	88 32       	cpi	r24, 0x28	; 40
    16d6:	11 f0       	breq	.+4      	; 0x16dc <EEPROM_writeByte+0x6a>
        return ERROR;
    16d8:	1c 82       	std	Y+4, r1	; 0x04
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    16dc:	0e 94 00 0c 	call	0x1800	; 0x1800 <TWI_stop>
	
    return SUCCESS;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	8c 83       	std	Y+4, r24	; 0x04
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <EEPROM_readByte+0x6>
    16fa:	00 d0       	rcall	.+0      	; 0x16fc <EEPROM_readByte+0x8>
    16fc:	0f 92       	push	r0
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	7c 83       	std	Y+4, r23	; 0x04
    1708:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    170a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <TWI_start>
    if (TWI_getStatus() != TW_START)
    170e:	0e 94 48 0c 	call	0x1890	; 0x1890 <TWI_getStatus>
    1712:	88 30       	cpi	r24, 0x08	; 8
    1714:	11 f0       	breq	.+4      	; 0x171a <EEPROM_readByte+0x26>
        return ERROR;
    1716:	1d 82       	std	Y+5, r1	; 0x05
    1718:	44 c0       	rjmp	.+136    	; 0x17a2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	80 70       	andi	r24, 0x00	; 0
    1720:	97 70       	andi	r25, 0x07	; 7
    1722:	88 0f       	add	r24, r24
    1724:	89 2f       	mov	r24, r25
    1726:	88 1f       	adc	r24, r24
    1728:	99 0b       	sbc	r25, r25
    172a:	91 95       	neg	r25
    172c:	80 6a       	ori	r24, 0xA0	; 160
    172e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1732:	0e 94 48 0c 	call	0x1890	; 0x1890 <TWI_getStatus>
    1736:	88 31       	cpi	r24, 0x18	; 24
    1738:	11 f0       	breq	.+4      	; 0x173e <EEPROM_readByte+0x4a>
        return ERROR;
    173a:	1d 82       	std	Y+5, r1	; 0x05
    173c:	32 c0       	rjmp	.+100    	; 0x17a2 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	0e 94 0b 0c 	call	0x1816	; 0x1816 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1744:	0e 94 48 0c 	call	0x1890	; 0x1890 <TWI_getStatus>
    1748:	88 32       	cpi	r24, 0x28	; 40
    174a:	11 f0       	breq	.+4      	; 0x1750 <EEPROM_readByte+0x5c>
        return ERROR;
    174c:	1d 82       	std	Y+5, r1	; 0x05
    174e:	29 c0       	rjmp	.+82     	; 0x17a2 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1750:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    1754:	0e 94 48 0c 	call	0x1890	; 0x1890 <TWI_getStatus>
    1758:	80 31       	cpi	r24, 0x10	; 16
    175a:	11 f0       	breq	.+4      	; 0x1760 <EEPROM_readByte+0x6c>
        return ERROR;
    175c:	1d 82       	std	Y+5, r1	; 0x05
    175e:	21 c0       	rjmp	.+66     	; 0x17a2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	9a 81       	ldd	r25, Y+2	; 0x02
    1764:	80 70       	andi	r24, 0x00	; 0
    1766:	97 70       	andi	r25, 0x07	; 7
    1768:	88 0f       	add	r24, r24
    176a:	89 2f       	mov	r24, r25
    176c:	88 1f       	adc	r24, r24
    176e:	99 0b       	sbc	r25, r25
    1770:	91 95       	neg	r25
    1772:	81 6a       	ori	r24, 0xA1	; 161
    1774:	0e 94 0b 0c 	call	0x1816	; 0x1816 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1778:	0e 94 48 0c 	call	0x1890	; 0x1890 <TWI_getStatus>
    177c:	80 34       	cpi	r24, 0x40	; 64
    177e:	11 f0       	breq	.+4      	; 0x1784 <EEPROM_readByte+0x90>
        return ERROR;
    1780:	1d 82       	std	Y+5, r1	; 0x05
    1782:	0f c0       	rjmp	.+30     	; 0x17a2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    1784:	0e 94 35 0c 	call	0x186a	; 0x186a <TWI_readWithNACK>
    1788:	eb 81       	ldd	r30, Y+3	; 0x03
    178a:	fc 81       	ldd	r31, Y+4	; 0x04
    178c:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    178e:	0e 94 48 0c 	call	0x1890	; 0x1890 <TWI_getStatus>
    1792:	88 35       	cpi	r24, 0x58	; 88
    1794:	11 f0       	breq	.+4      	; 0x179a <EEPROM_readByte+0xa6>
        return ERROR;
    1796:	1d 82       	std	Y+5, r1	; 0x05
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    179a:	0e 94 00 0c 	call	0x1800	; 0x1800 <TWI_stop>
    return SUCCESS;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    17bc:	e0 e2       	ldi	r30, 0x20	; 32
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	82 e0       	ldi	r24, 0x02	; 2
    17c2:	80 83       	st	Z, r24
	TWSR = 0x00;
    17c4:	e1 e2       	ldi	r30, 0x21	; 33
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    17ca:	e2 e2       	ldi	r30, 0x22	; 34
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    17d2:	e6 e5       	ldi	r30, 0x56	; 86
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	84 e0       	ldi	r24, 0x04	; 4
    17d8:	80 83       	st	Z, r24
}
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <TWI_start>:

void TWI_start(void)
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    17e8:	e6 e5       	ldi	r30, 0x56	; 86
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	84 ea       	ldi	r24, 0xA4	; 164
    17ee:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    17f0:	e6 e5       	ldi	r30, 0x56	; 86
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	88 23       	and	r24, r24
    17f8:	dc f7       	brge	.-10     	; 0x17f0 <TWI_start+0x10>
}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <TWI_stop>:

void TWI_stop(void)
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1808:	e6 e5       	ldi	r30, 0x56	; 86
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	84 e9       	ldi	r24, 0x94	; 148
    180e:	80 83       	st	Z, r24
}
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <TWI_write>:

void TWI_write(uint8 data)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	0f 92       	push	r0
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1822:	e3 e2       	ldi	r30, 0x23	; 35
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    182a:	e6 e5       	ldi	r30, 0x56	; 86
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	84 e8       	ldi	r24, 0x84	; 132
    1830:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1832:	e6 e5       	ldi	r30, 0x56	; 86
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	88 23       	and	r24, r24
    183a:	dc f7       	brge	.-10     	; 0x1832 <TWI_write+0x1c>
}
    183c:	0f 90       	pop	r0
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    184c:	e6 e5       	ldi	r30, 0x56	; 86
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	84 ec       	ldi	r24, 0xC4	; 196
    1852:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1854:	e6 e5       	ldi	r30, 0x56	; 86
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	88 23       	and	r24, r24
    185c:	dc f7       	brge	.-10     	; 0x1854 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    185e:	e3 e2       	ldi	r30, 0x23	; 35
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
}
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1872:	e6 e5       	ldi	r30, 0x56	; 86
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	84 e8       	ldi	r24, 0x84	; 132
    1878:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    187a:	e6 e5       	ldi	r30, 0x56	; 86
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	88 23       	and	r24, r24
    1882:	dc f7       	brge	.-10     	; 0x187a <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1884:	e3 e2       	ldi	r30, 0x23	; 35
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
}
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	0f 92       	push	r0
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    189a:	e1 e2       	ldi	r30, 0x21	; 33
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	88 7f       	andi	r24, 0xF8	; 248
    18a2:	89 83       	std	Y+1, r24	; 0x01
    return status;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <LCD_init>:
 *  Created on: Dec 29, 2019
 *      Author: Basel Ashraf
 */
#include "lcd.h"
void LCD_init(void)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR|=(1<<RS)|(1<<E)|(1<<RW);
    18b6:	a7 e3       	ldi	r26, 0x37	; 55
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e7 e3       	ldi	r30, 0x37	; 55
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	8e 60       	ori	r24, 0x0E	; 14
    18c2:	8c 93       	st	X, r24
	LCD_DATA_PORT_DIR=0xff;
    18c4:	ea e3       	ldi	r30, 0x3A	; 58
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	8f ef       	ldi	r24, 0xFF	; 255
    18ca:	80 83       	st	Z, r24
	LCD_sendCommand(EIGHT_BITS_MODE);
    18cc:	88 e3       	ldi	r24, 0x38	; 56
    18ce:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF);
    18d2:	8c e0       	ldi	r24, 0x0C	; 12
    18d4:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_DISPLAY);
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_sendCommand>
}
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	e9 97       	sbiw	r28, 0x39	; 57
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS);
    18fa:	a8 e3       	ldi	r26, 0x38	; 56
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e8 e3       	ldi	r30, 0x38	; 56
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8d 7f       	andi	r24, 0xFD	; 253
    1906:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    1908:	a8 e3       	ldi	r26, 0x38	; 56
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e8 e3       	ldi	r30, 0x38	; 56
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	8b 7f       	andi	r24, 0xFB	; 251
    1914:	8c 93       	st	X, r24
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	a0 e8       	ldi	r26, 0x80	; 128
    191c:	bf e3       	ldi	r27, 0x3F	; 63
    191e:	8d ab       	std	Y+53, r24	; 0x35
    1920:	9e ab       	std	Y+54, r25	; 0x36
    1922:	af ab       	std	Y+55, r26	; 0x37
    1924:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1926:	6d a9       	ldd	r22, Y+53	; 0x35
    1928:	7e a9       	ldd	r23, Y+54	; 0x36
    192a:	8f a9       	ldd	r24, Y+55	; 0x37
    192c:	98 ad       	ldd	r25, Y+56	; 0x38
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	4a e7       	ldi	r20, 0x7A	; 122
    1934:	53 e4       	ldi	r21, 0x43	; 67
    1936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	89 ab       	std	Y+49, r24	; 0x31
    1940:	9a ab       	std	Y+50, r25	; 0x32
    1942:	ab ab       	std	Y+51, r26	; 0x33
    1944:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1946:	69 a9       	ldd	r22, Y+49	; 0x31
    1948:	7a a9       	ldd	r23, Y+50	; 0x32
    194a:	8b a9       	ldd	r24, Y+51	; 0x33
    194c:	9c a9       	ldd	r25, Y+52	; 0x34
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e8       	ldi	r20, 0x80	; 128
    1954:	5f e3       	ldi	r21, 0x3F	; 63
    1956:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    195a:	88 23       	and	r24, r24
    195c:	2c f4       	brge	.+10     	; 0x1968 <LCD_sendCommand+0x84>
		__ticks = 1;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	98 ab       	std	Y+48, r25	; 0x30
    1964:	8f a7       	std	Y+47, r24	; 0x2f
    1966:	3f c0       	rjmp	.+126    	; 0x19e6 <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1968:	69 a9       	ldd	r22, Y+49	; 0x31
    196a:	7a a9       	ldd	r23, Y+50	; 0x32
    196c:	8b a9       	ldd	r24, Y+51	; 0x33
    196e:	9c a9       	ldd	r25, Y+52	; 0x34
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	3f ef       	ldi	r19, 0xFF	; 255
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	57 e4       	ldi	r21, 0x47	; 71
    1978:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    197c:	18 16       	cp	r1, r24
    197e:	4c f5       	brge	.+82     	; 0x19d2 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1980:	6d a9       	ldd	r22, Y+53	; 0x35
    1982:	7e a9       	ldd	r23, Y+54	; 0x36
    1984:	8f a9       	ldd	r24, Y+55	; 0x37
    1986:	98 ad       	ldd	r25, Y+56	; 0x38
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e2       	ldi	r20, 0x20	; 32
    198e:	51 e4       	ldi	r21, 0x41	; 65
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	98 ab       	std	Y+48, r25	; 0x30
    19a6:	8f a7       	std	Y+47, r24	; 0x2f
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <LCD_sendCommand+0xe4>
    19aa:	89 e1       	ldi	r24, 0x19	; 25
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	9e a7       	std	Y+46, r25	; 0x2e
    19b0:	8d a7       	std	Y+45, r24	; 0x2d
    19b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    19b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <LCD_sendCommand+0xd2>
    19ba:	9e a7       	std	Y+46, r25	; 0x2e
    19bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19be:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c0:	98 a9       	ldd	r25, Y+48	; 0x30
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	98 ab       	std	Y+48, r25	; 0x30
    19c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ca:	98 a9       	ldd	r25, Y+48	; 0x30
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	69 f7       	brne	.-38     	; 0x19aa <LCD_sendCommand+0xc6>
    19d0:	14 c0       	rjmp	.+40     	; 0x19fa <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d2:	69 a9       	ldd	r22, Y+49	; 0x31
    19d4:	7a a9       	ldd	r23, Y+50	; 0x32
    19d6:	8b a9       	ldd	r24, Y+51	; 0x33
    19d8:	9c a9       	ldd	r25, Y+52	; 0x34
    19da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	98 ab       	std	Y+48, r25	; 0x30
    19e4:	8f a7       	std	Y+47, r24	; 0x2f
    19e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    19e8:	98 a9       	ldd	r25, Y+48	; 0x30
    19ea:	9c a7       	std	Y+44, r25	; 0x2c
    19ec:	8b a7       	std	Y+43, r24	; 0x2b
    19ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    19f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <LCD_sendCommand+0x10e>
    19f6:	9c a7       	std	Y+44, r25	; 0x2c
    19f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    19fa:	a8 e3       	ldi	r26, 0x38	; 56
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e8 e3       	ldi	r30, 0x38	; 56
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	88 60       	ori	r24, 0x08	; 8
    1a06:	8c 93       	st	X, r24
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 e8       	ldi	r26, 0x80	; 128
    1a0e:	bf e3       	ldi	r27, 0x3F	; 63
    1a10:	8f a3       	std	Y+39, r24	; 0x27
    1a12:	98 a7       	std	Y+40, r25	; 0x28
    1a14:	a9 a7       	std	Y+41, r26	; 0x29
    1a16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	6f a1       	ldd	r22, Y+39	; 0x27
    1a1a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a1c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a e7       	ldi	r20, 0x7A	; 122
    1a26:	53 e4       	ldi	r21, 0x43	; 67
    1a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8b a3       	std	Y+35, r24	; 0x23
    1a32:	9c a3       	std	Y+36, r25	; 0x24
    1a34:	ad a3       	std	Y+37, r26	; 0x25
    1a36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a38:	6b a1       	ldd	r22, Y+35	; 0x23
    1a3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a3e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <LCD_sendCommand+0x176>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9a a3       	std	Y+34, r25	; 0x22
    1a56:	89 a3       	std	Y+33, r24	; 0x21
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a60:	9e a1       	ldd	r25, Y+38	; 0x26
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	6f a1       	ldd	r22, Y+39	; 0x27
    1a74:	78 a5       	ldd	r23, Y+40	; 0x28
    1a76:	89 a5       	ldd	r24, Y+41	; 0x29
    1a78:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9a a3       	std	Y+34, r25	; 0x22
    1a98:	89 a3       	std	Y+33, r24	; 0x21
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <LCD_sendCommand+0x1d6>
    1a9c:	89 e1       	ldi	r24, 0x19	; 25
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	98 a3       	std	Y+32, r25	; 0x20
    1aa2:	8f 8f       	std	Y+31, r24	; 0x1f
    1aa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aa6:	98 a1       	ldd	r25, Y+32	; 0x20
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <LCD_sendCommand+0x1c4>
    1aac:	98 a3       	std	Y+32, r25	; 0x20
    1aae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	9a a3       	std	Y+34, r25	; 0x22
    1ab8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	89 a1       	ldd	r24, Y+33	; 0x21
    1abc:	9a a1       	ldd	r25, Y+34	; 0x22
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <LCD_sendCommand+0x1b8>
    1ac2:	14 c0       	rjmp	.+40     	; 0x1aec <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aca:	9e a1       	ldd	r25, Y+38	; 0x26
    1acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9a a3       	std	Y+34, r25	; 0x22
    1ad6:	89 a3       	std	Y+33, r24	; 0x21
    1ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    1ada:	9a a1       	ldd	r25, Y+34	; 0x22
    1adc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ade:	8d 8f       	std	Y+29, r24	; 0x1d
    1ae0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ae2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_sendCommand+0x200>
    1ae8:	9e 8f       	std	Y+30, r25	; 0x1e
    1aea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = command;
    1aec:	eb e3       	ldi	r30, 0x3B	; 59
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	89 ad       	ldd	r24, Y+57	; 0x39
    1af2:	80 83       	st	Z, r24
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a0 e8       	ldi	r26, 0x80	; 128
    1afa:	bf e3       	ldi	r27, 0x3F	; 63
    1afc:	89 8f       	std	Y+25, r24	; 0x19
    1afe:	9a 8f       	std	Y+26, r25	; 0x1a
    1b00:	ab 8f       	std	Y+27, r26	; 0x1b
    1b02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b04:	69 8d       	ldd	r22, Y+25	; 0x19
    1b06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	4a e7       	ldi	r20, 0x7A	; 122
    1b12:	53 e4       	ldi	r21, 0x43	; 67
    1b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	8d 8b       	std	Y+21, r24	; 0x15
    1b1e:	9e 8b       	std	Y+22, r25	; 0x16
    1b20:	af 8b       	std	Y+23, r26	; 0x17
    1b22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b24:	6d 89       	ldd	r22, Y+21	; 0x15
    1b26:	7e 89       	ldd	r23, Y+22	; 0x16
    1b28:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e8       	ldi	r20, 0x80	; 128
    1b32:	5f e3       	ldi	r21, 0x3F	; 63
    1b34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b38:	88 23       	and	r24, r24
    1b3a:	2c f4       	brge	.+10     	; 0x1b46 <LCD_sendCommand+0x262>
		__ticks = 1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	9c 8b       	std	Y+20, r25	; 0x14
    1b42:	8b 8b       	std	Y+19, r24	; 0x13
    1b44:	3f c0       	rjmp	.+126    	; 0x1bc4 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1b46:	6d 89       	ldd	r22, Y+21	; 0x15
    1b48:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	3f ef       	ldi	r19, 0xFF	; 255
    1b52:	4f e7       	ldi	r20, 0x7F	; 127
    1b54:	57 e4       	ldi	r21, 0x47	; 71
    1b56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b5a:	18 16       	cp	r1, r24
    1b5c:	4c f5       	brge	.+82     	; 0x1bb0 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e2       	ldi	r20, 0x20	; 32
    1b6c:	51 e4       	ldi	r21, 0x41	; 65
    1b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	bc 01       	movw	r22, r24
    1b78:	cd 01       	movw	r24, r26
    1b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	9c 8b       	std	Y+20, r25	; 0x14
    1b84:	8b 8b       	std	Y+19, r24	; 0x13
    1b86:	0f c0       	rjmp	.+30     	; 0x1ba6 <LCD_sendCommand+0x2c2>
    1b88:	89 e1       	ldi	r24, 0x19	; 25
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9a 8b       	std	Y+18, r25	; 0x12
    1b8e:	89 8b       	std	Y+17, r24	; 0x11
    1b90:	89 89       	ldd	r24, Y+17	; 0x11
    1b92:	9a 89       	ldd	r25, Y+18	; 0x12
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <LCD_sendCommand+0x2b0>
    1b98:	9a 8b       	std	Y+18, r25	; 0x12
    1b9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	9c 8b       	std	Y+20, r25	; 0x14
    1ba4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	69 f7       	brne	.-38     	; 0x1b88 <LCD_sendCommand+0x2a4>
    1bae:	14 c0       	rjmp	.+40     	; 0x1bd8 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9c 8b       	std	Y+20, r25	; 0x14
    1bc2:	8b 8b       	std	Y+19, r24	; 0x13
    1bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc8:	98 8b       	std	Y+16, r25	; 0x10
    1bca:	8f 87       	std	Y+15, r24	; 0x0f
    1bcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bce:	98 89       	ldd	r25, Y+16	; 0x10
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <LCD_sendCommand+0x2ec>
    1bd4:	98 8b       	std	Y+16, r25	; 0x10
    1bd6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    1bd8:	a8 e3       	ldi	r26, 0x38	; 56
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e8 e3       	ldi	r30, 0x38	; 56
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	87 7f       	andi	r24, 0xF7	; 247
    1be4:	8c 93       	st	X, r24
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	a0 e8       	ldi	r26, 0x80	; 128
    1bec:	bf e3       	ldi	r27, 0x3F	; 63
    1bee:	8b 87       	std	Y+11, r24	; 0x0b
    1bf0:	9c 87       	std	Y+12, r25	; 0x0c
    1bf2:	ad 87       	std	Y+13, r26	; 0x0d
    1bf4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	4a e7       	ldi	r20, 0x7A	; 122
    1c04:	53 e4       	ldi	r21, 0x43	; 67
    1c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	8f 83       	std	Y+7, r24	; 0x07
    1c10:	98 87       	std	Y+8, r25	; 0x08
    1c12:	a9 87       	std	Y+9, r26	; 0x09
    1c14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c16:	6f 81       	ldd	r22, Y+7	; 0x07
    1c18:	78 85       	ldd	r23, Y+8	; 0x08
    1c1a:	89 85       	ldd	r24, Y+9	; 0x09
    1c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c2a:	88 23       	and	r24, r24
    1c2c:	2c f4       	brge	.+10     	; 0x1c38 <LCD_sendCommand+0x354>
		__ticks = 1;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	3f c0       	rjmp	.+126    	; 0x1cb6 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1c38:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3a:	78 85       	ldd	r23, Y+8	; 0x08
    1c3c:	89 85       	ldd	r24, Y+9	; 0x09
    1c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	3f ef       	ldi	r19, 0xFF	; 255
    1c44:	4f e7       	ldi	r20, 0x7F	; 127
    1c46:	57 e4       	ldi	r21, 0x47	; 71
    1c48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c4c:	18 16       	cp	r1, r24
    1c4e:	4c f5       	brge	.+82     	; 0x1ca2 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e2       	ldi	r20, 0x20	; 32
    1c5e:	51 e4       	ldi	r21, 0x41	; 65
    1c60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	0f c0       	rjmp	.+30     	; 0x1c98 <LCD_sendCommand+0x3b4>
    1c7a:	89 e1       	ldi	r24, 0x19	; 25
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <LCD_sendCommand+0x3a2>
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	9e 81       	ldd	r25, Y+6	; 0x06
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	9e 83       	std	Y+6, r25	; 0x06
    1c96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	69 f7       	brne	.-38     	; 0x1c7a <LCD_sendCommand+0x396>
    1ca0:	14 c0       	rjmp	.+40     	; 0x1cca <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca4:	78 85       	ldd	r23, Y+8	; 0x08
    1ca6:	89 85       	ldd	r24, Y+9	; 0x09
    1ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1caa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <LCD_sendCommand+0x3de>
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1cca:	e9 96       	adiw	r28, 0x39	; 57
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	e9 97       	sbiw	r28, 0x39	; 57
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS);
    1cf2:	a8 e3       	ldi	r26, 0x38	; 56
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e8 e3       	ldi	r30, 0x38	; 56
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	82 60       	ori	r24, 0x02	; 2
    1cfe:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    1d00:	a8 e3       	ldi	r26, 0x38	; 56
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e8 e3       	ldi	r30, 0x38	; 56
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	8b 7f       	andi	r24, 0xFB	; 251
    1d0c:	8c 93       	st	X, r24
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a0 e8       	ldi	r26, 0x80	; 128
    1d14:	bf e3       	ldi	r27, 0x3F	; 63
    1d16:	8d ab       	std	Y+53, r24	; 0x35
    1d18:	9e ab       	std	Y+54, r25	; 0x36
    1d1a:	af ab       	std	Y+55, r26	; 0x37
    1d1c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1e:	6d a9       	ldd	r22, Y+53	; 0x35
    1d20:	7e a9       	ldd	r23, Y+54	; 0x36
    1d22:	8f a9       	ldd	r24, Y+55	; 0x37
    1d24:	98 ad       	ldd	r25, Y+56	; 0x38
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	4a e7       	ldi	r20, 0x7A	; 122
    1d2c:	53 e4       	ldi	r21, 0x43	; 67
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	89 ab       	std	Y+49, r24	; 0x31
    1d38:	9a ab       	std	Y+50, r25	; 0x32
    1d3a:	ab ab       	std	Y+51, r26	; 0x33
    1d3c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d3e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d40:	7a a9       	ldd	r23, Y+50	; 0x32
    1d42:	8b a9       	ldd	r24, Y+51	; 0x33
    1d44:	9c a9       	ldd	r25, Y+52	; 0x34
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e8       	ldi	r20, 0x80	; 128
    1d4c:	5f e3       	ldi	r21, 0x3F	; 63
    1d4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d52:	88 23       	and	r24, r24
    1d54:	2c f4       	brge	.+10     	; 0x1d60 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	98 ab       	std	Y+48, r25	; 0x30
    1d5c:	8f a7       	std	Y+47, r24	; 0x2f
    1d5e:	3f c0       	rjmp	.+126    	; 0x1dde <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1d60:	69 a9       	ldd	r22, Y+49	; 0x31
    1d62:	7a a9       	ldd	r23, Y+50	; 0x32
    1d64:	8b a9       	ldd	r24, Y+51	; 0x33
    1d66:	9c a9       	ldd	r25, Y+52	; 0x34
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	3f ef       	ldi	r19, 0xFF	; 255
    1d6c:	4f e7       	ldi	r20, 0x7F	; 127
    1d6e:	57 e4       	ldi	r21, 0x47	; 71
    1d70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d74:	18 16       	cp	r1, r24
    1d76:	4c f5       	brge	.+82     	; 0x1dca <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d78:	6d a9       	ldd	r22, Y+53	; 0x35
    1d7a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d7c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d7e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e2       	ldi	r20, 0x20	; 32
    1d86:	51 e4       	ldi	r21, 0x41	; 65
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	98 ab       	std	Y+48, r25	; 0x30
    1d9e:	8f a7       	std	Y+47, r24	; 0x2f
    1da0:	0f c0       	rjmp	.+30     	; 0x1dc0 <LCD_displayCharacter+0xe4>
    1da2:	89 e1       	ldi	r24, 0x19	; 25
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9e a7       	std	Y+46, r25	; 0x2e
    1da8:	8d a7       	std	Y+45, r24	; 0x2d
    1daa:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dac:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_displayCharacter+0xd2>
    1db2:	9e a7       	std	Y+46, r25	; 0x2e
    1db4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1db8:	98 a9       	ldd	r25, Y+48	; 0x30
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	98 ab       	std	Y+48, r25	; 0x30
    1dbe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	69 f7       	brne	.-38     	; 0x1da2 <LCD_displayCharacter+0xc6>
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dca:	69 a9       	ldd	r22, Y+49	; 0x31
    1dcc:	7a a9       	ldd	r23, Y+50	; 0x32
    1dce:	8b a9       	ldd	r24, Y+51	; 0x33
    1dd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	98 ab       	std	Y+48, r25	; 0x30
    1ddc:	8f a7       	std	Y+47, r24	; 0x2f
    1dde:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de0:	98 a9       	ldd	r25, Y+48	; 0x30
    1de2:	9c a7       	std	Y+44, r25	; 0x2c
    1de4:	8b a7       	std	Y+43, r24	; 0x2b
    1de6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1de8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_displayCharacter+0x10e>
    1dee:	9c a7       	std	Y+44, r25	; 0x2c
    1df0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    1df2:	a8 e3       	ldi	r26, 0x38	; 56
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e8 e3       	ldi	r30, 0x38	; 56
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 60       	ori	r24, 0x08	; 8
    1dfe:	8c 93       	st	X, r24
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	a0 e8       	ldi	r26, 0x80	; 128
    1e06:	bf e3       	ldi	r27, 0x3F	; 63
    1e08:	8f a3       	std	Y+39, r24	; 0x27
    1e0a:	98 a7       	std	Y+40, r25	; 0x28
    1e0c:	a9 a7       	std	Y+41, r26	; 0x29
    1e0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e10:	6f a1       	ldd	r22, Y+39	; 0x27
    1e12:	78 a5       	ldd	r23, Y+40	; 0x28
    1e14:	89 a5       	ldd	r24, Y+41	; 0x29
    1e16:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	4a e7       	ldi	r20, 0x7A	; 122
    1e1e:	53 e4       	ldi	r21, 0x43	; 67
    1e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	8b a3       	std	Y+35, r24	; 0x23
    1e2a:	9c a3       	std	Y+36, r25	; 0x24
    1e2c:	ad a3       	std	Y+37, r26	; 0x25
    1e2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e30:	6b a1       	ldd	r22, Y+35	; 0x23
    1e32:	7c a1       	ldd	r23, Y+36	; 0x24
    1e34:	8d a1       	ldd	r24, Y+37	; 0x25
    1e36:	9e a1       	ldd	r25, Y+38	; 0x26
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e8       	ldi	r20, 0x80	; 128
    1e3e:	5f e3       	ldi	r21, 0x3F	; 63
    1e40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e44:	88 23       	and	r24, r24
    1e46:	2c f4       	brge	.+10     	; 0x1e52 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9a a3       	std	Y+34, r25	; 0x22
    1e4e:	89 a3       	std	Y+33, r24	; 0x21
    1e50:	3f c0       	rjmp	.+126    	; 0x1ed0 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1e52:	6b a1       	ldd	r22, Y+35	; 0x23
    1e54:	7c a1       	ldd	r23, Y+36	; 0x24
    1e56:	8d a1       	ldd	r24, Y+37	; 0x25
    1e58:	9e a1       	ldd	r25, Y+38	; 0x26
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	3f ef       	ldi	r19, 0xFF	; 255
    1e5e:	4f e7       	ldi	r20, 0x7F	; 127
    1e60:	57 e4       	ldi	r21, 0x47	; 71
    1e62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e66:	18 16       	cp	r1, r24
    1e68:	4c f5       	brge	.+82     	; 0x1ebc <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1e70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	40 e2       	ldi	r20, 0x20	; 32
    1e78:	51 e4       	ldi	r21, 0x41	; 65
    1e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9a a3       	std	Y+34, r25	; 0x22
    1e90:	89 a3       	std	Y+33, r24	; 0x21
    1e92:	0f c0       	rjmp	.+30     	; 0x1eb2 <LCD_displayCharacter+0x1d6>
    1e94:	89 e1       	ldi	r24, 0x19	; 25
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	98 a3       	std	Y+32, r25	; 0x20
    1e9a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e9e:	98 a1       	ldd	r25, Y+32	; 0x20
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_displayCharacter+0x1c4>
    1ea4:	98 a3       	std	Y+32, r25	; 0x20
    1ea6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eaa:	9a a1       	ldd	r25, Y+34	; 0x22
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	9a a3       	std	Y+34, r25	; 0x22
    1eb0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb2:	89 a1       	ldd	r24, Y+33	; 0x21
    1eb4:	9a a1       	ldd	r25, Y+34	; 0x22
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	69 f7       	brne	.-38     	; 0x1e94 <LCD_displayCharacter+0x1b8>
    1eba:	14 c0       	rjmp	.+40     	; 0x1ee4 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ebc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ebe:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	9a a3       	std	Y+34, r25	; 0x22
    1ece:	89 a3       	std	Y+33, r24	; 0x21
    1ed0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ed2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ed4:	9e 8f       	std	Y+30, r25	; 0x1e
    1ed6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ed8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_displayCharacter+0x200>
    1ee0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ee2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = data;
    1ee4:	eb e3       	ldi	r30, 0x3B	; 59
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	89 ad       	ldd	r24, Y+57	; 0x39
    1eea:	80 83       	st	Z, r24
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a0 e8       	ldi	r26, 0x80	; 128
    1ef2:	bf e3       	ldi	r27, 0x3F	; 63
    1ef4:	89 8f       	std	Y+25, r24	; 0x19
    1ef6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ef8:	ab 8f       	std	Y+27, r26	; 0x1b
    1efa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	69 8d       	ldd	r22, Y+25	; 0x19
    1efe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a e7       	ldi	r20, 0x7A	; 122
    1f0a:	53 e4       	ldi	r21, 0x43	; 67
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8d 8b       	std	Y+21, r24	; 0x15
    1f16:	9e 8b       	std	Y+22, r25	; 0x16
    1f18:	af 8b       	std	Y+23, r26	; 0x17
    1f1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f20:	8f 89       	ldd	r24, Y+23	; 0x17
    1f22:	98 8d       	ldd	r25, Y+24	; 0x18
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <LCD_displayCharacter+0x262>
		__ticks = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9c 8b       	std	Y+20, r25	; 0x14
    1f3a:	8b 8b       	std	Y+19, r24	; 0x13
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1f3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f40:	7e 89       	ldd	r23, Y+22	; 0x16
    1f42:	8f 89       	ldd	r24, Y+23	; 0x17
    1f44:	98 8d       	ldd	r25, Y+24	; 0x18
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	4c f5       	brge	.+82     	; 0x1fa8 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f56:	69 8d       	ldd	r22, Y+25	; 0x19
    1f58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9c 8b       	std	Y+20, r25	; 0x14
    1f7c:	8b 8b       	std	Y+19, r24	; 0x13
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <LCD_displayCharacter+0x2c2>
    1f80:	89 e1       	ldi	r24, 0x19	; 25
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9a 8b       	std	Y+18, r25	; 0x12
    1f86:	89 8b       	std	Y+17, r24	; 0x11
    1f88:	89 89       	ldd	r24, Y+17	; 0x11
    1f8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_displayCharacter+0x2b0>
    1f90:	9a 8b       	std	Y+18, r25	; 0x12
    1f92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f94:	8b 89       	ldd	r24, Y+19	; 0x13
    1f96:	9c 89       	ldd	r25, Y+20	; 0x14
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	9c 8b       	std	Y+20, r25	; 0x14
    1f9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <LCD_displayCharacter+0x2a4>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1faa:	7e 89       	ldd	r23, Y+22	; 0x16
    1fac:	8f 89       	ldd	r24, Y+23	; 0x17
    1fae:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9c 8b       	std	Y+20, r25	; 0x14
    1fba:	8b 8b       	std	Y+19, r24	; 0x13
    1fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc0:	98 8b       	std	Y+16, r25	; 0x10
    1fc2:	8f 87       	std	Y+15, r24	; 0x0f
    1fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc6:	98 89       	ldd	r25, Y+16	; 0x10
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <LCD_displayCharacter+0x2ec>
    1fcc:	98 8b       	std	Y+16, r25	; 0x10
    1fce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    1fd0:	a8 e3       	ldi	r26, 0x38	; 56
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e8 e3       	ldi	r30, 0x38	; 56
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	87 7f       	andi	r24, 0xF7	; 247
    1fdc:	8c 93       	st	X, r24
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a0 e8       	ldi	r26, 0x80	; 128
    1fe4:	bf e3       	ldi	r27, 0x3F	; 63
    1fe6:	8b 87       	std	Y+11, r24	; 0x0b
    1fe8:	9c 87       	std	Y+12, r25	; 0x0c
    1fea:	ad 87       	std	Y+13, r26	; 0x0d
    1fec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a e7       	ldi	r20, 0x7A	; 122
    1ffc:	53 e4       	ldi	r21, 0x43	; 67
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	8f 83       	std	Y+7, r24	; 0x07
    2008:	98 87       	std	Y+8, r25	; 0x08
    200a:	a9 87       	std	Y+9, r26	; 0x09
    200c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200e:	6f 81       	ldd	r22, Y+7	; 0x07
    2010:	78 85       	ldd	r23, Y+8	; 0x08
    2012:	89 85       	ldd	r24, Y+9	; 0x09
    2014:	9a 85       	ldd	r25, Y+10	; 0x0a
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e8       	ldi	r20, 0x80	; 128
    201c:	5f e3       	ldi	r21, 0x3F	; 63
    201e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2022:	88 23       	and	r24, r24
    2024:	2c f4       	brge	.+10     	; 0x2030 <LCD_displayCharacter+0x354>
		__ticks = 1;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
    202e:	3f c0       	rjmp	.+126    	; 0x20ae <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	3f ef       	ldi	r19, 0xFF	; 255
    203c:	4f e7       	ldi	r20, 0x7F	; 127
    203e:	57 e4       	ldi	r21, 0x47	; 71
    2040:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2044:	18 16       	cp	r1, r24
    2046:	4c f5       	brge	.+82     	; 0x209a <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2048:	6b 85       	ldd	r22, Y+11	; 0x0b
    204a:	7c 85       	ldd	r23, Y+12	; 0x0c
    204c:	8d 85       	ldd	r24, Y+13	; 0x0d
    204e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e2       	ldi	r20, 0x20	; 32
    2056:	51 e4       	ldi	r21, 0x41	; 65
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	0f c0       	rjmp	.+30     	; 0x2090 <LCD_displayCharacter+0x3b4>
    2072:	89 e1       	ldi	r24, 0x19	; 25
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9c 83       	std	Y+4, r25	; 0x04
    2078:	8b 83       	std	Y+3, r24	; 0x03
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <LCD_displayCharacter+0x3a2>
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	69 f7       	brne	.-38     	; 0x2072 <LCD_displayCharacter+0x396>
    2098:	14 c0       	rjmp	.+40     	; 0x20c2 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209a:	6f 81       	ldd	r22, Y+7	; 0x07
    209c:	78 85       	ldd	r23, Y+8	; 0x08
    209e:	89 85       	ldd	r24, Y+9	; 0x09
    20a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	9a 83       	std	Y+2, r25	; 0x02
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <LCD_displayCharacter+0x3de>
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    20c2:	e9 96       	adiw	r28, 0x39	; 57
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	00 d0       	rcall	.+0      	; 0x20da <LCD_displayString+0x6>
    20da:	0f 92       	push	r0
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	9b 83       	std	Y+3, r25	; 0x03
    20e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    20e4:	19 82       	std	Y+1, r1	; 0x01
    20e6:	0e c0       	rjmp	.+28     	; 0x2104 <LCD_displayString+0x30>
	while(Str[i]!='\0')
	{
		LCD_displayCharacter(Str[i]);
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	9b 81       	ldd	r25, Y+3	; 0x03
    20f2:	fc 01       	movw	r30, r24
    20f4:	e2 0f       	add	r30, r18
    20f6:	f3 1f       	adc	r31, r19
    20f8:	80 81       	ld	r24, Z
    20fa:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <LCD_displayCharacter>
		i++;
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	8f 5f       	subi	r24, 0xFF	; 255
    2102:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i=0;
	while(Str[i]!='\0')
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	9b 81       	ldd	r25, Y+3	; 0x03
    210e:	fc 01       	movw	r30, r24
    2110:	e2 0f       	add	r30, r18
    2112:	f3 1f       	adc	r31, r19
    2114:	80 81       	ld	r24, Z
    2116:	88 23       	and	r24, r24
    2118:	39 f7       	brne	.-50     	; 0x20e8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_DISPLAY);
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_sendCommand>
}
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <LCD_displayStringRowColumn+0x6>
    2140:	00 d0       	rcall	.+0      	; 0x2142 <LCD_displayStringRowColumn+0x8>
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	6a 83       	std	Y+2, r22	; 0x02
    214a:	5c 83       	std	Y+4, r21	; 0x04
    214c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col);
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	6a 81       	ldd	r22, Y+2	; 0x02
    2152:	0e 94 b6 10 	call	0x216c	; 0x216c <LCD_goToRowColumn>
	LCD_displayString(Str);
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <LCD_displayString>
}
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	00 d0       	rcall	.+0      	; 0x2172 <LCD_goToRowColumn+0x6>
    2172:	00 d0       	rcall	.+0      	; 0x2174 <LCD_goToRowColumn+0x8>
    2174:	0f 92       	push	r0
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	8a 83       	std	Y+2, r24	; 0x02
    217c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	3d 83       	std	Y+5, r19	; 0x05
    2186:	2c 83       	std	Y+4, r18	; 0x04
    2188:	8c 81       	ldd	r24, Y+4	; 0x04
    218a:	9d 81       	ldd	r25, Y+5	; 0x05
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	91 05       	cpc	r25, r1
    2190:	c1 f0       	breq	.+48     	; 0x21c2 <LCD_goToRowColumn+0x56>
    2192:	2c 81       	ldd	r18, Y+4	; 0x04
    2194:	3d 81       	ldd	r19, Y+5	; 0x05
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	2c f4       	brge	.+10     	; 0x21a6 <LCD_goToRowColumn+0x3a>
    219c:	8c 81       	ldd	r24, Y+4	; 0x04
    219e:	9d 81       	ldd	r25, Y+5	; 0x05
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	61 f0       	breq	.+24     	; 0x21bc <LCD_goToRowColumn+0x50>
    21a4:	19 c0       	rjmp	.+50     	; 0x21d8 <LCD_goToRowColumn+0x6c>
    21a6:	2c 81       	ldd	r18, Y+4	; 0x04
    21a8:	3d 81       	ldd	r19, Y+5	; 0x05
    21aa:	22 30       	cpi	r18, 0x02	; 2
    21ac:	31 05       	cpc	r19, r1
    21ae:	69 f0       	breq	.+26     	; 0x21ca <LCD_goToRowColumn+0x5e>
    21b0:	8c 81       	ldd	r24, Y+4	; 0x04
    21b2:	9d 81       	ldd	r25, Y+5	; 0x05
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	91 05       	cpc	r25, r1
    21b8:	61 f0       	breq	.+24     	; 0x21d2 <LCD_goToRowColumn+0x66>
    21ba:	0e c0       	rjmp	.+28     	; 0x21d8 <LCD_goToRowColumn+0x6c>
	{
	case 0 :
		address=col;
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	89 83       	std	Y+1, r24	; 0x01
    21c0:	0b c0       	rjmp	.+22     	; 0x21d8 <LCD_goToRowColumn+0x6c>
		break;
	case 1 :
		address=col+0x40;
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	80 5c       	subi	r24, 0xC0	; 192
    21c6:	89 83       	std	Y+1, r24	; 0x01
    21c8:	07 c0       	rjmp	.+14     	; 0x21d8 <LCD_goToRowColumn+0x6c>
		break;
	case 2 :
		address=col+0x10;
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	80 5f       	subi	r24, 0xF0	; 240
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	03 c0       	rjmp	.+6      	; 0x21d8 <LCD_goToRowColumn+0x6c>
		break;
	case 3 :
		address=col+0x50;
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	80 5b       	subi	r24, 0xB0	; 176
    21d6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
		LCD_sendCommand(address|SET_CURSOR_LOCATION);
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	80 68       	ori	r24, 0x80	; 128
    21dc:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <LCD_sendCommand>

}
    21e0:	0f 90       	pop	r0
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	62 97       	sbiw	r28, 0x12	; 18
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
    2204:	9a 8b       	std	Y+18, r25	; 0x12
    2206:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    2208:	89 89       	ldd	r24, Y+17	; 0x11
    220a:	9a 89       	ldd	r25, Y+18	; 0x12
    220c:	9e 01       	movw	r18, r28
    220e:	2f 5f       	subi	r18, 0xFF	; 255
    2210:	3f 4f       	sbci	r19, 0xFF	; 255
    2212:	b9 01       	movw	r22, r18
    2214:	4a e0       	ldi	r20, 0x0A	; 10
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <itoa>
	LCD_displayString(buff);
    221c:	ce 01       	movw	r24, r28
    221e:	01 96       	adiw	r24, 0x01	; 1
    2220:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <LCD_displayString>
}
    2224:	62 96       	adiw	r28, 0x12	; 18
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <__vector_6>:
}
#endif

#ifdef COMP1A
ISR(TIMER1_COMPA_vect)
{
    2236:	1f 92       	push	r1
    2238:	0f 92       	push	r0
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	0f 92       	push	r0
    223e:	11 24       	eor	r1, r1
    2240:	2f 93       	push	r18
    2242:	3f 93       	push	r19
    2244:	4f 93       	push	r20
    2246:	5f 93       	push	r21
    2248:	6f 93       	push	r22
    224a:	7f 93       	push	r23
    224c:	8f 93       	push	r24
    224e:	9f 93       	push	r25
    2250:	af 93       	push	r26
    2252:	bf 93       	push	r27
    2254:	ef 93       	push	r30
    2256:	ff 93       	push	r31
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackTimer1 != NULL_PTR)
    2260:	80 91 70 00 	lds	r24, 0x0070
    2264:	90 91 71 00 	lds	r25, 0x0071
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	29 f0       	breq	.+10     	; 0x2276 <__vector_6+0x40>
	{
		(*g_callBackTimer1)();
    226c:	e0 91 70 00 	lds	r30, 0x0070
    2270:	f0 91 71 00 	lds	r31, 0x0071
    2274:	09 95       	icall
	}
}
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	ff 91       	pop	r31
    227c:	ef 91       	pop	r30
    227e:	bf 91       	pop	r27
    2280:	af 91       	pop	r26
    2282:	9f 91       	pop	r25
    2284:	8f 91       	pop	r24
    2286:	7f 91       	pop	r23
    2288:	6f 91       	pop	r22
    228a:	5f 91       	pop	r21
    228c:	4f 91       	pop	r20
    228e:	3f 91       	pop	r19
    2290:	2f 91       	pop	r18
    2292:	0f 90       	pop	r0
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	0f 90       	pop	r0
    2298:	1f 90       	pop	r1
    229a:	18 95       	reti

0000229c <timer1_init>:
/******************************************************************************************************
 * 											FUNCTION DIFINITION
 *****************************************************************************************************/

void timer1_init(timer1Config * timerConfig , uint16 initialValue , uint16 compareValue )
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	00 d0       	rcall	.+0      	; 0x22a2 <timer1_init+0x6>
    22a2:	00 d0       	rcall	.+0      	; 0x22a4 <timer1_init+0x8>
    22a4:	00 d0       	rcall	.+0      	; 0x22a6 <timer1_init+0xa>
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
    22aa:	9a 83       	std	Y+2, r25	; 0x02
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	7c 83       	std	Y+4, r23	; 0x04
    22b0:	6b 83       	std	Y+3, r22	; 0x03
    22b2:	5e 83       	std	Y+6, r21	; 0x06
    22b4:	4d 83       	std	Y+5, r20	; 0x05
	TCCR1A = (TCCR1A & 0x0f) | ((timerConfig ->compareMode) << 4 ); /* masking last 4 bits of TIMER1A control register */
    22b6:	af e4       	ldi	r26, 0x4F	; 79
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	ef e4       	ldi	r30, 0x4F	; 79
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	28 2f       	mov	r18, r24
    22c2:	2f 70       	andi	r18, 0x0F	; 15
    22c4:	e9 81       	ldd	r30, Y+1	; 0x01
    22c6:	fa 81       	ldd	r31, Y+2	; 0x02
    22c8:	81 81       	ldd	r24, Z+1	; 0x01
    22ca:	88 2f       	mov	r24, r24
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	82 95       	swap	r24
    22d0:	92 95       	swap	r25
    22d2:	90 7f       	andi	r25, 0xF0	; 240
    22d4:	98 27       	eor	r25, r24
    22d6:	80 7f       	andi	r24, 0xF0	; 240
    22d8:	98 27       	eor	r25, r24
    22da:	82 2b       	or	r24, r18
    22dc:	8c 93       	st	X, r24

#ifndef PWM
	/* non_pwm mode */
	SET_BIT(TCCR1A , FOC1A);
    22de:	af e4       	ldi	r26, 0x4F	; 79
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	ef e4       	ldi	r30, 0x4F	; 79
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	88 60       	ori	r24, 0x08	; 8
    22ea:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , FOC1A);
    22ec:	af e4       	ldi	r26, 0x4F	; 79
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	ef e4       	ldi	r30, 0x4F	; 79
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	88 60       	ori	r24, 0x08	; 8
    22f8:	8c 93       	st	X, r24
#endif

	/* masking first 2 bits of TIMER1A control register with the first 2 bits of timer1 waveform mode */
	TCCR1A = (TCCR1A & 0xFC) | ((timerConfig -> mode) & 0x03);
    22fa:	af e4       	ldi	r26, 0x4F	; 79
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	ef e4       	ldi	r30, 0x4F	; 79
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	98 2f       	mov	r25, r24
    2306:	9c 7f       	andi	r25, 0xFC	; 252
    2308:	e9 81       	ldd	r30, Y+1	; 0x01
    230a:	fa 81       	ldd	r31, Y+2	; 0x02
    230c:	80 81       	ld	r24, Z
    230e:	83 70       	andi	r24, 0x03	; 3
    2310:	89 2b       	or	r24, r25
    2312:	8c 93       	st	X, r24

	/* masking  bit 3 and 4 of TIMER1B control register with the other 2 bits of timer1 waveform mode */
	TCCR1B = (TCCR1B & 0xE7) | (((timerConfig -> mode) & 0x0C) << 1);
    2314:	ae e4       	ldi	r26, 0x4E	; 78
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	ee e4       	ldi	r30, 0x4E	; 78
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	28 2f       	mov	r18, r24
    2320:	27 7e       	andi	r18, 0xE7	; 231
    2322:	e9 81       	ldd	r30, Y+1	; 0x01
    2324:	fa 81       	ldd	r31, Y+2	; 0x02
    2326:	80 81       	ld	r24, Z
    2328:	88 2f       	mov	r24, r24
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	8c 70       	andi	r24, 0x0C	; 12
    232e:	90 70       	andi	r25, 0x00	; 0
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	82 2b       	or	r24, r18
    2336:	8c 93       	st	X, r24

	/* masking first 3 bit in TIMER1B control register for clock prescaler selection */
	TCCR1B = (TCCR1B & 0Xf8) | ((timerConfig -> clock) & 0x07);
    2338:	ae e4       	ldi	r26, 0x4E	; 78
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	ee e4       	ldi	r30, 0x4E	; 78
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	98 2f       	mov	r25, r24
    2344:	98 7f       	andi	r25, 0xF8	; 248
    2346:	e9 81       	ldd	r30, Y+1	; 0x01
    2348:	fa 81       	ldd	r31, Y+2	; 0x02
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	87 70       	andi	r24, 0x07	; 7
    234e:	89 2b       	or	r24, r25
    2350:	8c 93       	st	X, r24

	TCNT1 = initialValue;
    2352:	ec e4       	ldi	r30, 0x4C	; 76
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
	OCR1A = compareValue;
    235e:	ea e4       	ldi	r30, 0x4A	; 74
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	91 83       	std	Z+1, r25	; 0x01
    2368:	80 83       	st	Z, r24
	OCR1B = compareValue;
    236a:	e8 e4       	ldi	r30, 0x48	; 72
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	9e 81       	ldd	r25, Y+6	; 0x06
    2372:	91 83       	std	Z+1, r25	; 0x01
    2374:	80 83       	st	Z, r24
#ifdef NORMAL__MODE
	SET_BIT(TIMSK , TOIE1);  /* timer1 overflow interrupt enable */
#endif

#ifdef COMP1A
	SET_BIT(TIMSK , OCIE1A); /* compare match A interrupt enable */
    2376:	a9 e5       	ldi	r26, 0x59	; 89
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	e9 e5       	ldi	r30, 0x59	; 89
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	80 61       	ori	r24, 0x10	; 16
    2382:	8c 93       	st	X, r24

#ifdef COMP1B
	SET_BIT(TIMSK , OCIE1B); /* compare match B interrupt enable */
#endif

}
    2384:	26 96       	adiw	r28, 0x06	; 6
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <timer1StopClock>:

void timer1StopClock(void)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS10) &~ (1 << CS11) &~ (1 <<CS12); /* stop clock */
    239e:	ae e4       	ldi	r26, 0x4E	; 78
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	ee e4       	ldi	r30, 0x4E	; 78
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	88 7f       	andi	r24, 0xF8	; 248
    23aa:	8c 93       	st	X, r24
}
    23ac:	cf 91       	pop	r28
    23ae:	df 91       	pop	r29
    23b0:	08 95       	ret

000023b2 <callBackFunctionTimer1>:

void callBackFunctionTimer1(void(*CallBackPtr)(void))
{
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <callBackFunctionTimer1+0x6>
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	9a 83       	std	Y+2, r25	; 0x02
    23be:	89 83       	std	Y+1, r24	; 0x01
 g_callBackTimer1 = CallBackPtr;
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	9a 81       	ldd	r25, Y+2	; 0x02
    23c4:	90 93 71 00 	sts	0x0071, r25
    23c8:	80 93 70 00 	sts	0x0070, r24
}
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    23de:	eb e2       	ldi	r30, 0x2B	; 43
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    23e6:	ea e2       	ldi	r30, 0x2A	; 42
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	88 e1       	ldi	r24, 0x18	; 24
    23ec:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    23ee:	e0 e4       	ldi	r30, 0x40	; 64
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	86 e8       	ldi	r24, 0x86	; 134
    23f4:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    23f6:	e0 e4       	ldi	r30, 0x40	; 64
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    23fc:	e9 e2       	ldi	r30, 0x29	; 41
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	8c e0       	ldi	r24, 0x0C	; 12
    2402:	80 83       	st	Z, r24
}
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	0f 92       	push	r0
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */

	UDR = data;
    2416:	ec e2       	ldi	r30, 0x2C	; 44
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
    241e:	eb e2       	ldi	r30, 0x2B	; 43
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	88 2f       	mov	r24, r24
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	80 74       	andi	r24, 0x40	; 64
    242a:	90 70       	andi	r25, 0x00	; 0
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	b9 f3       	breq	.-18     	; 0x241e <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
    2430:	ab e2       	ldi	r26, 0x2B	; 43
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	eb e2       	ldi	r30, 0x2B	; 43
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	80 64       	ori	r24, 0x40	; 64
    243c:	8c 93       	st	X, r24

}
    243e:	0f 90       	pop	r0
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    244e:	eb e2       	ldi	r30, 0x2B	; 43
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	80 81       	ld	r24, Z
    2454:	88 23       	and	r24, r24
    2456:	dc f7       	brge	.-10     	; 0x244e <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2458:	ec e2       	ldi	r30, 0x2C	; 44
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
}
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	00 d0       	rcall	.+0      	; 0x246a <UART_sendString+0x6>
    246a:	0f 92       	push	r0
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	9b 83       	std	Y+3, r25	; 0x03
    2472:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2474:	19 82       	std	Y+1, r1	; 0x01
    2476:	0e c0       	rjmp	.+28     	; 0x2494 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	9b 81       	ldd	r25, Y+3	; 0x03
    2482:	fc 01       	movw	r30, r24
    2484:	e2 0f       	add	r30, r18
    2486:	f3 1f       	adc	r31, r19
    2488:	80 81       	ld	r24, Z
    248a:	0e 94 05 12 	call	0x240a	; 0x240a <UART_sendByte>
		i++;
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	8f 5f       	subi	r24, 0xFF	; 255
    2492:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	28 2f       	mov	r18, r24
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	9b 81       	ldd	r25, Y+3	; 0x03
    249e:	fc 01       	movw	r30, r24
    24a0:	e2 0f       	add	r30, r18
    24a2:	f3 1f       	adc	r31, r19
    24a4:	80 81       	ld	r24, Z
    24a6:	88 23       	and	r24, r24
    24a8:	39 f7       	brne	.-50     	; 0x2478 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	cf 91       	pop	r28
    24b2:	df 91       	pop	r29
    24b4:	08 95       	ret

000024b6 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <UART_receiveString+0xa>
    24c0:	0f 92       	push	r0
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	9b 83       	std	Y+3, r25	; 0x03
    24c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24ca:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	9b 81       	ldd	r25, Y+3	; 0x03
    24d6:	8c 01       	movw	r16, r24
    24d8:	02 0f       	add	r16, r18
    24da:	13 1f       	adc	r17, r19
    24dc:	0e 94 23 12 	call	0x2446	; 0x2446 <UART_recieveByte>
    24e0:	f8 01       	movw	r30, r16
    24e2:	80 83       	st	Z, r24
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	8f 5f       	subi	r24, 0xFF	; 255
    24ea:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	28 2f       	mov	r18, r24
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	9b 81       	ldd	r25, Y+3	; 0x03
    24f6:	8c 01       	movw	r16, r24
    24f8:	02 0f       	add	r16, r18
    24fa:	13 1f       	adc	r17, r19
    24fc:	0e 94 23 12 	call	0x2446	; 0x2446 <UART_recieveByte>
    2500:	f8 01       	movw	r30, r16
    2502:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	9b 81       	ldd	r25, Y+3	; 0x03
    250e:	fc 01       	movw	r30, r24
    2510:	e2 0f       	add	r30, r18
    2512:	f3 1f       	adc	r31, r19
    2514:	80 81       	ld	r24, Z
    2516:	83 32       	cpi	r24, 0x23	; 35
    2518:	31 f7       	brne	.-52     	; 0x24e6 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	28 2f       	mov	r18, r24
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	9b 81       	ldd	r25, Y+3	; 0x03
    2524:	fc 01       	movw	r30, r24
    2526:	e2 0f       	add	r30, r18
    2528:	f3 1f       	adc	r31, r19
    252a:	10 82       	st	Z, r1
}
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	1f 91       	pop	r17
    2538:	0f 91       	pop	r16
    253a:	08 95       	ret

0000253c <WDT_ON>:
 *      Author: Basel Ashraf
 */
#include "wd_timer.h"

void WDT_ON(void)
{
    253c:	df 93       	push	r29
    253e:	cf 93       	push	r28
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
	// Watchdog timer enables with timeout period 16.3ms .
	WDTCR = (1<<WDE);
    2544:	e1 e4       	ldi	r30, 0x41	; 65
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	88 e0       	ldi	r24, 0x08	; 8
    254a:	80 83       	st	Z, r24
}
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <WDT_OFF>:

// 	function to disable Watchdog timer.
void WDT_OFF(void)
{
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	68 97       	sbiw	r28, 0x18	; 24
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
	// set the WDTOE & WDE bits in the same operation
	WDTCR = (1<<WDTOE)|(1<<WDE);
    2566:	e1 e4       	ldi	r30, 0x41	; 65
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	88 e1       	ldi	r24, 0x18	; 24
    256c:	80 83       	st	Z, r24
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	a0 e8       	ldi	r26, 0x80	; 128
    2574:	b0 e4       	ldi	r27, 0x40	; 64
    2576:	8d 8b       	std	Y+21, r24	; 0x15
    2578:	9e 8b       	std	Y+22, r25	; 0x16
    257a:	af 8b       	std	Y+23, r26	; 0x17
    257c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    257e:	6d 89       	ldd	r22, Y+21	; 0x15
    2580:	7e 89       	ldd	r23, Y+22	; 0x16
    2582:	8f 89       	ldd	r24, Y+23	; 0x17
    2584:	98 8d       	ldd	r25, Y+24	; 0x18
    2586:	2b ea       	ldi	r18, 0xAB	; 171
    2588:	3a ea       	ldi	r19, 0xAA	; 170
    258a:	4a ea       	ldi	r20, 0xAA	; 170
    258c:	5e e3       	ldi	r21, 0x3E	; 62
    258e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	89 8b       	std	Y+17, r24	; 0x11
    2598:	9a 8b       	std	Y+18, r25	; 0x12
    259a:	ab 8b       	std	Y+19, r26	; 0x13
    259c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    259e:	69 89       	ldd	r22, Y+17	; 0x11
    25a0:	7a 89       	ldd	r23, Y+18	; 0x12
    25a2:	8b 89       	ldd	r24, Y+19	; 0x13
    25a4:	9c 89       	ldd	r25, Y+20	; 0x14
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e8       	ldi	r20, 0x80	; 128
    25ac:	5f e3       	ldi	r21, 0x3F	; 63
    25ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25b2:	88 23       	and	r24, r24
    25b4:	1c f4       	brge	.+6      	; 0x25bc <WDT_OFF+0x6a>
		__ticks = 1;
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	88 8b       	std	Y+16, r24	; 0x10
    25ba:	91 c0       	rjmp	.+290    	; 0x26de <WDT_OFF+0x18c>
	else if (__tmp > 255)
    25bc:	69 89       	ldd	r22, Y+17	; 0x11
    25be:	7a 89       	ldd	r23, Y+18	; 0x12
    25c0:	8b 89       	ldd	r24, Y+19	; 0x13
    25c2:	9c 89       	ldd	r25, Y+20	; 0x14
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	4f e7       	ldi	r20, 0x7F	; 127
    25ca:	53 e4       	ldi	r21, 0x43	; 67
    25cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25d0:	18 16       	cp	r1, r24
    25d2:	0c f0       	brlt	.+2      	; 0x25d6 <WDT_OFF+0x84>
    25d4:	7b c0       	rjmp	.+246    	; 0x26cc <WDT_OFF+0x17a>
	{
		_delay_ms(__us / 1000.0);
    25d6:	6d 89       	ldd	r22, Y+21	; 0x15
    25d8:	7e 89       	ldd	r23, Y+22	; 0x16
    25da:	8f 89       	ldd	r24, Y+23	; 0x17
    25dc:	98 8d       	ldd	r25, Y+24	; 0x18
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	4a e7       	ldi	r20, 0x7A	; 122
    25e4:	54 e4       	ldi	r21, 0x44	; 68
    25e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	8c 87       	std	Y+12, r24	; 0x0c
    25f0:	9d 87       	std	Y+13, r25	; 0x0d
    25f2:	ae 87       	std	Y+14, r26	; 0x0e
    25f4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    25f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    25fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    25fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a e7       	ldi	r20, 0x7A	; 122
    2604:	53 e4       	ldi	r21, 0x43	; 67
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	88 87       	std	Y+8, r24	; 0x08
    2610:	99 87       	std	Y+9, r25	; 0x09
    2612:	aa 87       	std	Y+10, r26	; 0x0a
    2614:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2616:	68 85       	ldd	r22, Y+8	; 0x08
    2618:	79 85       	ldd	r23, Y+9	; 0x09
    261a:	8a 85       	ldd	r24, Y+10	; 0x0a
    261c:	9b 85       	ldd	r25, Y+11	; 0x0b
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <WDT_OFF+0xe6>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9f 83       	std	Y+7, r25	; 0x07
    2634:	8e 83       	std	Y+6, r24	; 0x06
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <WDT_OFF+0x164>
	else if (__tmp > 65535)
    2638:	68 85       	ldd	r22, Y+8	; 0x08
    263a:	79 85       	ldd	r23, Y+9	; 0x09
    263c:	8a 85       	ldd	r24, Y+10	; 0x0a
    263e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <WDT_OFF+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	6c 85       	ldd	r22, Y+12	; 0x0c
    2652:	7d 85       	ldd	r23, Y+13	; 0x0d
    2654:	8e 85       	ldd	r24, Y+14	; 0x0e
    2656:	9f 85       	ldd	r25, Y+15	; 0x0f
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9f 83       	std	Y+7, r25	; 0x07
    2676:	8e 83       	std	Y+6, r24	; 0x06
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <WDT_OFF+0x146>
    267a:	89 e1       	ldi	r24, 0x19	; 25
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9d 83       	std	Y+5, r25	; 0x05
    2680:	8c 83       	std	Y+4, r24	; 0x04
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	9d 81       	ldd	r25, Y+5	; 0x05
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <WDT_OFF+0x134>
    268a:	9d 83       	std	Y+5, r25	; 0x05
    268c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8e 81       	ldd	r24, Y+6	; 0x06
    2690:	9f 81       	ldd	r25, Y+7	; 0x07
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9f 83       	std	Y+7, r25	; 0x07
    2696:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8e 81       	ldd	r24, Y+6	; 0x06
    269a:	9f 81       	ldd	r25, Y+7	; 0x07
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <WDT_OFF+0x128>
    26a0:	24 c0       	rjmp	.+72     	; 0x26ea <WDT_OFF+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	68 85       	ldd	r22, Y+8	; 0x08
    26a4:	79 85       	ldd	r23, Y+9	; 0x09
    26a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    26a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9f 83       	std	Y+7, r25	; 0x07
    26b4:	8e 83       	std	Y+6, r24	; 0x06
    26b6:	8e 81       	ldd	r24, Y+6	; 0x06
    26b8:	9f 81       	ldd	r25, Y+7	; 0x07
    26ba:	9b 83       	std	Y+3, r25	; 0x03
    26bc:	8a 83       	std	Y+2, r24	; 0x02
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	9b 81       	ldd	r25, Y+3	; 0x03
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <WDT_OFF+0x170>
    26c6:	9b 83       	std	Y+3, r25	; 0x03
    26c8:	8a 83       	std	Y+2, r24	; 0x02
    26ca:	0f c0       	rjmp	.+30     	; 0x26ea <WDT_OFF+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26cc:	69 89       	ldd	r22, Y+17	; 0x11
    26ce:	7a 89       	ldd	r23, Y+18	; 0x12
    26d0:	8b 89       	ldd	r24, Y+19	; 0x13
    26d2:	9c 89       	ldd	r25, Y+20	; 0x14
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	88 8b       	std	Y+16, r24	; 0x10
    26de:	88 89       	ldd	r24, Y+16	; 0x10
    26e0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	8a 95       	dec	r24
    26e6:	f1 f7       	brne	.-4      	; 0x26e4 <WDT_OFF+0x192>
    26e8:	89 83       	std	Y+1, r24	; 0x01
	//wait 4 cycles before clear the WDE bit
	_delay_us(4);
	WDTCR = 0x00;
    26ea:	e1 e4       	ldi	r30, 0x41	; 65
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	10 82       	st	Z, r1
}
    26f0:	68 96       	adiw	r28, 0x18	; 24
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	cf 91       	pop	r28
    26fe:	df 91       	pop	r29
    2700:	08 95       	ret

00002702 <__mulsi3>:
    2702:	62 9f       	mul	r22, r18
    2704:	d0 01       	movw	r26, r0
    2706:	73 9f       	mul	r23, r19
    2708:	f0 01       	movw	r30, r0
    270a:	82 9f       	mul	r24, r18
    270c:	e0 0d       	add	r30, r0
    270e:	f1 1d       	adc	r31, r1
    2710:	64 9f       	mul	r22, r20
    2712:	e0 0d       	add	r30, r0
    2714:	f1 1d       	adc	r31, r1
    2716:	92 9f       	mul	r25, r18
    2718:	f0 0d       	add	r31, r0
    271a:	83 9f       	mul	r24, r19
    271c:	f0 0d       	add	r31, r0
    271e:	74 9f       	mul	r23, r20
    2720:	f0 0d       	add	r31, r0
    2722:	65 9f       	mul	r22, r21
    2724:	f0 0d       	add	r31, r0
    2726:	99 27       	eor	r25, r25
    2728:	72 9f       	mul	r23, r18
    272a:	b0 0d       	add	r27, r0
    272c:	e1 1d       	adc	r30, r1
    272e:	f9 1f       	adc	r31, r25
    2730:	63 9f       	mul	r22, r19
    2732:	b0 0d       	add	r27, r0
    2734:	e1 1d       	adc	r30, r1
    2736:	f9 1f       	adc	r31, r25
    2738:	bd 01       	movw	r22, r26
    273a:	cf 01       	movw	r24, r30
    273c:	11 24       	eor	r1, r1
    273e:	08 95       	ret

00002740 <__udivmodsi4>:
    2740:	a1 e2       	ldi	r26, 0x21	; 33
    2742:	1a 2e       	mov	r1, r26
    2744:	aa 1b       	sub	r26, r26
    2746:	bb 1b       	sub	r27, r27
    2748:	fd 01       	movw	r30, r26
    274a:	0d c0       	rjmp	.+26     	; 0x2766 <__udivmodsi4_ep>

0000274c <__udivmodsi4_loop>:
    274c:	aa 1f       	adc	r26, r26
    274e:	bb 1f       	adc	r27, r27
    2750:	ee 1f       	adc	r30, r30
    2752:	ff 1f       	adc	r31, r31
    2754:	a2 17       	cp	r26, r18
    2756:	b3 07       	cpc	r27, r19
    2758:	e4 07       	cpc	r30, r20
    275a:	f5 07       	cpc	r31, r21
    275c:	20 f0       	brcs	.+8      	; 0x2766 <__udivmodsi4_ep>
    275e:	a2 1b       	sub	r26, r18
    2760:	b3 0b       	sbc	r27, r19
    2762:	e4 0b       	sbc	r30, r20
    2764:	f5 0b       	sbc	r31, r21

00002766 <__udivmodsi4_ep>:
    2766:	66 1f       	adc	r22, r22
    2768:	77 1f       	adc	r23, r23
    276a:	88 1f       	adc	r24, r24
    276c:	99 1f       	adc	r25, r25
    276e:	1a 94       	dec	r1
    2770:	69 f7       	brne	.-38     	; 0x274c <__udivmodsi4_loop>
    2772:	60 95       	com	r22
    2774:	70 95       	com	r23
    2776:	80 95       	com	r24
    2778:	90 95       	com	r25
    277a:	9b 01       	movw	r18, r22
    277c:	ac 01       	movw	r20, r24
    277e:	bd 01       	movw	r22, r26
    2780:	cf 01       	movw	r24, r30
    2782:	08 95       	ret

00002784 <__prologue_saves__>:
    2784:	2f 92       	push	r2
    2786:	3f 92       	push	r3
    2788:	4f 92       	push	r4
    278a:	5f 92       	push	r5
    278c:	6f 92       	push	r6
    278e:	7f 92       	push	r7
    2790:	8f 92       	push	r8
    2792:	9f 92       	push	r9
    2794:	af 92       	push	r10
    2796:	bf 92       	push	r11
    2798:	cf 92       	push	r12
    279a:	df 92       	push	r13
    279c:	ef 92       	push	r14
    279e:	ff 92       	push	r15
    27a0:	0f 93       	push	r16
    27a2:	1f 93       	push	r17
    27a4:	cf 93       	push	r28
    27a6:	df 93       	push	r29
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	ca 1b       	sub	r28, r26
    27ae:	db 0b       	sbc	r29, r27
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	de bf       	out	0x3e, r29	; 62
    27b6:	0f be       	out	0x3f, r0	; 63
    27b8:	cd bf       	out	0x3d, r28	; 61
    27ba:	09 94       	ijmp

000027bc <__epilogue_restores__>:
    27bc:	2a 88       	ldd	r2, Y+18	; 0x12
    27be:	39 88       	ldd	r3, Y+17	; 0x11
    27c0:	48 88       	ldd	r4, Y+16	; 0x10
    27c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    27c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    27c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    27c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    27cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    27ce:	b9 84       	ldd	r11, Y+9	; 0x09
    27d0:	c8 84       	ldd	r12, Y+8	; 0x08
    27d2:	df 80       	ldd	r13, Y+7	; 0x07
    27d4:	ee 80       	ldd	r14, Y+6	; 0x06
    27d6:	fd 80       	ldd	r15, Y+5	; 0x05
    27d8:	0c 81       	ldd	r16, Y+4	; 0x04
    27da:	1b 81       	ldd	r17, Y+3	; 0x03
    27dc:	aa 81       	ldd	r26, Y+2	; 0x02
    27de:	b9 81       	ldd	r27, Y+1	; 0x01
    27e0:	ce 0f       	add	r28, r30
    27e2:	d1 1d       	adc	r29, r1
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	ed 01       	movw	r28, r26
    27f0:	08 95       	ret

000027f2 <itoa>:
    27f2:	fb 01       	movw	r30, r22
    27f4:	9f 01       	movw	r18, r30
    27f6:	e8 94       	clt
    27f8:	42 30       	cpi	r20, 0x02	; 2
    27fa:	c4 f0       	brlt	.+48     	; 0x282c <itoa+0x3a>
    27fc:	45 32       	cpi	r20, 0x25	; 37
    27fe:	b4 f4       	brge	.+44     	; 0x282c <itoa+0x3a>
    2800:	4a 30       	cpi	r20, 0x0A	; 10
    2802:	29 f4       	brne	.+10     	; 0x280e <itoa+0x1c>
    2804:	97 fb       	bst	r25, 7
    2806:	1e f4       	brtc	.+6      	; 0x280e <itoa+0x1c>
    2808:	90 95       	com	r25
    280a:	81 95       	neg	r24
    280c:	9f 4f       	sbci	r25, 0xFF	; 255
    280e:	64 2f       	mov	r22, r20
    2810:	77 27       	eor	r23, r23
    2812:	0e 94 2a 14 	call	0x2854	; 0x2854 <__udivmodhi4>
    2816:	80 5d       	subi	r24, 0xD0	; 208
    2818:	8a 33       	cpi	r24, 0x3A	; 58
    281a:	0c f0       	brlt	.+2      	; 0x281e <itoa+0x2c>
    281c:	89 5d       	subi	r24, 0xD9	; 217
    281e:	81 93       	st	Z+, r24
    2820:	cb 01       	movw	r24, r22
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	a1 f7       	brne	.-24     	; 0x280e <itoa+0x1c>
    2826:	16 f4       	brtc	.+4      	; 0x282c <itoa+0x3a>
    2828:	5d e2       	ldi	r21, 0x2D	; 45
    282a:	51 93       	st	Z+, r21
    282c:	10 82       	st	Z, r1
    282e:	c9 01       	movw	r24, r18
    2830:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <strrev>

00002834 <strrev>:
    2834:	dc 01       	movw	r26, r24
    2836:	fc 01       	movw	r30, r24
    2838:	67 2f       	mov	r22, r23
    283a:	71 91       	ld	r23, Z+
    283c:	77 23       	and	r23, r23
    283e:	e1 f7       	brne	.-8      	; 0x2838 <strrev+0x4>
    2840:	32 97       	sbiw	r30, 0x02	; 2
    2842:	04 c0       	rjmp	.+8      	; 0x284c <strrev+0x18>
    2844:	7c 91       	ld	r23, X
    2846:	6d 93       	st	X+, r22
    2848:	70 83       	st	Z, r23
    284a:	62 91       	ld	r22, -Z
    284c:	ae 17       	cp	r26, r30
    284e:	bf 07       	cpc	r27, r31
    2850:	c8 f3       	brcs	.-14     	; 0x2844 <strrev+0x10>
    2852:	08 95       	ret

00002854 <__udivmodhi4>:
    2854:	aa 1b       	sub	r26, r26
    2856:	bb 1b       	sub	r27, r27
    2858:	51 e1       	ldi	r21, 0x11	; 17
    285a:	07 c0       	rjmp	.+14     	; 0x286a <__udivmodhi4_ep>

0000285c <__udivmodhi4_loop>:
    285c:	aa 1f       	adc	r26, r26
    285e:	bb 1f       	adc	r27, r27
    2860:	a6 17       	cp	r26, r22
    2862:	b7 07       	cpc	r27, r23
    2864:	10 f0       	brcs	.+4      	; 0x286a <__udivmodhi4_ep>
    2866:	a6 1b       	sub	r26, r22
    2868:	b7 0b       	sbc	r27, r23

0000286a <__udivmodhi4_ep>:
    286a:	88 1f       	adc	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	5a 95       	dec	r21
    2870:	a9 f7       	brne	.-22     	; 0x285c <__udivmodhi4_loop>
    2872:	80 95       	com	r24
    2874:	90 95       	com	r25
    2876:	bc 01       	movw	r22, r24
    2878:	cd 01       	movw	r24, r26
    287a:	08 95       	ret

0000287c <_exit>:
    287c:	f8 94       	cli

0000287e <__stop_program>:
    287e:	ff cf       	rjmp	.-2      	; 0x287e <__stop_program>
