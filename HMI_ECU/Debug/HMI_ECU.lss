
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00002e88  00002f1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000fa  008000fa  00002fb6  2**0
                  ALLOC
  3 .stab         00002ebc  00000000  00000000  00002fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000114c  00000000  00000000  00005e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007120  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000072af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000092f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a3f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b378  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b7ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c048  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 06 	call	0xce4	; 0xce4 <main>
      8a:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ee       	ldi	r26, 0xEF	; 239
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 16 	jmp	0x2d8c	; 0x2d8c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f ee       	ldi	r24, 0xEF	; 239
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 16 	jmp	0x2dc4	; 0x2dc4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f ee       	ldi	r22, 0xEF	; 239
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f2 16 	jmp	0x2de4	; 0x2de4 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <timer1_count>:

/************************************************************************************
 * 								INTERRUPT SERVICE ROUTINE
 ************************************************************************************/
void timer1_count(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	Tempsecond++;
     ca6:	80 91 fa 00 	lds	r24, 0x00FA
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 93 fa 00 	sts	0x00FA, r24
	second++;
     cb0:	80 91 fb 00 	lds	r24, 0x00FB
     cb4:	8f 5f       	subi	r24, 0xFF	; 255
     cb6:	80 93 fb 00 	sts	0x00FB, r24
	if(Tempsecond == 15)
     cba:	80 91 fa 00 	lds	r24, 0x00FA
     cbe:	8f 30       	cpi	r24, 0x0F	; 15
     cc0:	29 f4       	brne	.+10     	; 0xccc <timer1_count+0x2e>
	{
		Tempsecond = 0;
     cc2:	10 92 fa 00 	sts	0x00FA, r1
		f_seconds = 1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	80 93 fc 00 	sts	0x00FC, r24
	}
	if(second == 60)
     ccc:	80 91 fb 00 	lds	r24, 0x00FB
     cd0:	8c 33       	cpi	r24, 0x3C	; 60
     cd2:	29 f4       	brne	.+10     	; 0xcde <timer1_count+0x40>
	{
		second = 0;
     cd4:	10 92 fb 00 	sts	0x00FB, r1
		f_minutes = 1;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	80 93 fd 00 	sts	0x00FD, r24
	}

}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <main>:
/************************************************************************************
 * 								       MAIN CODE
 ************************************************************************************/

int main(void)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	ae 97       	sbiw	r28, 0x2e	; 46
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
	bool CreatingPasswordComplete = FALSE;
     cf8:	19 a2       	std	Y+33, r1	; 0x21
	uint32 password = 0;
     cfa:	1d 8e       	std	Y+29, r1	; 0x1d
     cfc:	1e 8e       	std	Y+30, r1	; 0x1e
     cfe:	1f 8e       	std	Y+31, r1	; 0x1f
     d00:	18 a2       	std	Y+32, r1	; 0x20
	uint32 repassword = 0;
     d02:	19 8e       	std	Y+25, r1	; 0x19
     d04:	1a 8e       	std	Y+26, r1	; 0x1a
     d06:	1b 8e       	std	Y+27, r1	; 0x1b
     d08:	1c 8e       	std	Y+28, r1	; 0x1c
	bool eepromFlag = 0;
     d0a:	1a a2       	std	Y+34, r1	; 0x22
	uint32 eepromPassword = 0;
     d0c:	1d 8a       	std	Y+21, r1	; 0x15
     d0e:	1e 8a       	std	Y+22, r1	; 0x16
     d10:	1f 8a       	std	Y+23, r1	; 0x17
     d12:	18 8e       	std	Y+24, r1	; 0x18
	uint32 recievedPassword = 0;
     d14:	1b a2       	std	Y+35, r1	; 0x23
     d16:	1c a2       	std	Y+36, r1	; 0x24
     d18:	1d a2       	std	Y+37, r1	; 0x25
     d1a:	1e a2       	std	Y+38, r1	; 0x26
	uint8 recievedData = 0;
     d1c:	1c 8a       	std	Y+20, r1	; 0x14
	uint8 doorOption = 0;
     d1e:	1b 8a       	std	Y+19, r1	; 0x13
	bool changePasswordFlag = FALSE;
     d20:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 MismatchCounter = 0;
     d22:	19 8a       	std	Y+17, r1	; 0x11
	bool UpdateEeprom = FALSE;
     d24:	18 8a       	std	Y+16, r1	; 0x10
	bool closeDoorFlag = FALSE;
     d26:	1f 86       	std	Y+15, r1	; 0x0f

	SREG = (1<<7); /* Enable I-Bit */
     d28:	ef e5       	ldi	r30, 0x5F	; 95
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 e8       	ldi	r24, 0x80	; 128
     d2e:	80 83       	st	Z, r24
	timer1Config timer1_config = {CTC_OCR1A , NORMAL , CLK_1024}; /* Timer1 Configurations */
     d30:	ce 01       	movw	r24, r28
     d32:	87 96       	adiw	r24, 0x27	; 39
     d34:	9b a7       	std	Y+43, r25	; 0x2b
     d36:	8a a7       	std	Y+42, r24	; 0x2a
     d38:	e7 ef       	ldi	r30, 0xF7	; 247
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	fd a7       	std	Y+45, r31	; 0x2d
     d3e:	ec a7       	std	Y+44, r30	; 0x2c
     d40:	f3 e0       	ldi	r31, 0x03	; 3
     d42:	fe a7       	std	Y+46, r31	; 0x2e
     d44:	ec a5       	ldd	r30, Y+44	; 0x2c
     d46:	fd a5       	ldd	r31, Y+45	; 0x2d
     d48:	00 80       	ld	r0, Z
     d4a:	8c a5       	ldd	r24, Y+44	; 0x2c
     d4c:	9d a5       	ldd	r25, Y+45	; 0x2d
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	9d a7       	std	Y+45, r25	; 0x2d
     d52:	8c a7       	std	Y+44, r24	; 0x2c
     d54:	ea a5       	ldd	r30, Y+42	; 0x2a
     d56:	fb a5       	ldd	r31, Y+43	; 0x2b
     d58:	00 82       	st	Z, r0
     d5a:	8a a5       	ldd	r24, Y+42	; 0x2a
     d5c:	9b a5       	ldd	r25, Y+43	; 0x2b
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	9b a7       	std	Y+43, r25	; 0x2b
     d62:	8a a7       	std	Y+42, r24	; 0x2a
     d64:	9e a5       	ldd	r25, Y+46	; 0x2e
     d66:	91 50       	subi	r25, 0x01	; 1
     d68:	9e a7       	std	Y+46, r25	; 0x2e
     d6a:	ee a5       	ldd	r30, Y+46	; 0x2e
     d6c:	ee 23       	and	r30, r30
     d6e:	51 f7       	brne	.-44     	; 0xd44 <main+0x60>
	callBackFunctionTimer1(timer1_count); /* Timer 1 Call Back Function */
     d70:	8f e4       	ldi	r24, 0x4F	; 79
     d72:	96 e0       	ldi	r25, 0x06	; 6
     d74:	0e 94 dd 14 	call	0x29ba	; 0x29ba <callBackFunctionTimer1>

	/*Hardware INIT */
	LCD_init();
     d78:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <LCD_init>
	UART_init();
     d7c:	0e 94 ef 14 	call	0x29de	; 0x29de <UART_init>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	aa e7       	ldi	r26, 0x7A	; 122
     d86:	b4 e4       	ldi	r27, 0x44	; 68
     d88:	8b 87       	std	Y+11, r24	; 0x0b
     d8a:	9c 87       	std	Y+12, r25	; 0x0c
     d8c:	ad 87       	std	Y+13, r26	; 0x0d
     d8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d90:	6b 85       	ldd	r22, Y+11	; 0x0b
     d92:	7c 85       	ldd	r23, Y+12	; 0x0c
     d94:	8d 85       	ldd	r24, Y+13	; 0x0d
     d96:	9e 85       	ldd	r25, Y+14	; 0x0e
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	4a e7       	ldi	r20, 0x7A	; 122
     d9e:	53 e4       	ldi	r21, 0x43	; 67
     da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	8f 83       	std	Y+7, r24	; 0x07
     daa:	98 87       	std	Y+8, r25	; 0x08
     dac:	a9 87       	std	Y+9, r26	; 0x09
     dae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     db0:	6f 81       	ldd	r22, Y+7	; 0x07
     db2:	78 85       	ldd	r23, Y+8	; 0x08
     db4:	89 85       	ldd	r24, Y+9	; 0x09
     db6:	9a 85       	ldd	r25, Y+10	; 0x0a
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e8       	ldi	r20, 0x80	; 128
     dbe:	5f e3       	ldi	r21, 0x3F	; 63
     dc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     dc4:	88 23       	and	r24, r24
     dc6:	2c f4       	brge	.+10     	; 0xdd2 <main+0xee>
		__ticks = 1;
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	9e 83       	std	Y+6, r25	; 0x06
     dce:	8d 83       	std	Y+5, r24	; 0x05
     dd0:	3f c0       	rjmp	.+126    	; 0xe50 <main+0x16c>
	else if (__tmp > 65535)
     dd2:	6f 81       	ldd	r22, Y+7	; 0x07
     dd4:	78 85       	ldd	r23, Y+8	; 0x08
     dd6:	89 85       	ldd	r24, Y+9	; 0x09
     dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	3f ef       	ldi	r19, 0xFF	; 255
     dde:	4f e7       	ldi	r20, 0x7F	; 127
     de0:	57 e4       	ldi	r21, 0x47	; 71
     de2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     de6:	18 16       	cp	r1, r24
     de8:	4c f5       	brge	.+82     	; 0xe3c <main+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dea:	6b 85       	ldd	r22, Y+11	; 0x0b
     dec:	7c 85       	ldd	r23, Y+12	; 0x0c
     dee:	8d 85       	ldd	r24, Y+13	; 0x0d
     df0:	9e 85       	ldd	r25, Y+14	; 0x0e
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e2       	ldi	r20, 0x20	; 32
     df8:	51 e4       	ldi	r21, 0x41	; 65
     dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	bc 01       	movw	r22, r24
     e04:	cd 01       	movw	r24, r26
     e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	9e 83       	std	Y+6, r25	; 0x06
     e10:	8d 83       	std	Y+5, r24	; 0x05
     e12:	0f c0       	rjmp	.+30     	; 0xe32 <main+0x14e>
     e14:	89 e1       	ldi	r24, 0x19	; 25
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	9c 83       	std	Y+4, r25	; 0x04
     e1a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	9c 81       	ldd	r25, Y+4	; 0x04
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <main+0x13c>
     e24:	9c 83       	std	Y+4, r25	; 0x04
     e26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	9e 83       	std	Y+6, r25	; 0x06
     e30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	9e 81       	ldd	r25, Y+6	; 0x06
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	69 f7       	brne	.-38     	; 0xe14 <main+0x130>
     e3a:	14 c0       	rjmp	.+40     	; 0xe64 <main+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e3c:	6f 81       	ldd	r22, Y+7	; 0x07
     e3e:	78 85       	ldd	r23, Y+8	; 0x08
     e40:	89 85       	ldd	r24, Y+9	; 0x09
     e42:	9a 85       	ldd	r25, Y+10	; 0x0a
     e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	8d 81       	ldd	r24, Y+5	; 0x05
     e52:	9e 81       	ldd	r25, Y+6	; 0x06
     e54:	9a 83       	std	Y+2, r25	; 0x02
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	9a 81       	ldd	r25, Y+2	; 0x02
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <main+0x178>
     e60:	9a 83       	std	Y+2, r25	; 0x02
     e62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

	/*receive data from EEPROM */

	recieveEepromFlag(&eepromFlag); /* Receive Flag from EEPROM if raised the password is already created */
     e64:	ce 01       	movw	r24, r28
     e66:	82 96       	adiw	r24, 0x22	; 34
     e68:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <recieveEepromFlag>

	eepromPassword = recieveEepromPassword(recievedData , &recievedPassword); /* Receive password from EEPROM to compare with the users entry */
     e6c:	9e 01       	movw	r18, r28
     e6e:	2d 5d       	subi	r18, 0xDD	; 221
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	8c 89       	ldd	r24, Y+20	; 0x14
     e74:	b9 01       	movw	r22, r18
     e76:	0e 94 76 0e 	call	0x1cec	; 0x1cec <recieveEepromPassword>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	8d 8b       	std	Y+21, r24	; 0x15
     e80:	9e 8b       	std	Y+22, r25	; 0x16
     e82:	af 8b       	std	Y+23, r26	; 0x17
     e84:	b8 8f       	std	Y+24, r27	; 0x18
	{
		/************************************************************************************
		 * 					     CREATE OR CHANGE PASSWORD CODE
		 ************************************************************************************/

		if(eepromFlag == FALSE || changePasswordFlag ==TRUE)
     e86:	8a a1       	ldd	r24, Y+34	; 0x22
     e88:	88 23       	and	r24, r24
     e8a:	a9 f1       	breq	.+106    	; 0xef6 <main+0x212>
     e8c:	8a 89       	ldd	r24, Y+18	; 0x12
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a9 f5       	brne	.+106    	; 0xefc <main+0x218>
     e92:	31 c0       	rjmp	.+98     	; 0xef6 <main+0x212>
		{
			while(CreatingPasswordComplete != TRUE) /*leave loop when user created password */
			{
				CreatingPasswordComplete = FALSE;
     e94:	19 a2       	std	Y+33, r1	; 0x21
				changePasswordFlag = FALSE;
     e96:	1a 8a       	std	Y+18, r1	; 0x12

				password = enterPassword(); /* user entered password */
     e98:	0e 94 67 08 	call	0x10ce	; 0x10ce <enterPassword>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	8d 8f       	std	Y+29, r24	; 0x1d
     ea2:	9e 8f       	std	Y+30, r25	; 0x1e
     ea4:	af 8f       	std	Y+31, r26	; 0x1f
     ea6:	b8 a3       	std	Y+32, r27	; 0x20
				repassword = RenterPassword(); /* user Reentered password */
     ea8:	0e 94 a9 09 	call	0x1352	; 0x1352 <RenterPassword>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	89 8f       	std	Y+25, r24	; 0x19
     eb2:	9a 8f       	std	Y+26, r25	; 0x1a
     eb4:	ab 8f       	std	Y+27, r26	; 0x1b
     eb6:	bc 8f       	std	Y+28, r27	; 0x1c

				if(password == repassword)
     eb8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     eba:	3e 8d       	ldd	r19, Y+30	; 0x1e
     ebc:	4f 8d       	ldd	r20, Y+31	; 0x1f
     ebe:	58 a1       	ldd	r21, Y+32	; 0x20
     ec0:	89 8d       	ldd	r24, Y+25	; 0x19
     ec2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ec4:	ab 8d       	ldd	r26, Y+27	; 0x1b
     ec6:	bc 8d       	ldd	r27, Y+28	; 0x1c
     ec8:	28 17       	cp	r18, r24
     eca:	39 07       	cpc	r19, r25
     ecc:	4a 07       	cpc	r20, r26
     ece:	5b 07       	cpc	r21, r27
     ed0:	81 f4       	brne	.+32     	; 0xef2 <main+0x20e>
				{
					UART_sendByte(SEND_PASS_TO_CONTROLLER); /* Ordering (Control MC) to receive the user password */
     ed2:	83 e1       	ldi	r24, 0x13	; 19
     ed4:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_sendByte>

					SendPassword(password); /* sending password function */
     ed8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eda:	9e 8d       	ldd	r25, Y+30	; 0x1e
     edc:	af 8d       	ldd	r26, Y+31	; 0x1f
     ede:	b8 a1       	ldd	r27, Y+32	; 0x20
     ee0:	bc 01       	movw	r22, r24
     ee2:	cd 01       	movw	r24, r26
     ee4:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <SendPassword>

					CreatingPasswordComplete = TRUE; /* leave loop */
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	89 a3       	std	Y+33, r24	; 0x21

					UpdateEeprom = TRUE; /* update EEPROM with the new password */
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	88 8b       	std	Y+16, r24	; 0x10
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <main+0x212>
				}

				else
				{
					Mismatch(); /* if user reentered password did not match print Mismatch on LCD */
     ef2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Mismatch>
		 * 					     CREATE OR CHANGE PASSWORD CODE
		 ************************************************************************************/

		if(eepromFlag == FALSE || changePasswordFlag ==TRUE)
		{
			while(CreatingPasswordComplete != TRUE) /*leave loop when user created password */
     ef6:	89 a1       	ldd	r24, Y+33	; 0x21
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	61 f6       	brne	.-104    	; 0xe94 <main+0x1b0>
					Mismatch(); /* if user reentered password did not match print Mismatch on LCD */
				}

			}
		}
		if(UpdateEeprom == TRUE) /* if creating password is successful , Update EEPROM */
     efc:	88 89       	ldd	r24, Y+16	; 0x10
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	29 f4       	brne	.+10     	; 0xf0c <main+0x228>
		{
			UART_sendByte(UPDATE_EEPROM);
     f02:	87 e1       	ldi	r24, 0x17	; 23
     f04:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_sendByte>
			WDT_ON(); /* reset (HMI MC) to receive UPDATED EEPROM PASSWORD */
     f08:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <WDT_ON>
		}

		if(eepromFlag == TRUE) /* Go to door options directly if the EEPROM flag was raised */
     f0c:	8a a1       	ldd	r24, Y+34	; 0x22
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	09 f0       	breq	.+2      	; 0xf14 <main+0x230>
     f12:	b9 cf       	rjmp	.-142    	; 0xe86 <main+0x1a2>
		{
			doorOption = doorOptions();
     f14:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <doorOptions>
     f18:	8b 8b       	std	Y+19, r24	; 0x13

			/************************************************************************************
			 * 					        MOTOR CONTROL CODE
			 ************************************************************************************/
			if(doorOption == '*')
     f1a:	8b 89       	ldd	r24, Y+19	; 0x13
     f1c:	8a 32       	cpi	r24, 0x2A	; 42
     f1e:	09 f0       	breq	.+2      	; 0xf22 <main+0x23e>
     f20:	d1 c0       	rjmp	.+418    	; 0x10c4 <main+0x3e0>
			{
				password = enterPassword(); /* Entering  Password to compare with the EEPROM PASSWORD */
     f22:	0e 94 67 08 	call	0x10ce	; 0x10ce <enterPassword>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	8d 8f       	std	Y+29, r24	; 0x1d
     f2c:	9e 8f       	std	Y+30, r25	; 0x1e
     f2e:	af 8f       	std	Y+31, r26	; 0x1f
     f30:	b8 a3       	std	Y+32, r27	; 0x20

				if(password == eepromPassword)
     f32:	2d 8d       	ldd	r18, Y+29	; 0x1d
     f34:	3e 8d       	ldd	r19, Y+30	; 0x1e
     f36:	4f 8d       	ldd	r20, Y+31	; 0x1f
     f38:	58 a1       	ldd	r21, Y+32	; 0x20
     f3a:	8d 89       	ldd	r24, Y+21	; 0x15
     f3c:	9e 89       	ldd	r25, Y+22	; 0x16
     f3e:	af 89       	ldd	r26, Y+23	; 0x17
     f40:	b8 8d       	ldd	r27, Y+24	; 0x18
     f42:	28 17       	cp	r18, r24
     f44:	39 07       	cpc	r19, r25
     f46:	4a 07       	cpc	r20, r26
     f48:	5b 07       	cpc	r21, r27
     f4a:	09 f0       	breq	.+2      	; 0xf4e <main+0x26a>
     f4c:	53 c0       	rjmp	.+166    	; 0xff4 <main+0x310>
				{
					MismatchCounter = 0; /*reset mismatch counter if user entered the right password */
     f4e:	19 8a       	std	Y+17, r1	; 0x11

					UART_sendByte(OPEN_DOOR); /* sending open door order to (control MC) to initiate motor rotation ACW */
     f50:	84 e1       	ldi	r24, 0x14	; 20
     f52:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_sendByte>
					LCD_clearScreen();
     f56:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_clearScreen>
					timer1_init(&timer1_config , 0 , 7209); /* initiate timer1 to start clock*/
     f5a:	ce 01       	movw	r24, r28
     f5c:	87 96       	adiw	r24, 0x27	; 39
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	49 e2       	ldi	r20, 0x29	; 41
     f64:	5c e1       	ldi	r21, 0x1C	; 28
     f66:	0e 94 52 14 	call	0x28a4	; 0x28a4 <timer1_init>
     f6a:	0e c0       	rjmp	.+28     	; 0xf88 <main+0x2a4>

					while(f_seconds != 1) /* print message for 15 seconds */
					{

						LCD_displayStringRowColumn(0,0,"DOOR IS ");
     f6c:	20 e6       	ldi	r18, 0x60	; 96
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	a9 01       	movw	r20, r18
     f76:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_displayStringRowColumn>
						LCD_displayStringRowColumn(1,0,"UNLOCKING");
     f7a:	29 e6       	ldi	r18, 0x69	; 105
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	60 e0       	ldi	r22, 0x00	; 0
     f82:	a9 01       	movw	r20, r18
     f84:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_displayStringRowColumn>

					UART_sendByte(OPEN_DOOR); /* sending open door order to (control MC) to initiate motor rotation ACW */
					LCD_clearScreen();
					timer1_init(&timer1_config , 0 , 7209); /* initiate timer1 to start clock*/

					while(f_seconds != 1) /* print message for 15 seconds */
     f88:	80 91 fc 00 	lds	r24, 0x00FC
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	71 f7       	brne	.-36     	; 0xf6c <main+0x288>

						LCD_displayStringRowColumn(0,0,"DOOR IS ");
						LCD_displayStringRowColumn(1,0,"UNLOCKING");
					}

					f_seconds = 0;
     f90:	10 92 fc 00 	sts	0x00FC, r1

					timer1StopClock(); /* stop timer1 clock */
     f94:	0e 94 cf 14 	call	0x299e	; 0x299e <timer1StopClock>

					closeDoorFlag = TRUE;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	8f 87       	std	Y+15, r24	; 0x0f
				/*********************************************************************/

					/* Closing door Code */


					if(closeDoorFlag == TRUE)
     f9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <main+0x2c0>
     fa2:	71 cf       	rjmp	.-286    	; 0xe86 <main+0x1a2>
					{
						closeDoorFlag = FALSE;
     fa4:	1f 86       	std	Y+15, r1	; 0x0f
						closeDoor();
     fa6:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <closeDoor>
						UART_sendByte(CLOSE_DOOR);
     faa:	85 e1       	ldi	r24, 0x15	; 21
     fac:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_sendByte>
						LCD_clearScreen();
     fb0:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_clearScreen>
						timer1_init(&timer1_config , 0 , 7209);
     fb4:	ce 01       	movw	r24, r28
     fb6:	87 96       	adiw	r24, 0x27	; 39
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	49 e2       	ldi	r20, 0x29	; 41
     fbe:	5c e1       	ldi	r21, 0x1C	; 28
     fc0:	0e 94 52 14 	call	0x28a4	; 0x28a4 <timer1_init>
     fc4:	0e c0       	rjmp	.+28     	; 0xfe2 <main+0x2fe>
						while(f_seconds != 1)
						{

							LCD_displayStringRowColumn(0,0,"DOOR IS ");
     fc6:	20 e6       	ldi	r18, 0x60	; 96
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_displayStringRowColumn>
							LCD_displayStringRowColumn(1,0,"LOCKING");
     fd4:	23 e7       	ldi	r18, 0x73	; 115
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	a9 01       	movw	r20, r18
     fde:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_displayStringRowColumn>
						closeDoorFlag = FALSE;
						closeDoor();
						UART_sendByte(CLOSE_DOOR);
						LCD_clearScreen();
						timer1_init(&timer1_config , 0 , 7209);
						while(f_seconds != 1)
     fe2:	80 91 fc 00 	lds	r24, 0x00FC
     fe6:	81 30       	cpi	r24, 0x01	; 1
     fe8:	71 f7       	brne	.-36     	; 0xfc6 <main+0x2e2>

							LCD_displayStringRowColumn(0,0,"DOOR IS ");
							LCD_displayStringRowColumn(1,0,"LOCKING");
						}

						f_seconds = 0;
     fea:	10 92 fc 00 	sts	0x00FC, r1
						timer1StopClock();
     fee:	0e 94 cf 14 	call	0x299e	; 0x299e <timer1StopClock>
     ff2:	49 cf       	rjmp	.-366    	; 0xe86 <main+0x1a2>
					}
				/**********************************************************************/
				}
				else
				{
					MismatchCounter++; /* if user entered incorrect password 3 times initiate BUZZER for 1 minute */
     ff4:	89 89       	ldd	r24, Y+17	; 0x11
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	89 8b       	std	Y+17, r24	; 0x11
					if(MismatchCounter == 4)
     ffa:	89 89       	ldd	r24, Y+17	; 0x11
     ffc:	84 30       	cpi	r24, 0x04	; 4
     ffe:	f9 f4       	brne	.+62     	; 0x103e <main+0x35a>
					{
						LCD_clearScreen();
    1000:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_clearScreen>
						MismatchCounter = 0;
    1004:	19 8a       	std	Y+17, r1	; 0x11
						UART_sendByte(FIRE_BUZZER); /* sending orders to (Control MC) to initiate buzzer */
    1006:	86 e1       	ldi	r24, 0x16	; 22
    1008:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_sendByte>
						timer1_init(&timer1_config , 0 , 7209);
    100c:	ce 01       	movw	r24, r28
    100e:	87 96       	adiw	r24, 0x27	; 39
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	49 e2       	ldi	r20, 0x29	; 41
    1016:	5c e1       	ldi	r21, 0x1C	; 28
    1018:	0e 94 52 14 	call	0x28a4	; 0x28a4 <timer1_init>
    101c:	07 c0       	rjmp	.+14     	; 0x102c <main+0x348>
						while(f_minutes != 1)
						{
							LCD_displayStringRowColumn(0,0,"THIEF!!!!!!!!");
    101e:	2b e7       	ldi	r18, 0x7B	; 123
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	a9 01       	movw	r20, r18
    1028:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_displayStringRowColumn>
					{
						LCD_clearScreen();
						MismatchCounter = 0;
						UART_sendByte(FIRE_BUZZER); /* sending orders to (Control MC) to initiate buzzer */
						timer1_init(&timer1_config , 0 , 7209);
						while(f_minutes != 1)
    102c:	80 91 fd 00 	lds	r24, 0x00FD
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	a9 f7       	brne	.-22     	; 0x101e <main+0x33a>
						{
							LCD_displayStringRowColumn(0,0,"THIEF!!!!!!!!");
						}
						f_minutes = 0;
    1034:	10 92 fd 00 	sts	0x00FD, r1
						timer1StopClock();
    1038:	0e 94 cf 14 	call	0x299e	; 0x299e <timer1StopClock>
    103c:	24 cf       	rjmp	.-440    	; 0xe86 <main+0x1a2>

					}
					else
					{
						Mismatch();
    103e:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Mismatch>
    1042:	21 cf       	rjmp	.-446    	; 0xe86 <main+0x1a2>
			 ************************************************************************************/
			else
			{
				while(changePasswordFlag != TRUE)
				{
					password = changePassword(); /* user entering old password to be able to have new one */
    1044:	0e 94 99 0b 	call	0x1732	; 0x1732 <changePassword>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	8d 8f       	std	Y+29, r24	; 0x1d
    104e:	9e 8f       	std	Y+30, r25	; 0x1e
    1050:	af 8f       	std	Y+31, r26	; 0x1f
    1052:	b8 a3       	std	Y+32, r27	; 0x20
					if(password == eepromPassword)
    1054:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1056:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1058:	4f 8d       	ldd	r20, Y+31	; 0x1f
    105a:	58 a1       	ldd	r21, Y+32	; 0x20
    105c:	8d 89       	ldd	r24, Y+21	; 0x15
    105e:	9e 89       	ldd	r25, Y+22	; 0x16
    1060:	af 89       	ldd	r26, Y+23	; 0x17
    1062:	b8 8d       	ldd	r27, Y+24	; 0x18
    1064:	28 17       	cp	r18, r24
    1066:	39 07       	cpc	r19, r25
    1068:	4a 07       	cpc	r20, r26
    106a:	5b 07       	cpc	r21, r27
    106c:	21 f4       	brne	.+8      	; 0x1076 <main+0x392>
					{
						MismatchCounter = 0; /* reset mismatch of user entered correct password */
    106e:	19 8a       	std	Y+17, r1	; 0x11
						changePasswordFlag = TRUE; /* leave loop and go to create new password loop */
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	8a 8b       	std	Y+18, r24	; 0x12
    1074:	27 c0       	rjmp	.+78     	; 0x10c4 <main+0x3e0>
					}
					else
					{
						 /* if user entered incorrect password 3 times initiate BUZZER for 1 minute */

						MismatchCounter++;
    1076:	89 89       	ldd	r24, Y+17	; 0x11
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	89 8b       	std	Y+17, r24	; 0x11
						if(MismatchCounter == 4)
    107c:	89 89       	ldd	r24, Y+17	; 0x11
    107e:	84 30       	cpi	r24, 0x04	; 4
    1080:	f9 f4       	brne	.+62     	; 0x10c0 <main+0x3dc>
						{
							LCD_clearScreen();
    1082:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_clearScreen>
							MismatchCounter = 0;
    1086:	19 8a       	std	Y+17, r1	; 0x11
							UART_sendByte(FIRE_BUZZER);
    1088:	86 e1       	ldi	r24, 0x16	; 22
    108a:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_sendByte>
							timer1_init(&timer1_config , 0 , 7209);
    108e:	ce 01       	movw	r24, r28
    1090:	87 96       	adiw	r24, 0x27	; 39
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	49 e2       	ldi	r20, 0x29	; 41
    1098:	5c e1       	ldi	r21, 0x1C	; 28
    109a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <timer1_init>
    109e:	07 c0       	rjmp	.+14     	; 0x10ae <main+0x3ca>
							while(f_minutes != 1)
							{
								LCD_displayStringRowColumn(0,0,"THIEF!!!!!!!!");
    10a0:	2b e7       	ldi	r18, 0x7B	; 123
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	a9 01       	movw	r20, r18
    10aa:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_displayStringRowColumn>
						{
							LCD_clearScreen();
							MismatchCounter = 0;
							UART_sendByte(FIRE_BUZZER);
							timer1_init(&timer1_config , 0 , 7209);
							while(f_minutes != 1)
    10ae:	80 91 fd 00 	lds	r24, 0x00FD
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	a9 f7       	brne	.-22     	; 0x10a0 <main+0x3bc>
							{
								LCD_displayStringRowColumn(0,0,"THIEF!!!!!!!!");
							}
							f_minutes = 0;
    10b6:	10 92 fd 00 	sts	0x00FD, r1
							timer1StopClock();
    10ba:	0e 94 cf 14 	call	0x299e	; 0x299e <timer1StopClock>
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <main+0x3e0>

						}
						else
						{
							Mismatch();
    10c0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <Mismatch>
			/************************************************************************************
			 * 					       CHANGING PASSWORD CODE
			 ************************************************************************************/
			else
			{
				while(changePasswordFlag != TRUE)
    10c4:	8a 89       	ldd	r24, Y+18	; 0x12
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	09 f0       	breq	.+2      	; 0x10cc <main+0x3e8>
    10ca:	bc cf       	rjmp	.-136    	; 0x1044 <main+0x360>
    10cc:	dc ce       	rjmp	.-584    	; 0xe86 <main+0x1a2>

000010ce <enterPassword>:
 *  Created on: Jan 29, 2020
 *      Author: Basel Ashraf
 */
#include "door_lock_HMI.h"
uint32 enterPassword(void)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	a2 97       	sbiw	r28, 0x22	; 34
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
	uint32 password = 0;
    10e2:	1f 8e       	std	Y+31, r1	; 0x1f
    10e4:	18 a2       	std	Y+32, r1	; 0x20
    10e6:	19 a2       	std	Y+33, r1	; 0x21
    10e8:	1a a2       	std	Y+34, r1	; 0x22
	uint8 counter=0;
    10ea:	1e 8e       	std	Y+30, r1	; 0x1e
	LCD_clearScreen();
    10ec:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"enter password");
    10f0:	29 e8       	ldi	r18, 0x89	; 137
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	a9 01       	movw	r20, r18
    10fa:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	60 e0       	ldi	r22, 0x00	; 0
    1102:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_goToRowColumn>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	af ea       	ldi	r26, 0xAF	; 175
    110c:	b4 e4       	ldi	r27, 0x44	; 68
    110e:	89 8f       	std	Y+25, r24	; 0x19
    1110:	9a 8f       	std	Y+26, r25	; 0x1a
    1112:	ab 8f       	std	Y+27, r26	; 0x1b
    1114:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1116:	69 8d       	ldd	r22, Y+25	; 0x19
    1118:	7a 8d       	ldd	r23, Y+26	; 0x1a
    111a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    111c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4a e7       	ldi	r20, 0x7A	; 122
    1124:	53 e4       	ldi	r21, 0x43	; 67
    1126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8d 8b       	std	Y+21, r24	; 0x15
    1130:	9e 8b       	std	Y+22, r25	; 0x16
    1132:	af 8b       	std	Y+23, r26	; 0x17
    1134:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1136:	6d 89       	ldd	r22, Y+21	; 0x15
    1138:	7e 89       	ldd	r23, Y+22	; 0x16
    113a:	8f 89       	ldd	r24, Y+23	; 0x17
    113c:	98 8d       	ldd	r25, Y+24	; 0x18
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	5f e3       	ldi	r21, 0x3F	; 63
    1146:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    114a:	88 23       	and	r24, r24
    114c:	2c f4       	brge	.+10     	; 0x1158 <enterPassword+0x8a>
		__ticks = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9c 8b       	std	Y+20, r25	; 0x14
    1154:	8b 8b       	std	Y+19, r24	; 0x13
    1156:	3f c0       	rjmp	.+126    	; 0x11d6 <enterPassword+0x108>
	else if (__tmp > 65535)
    1158:	6d 89       	ldd	r22, Y+21	; 0x15
    115a:	7e 89       	ldd	r23, Y+22	; 0x16
    115c:	8f 89       	ldd	r24, Y+23	; 0x17
    115e:	98 8d       	ldd	r25, Y+24	; 0x18
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	4f e7       	ldi	r20, 0x7F	; 127
    1166:	57 e4       	ldi	r21, 0x47	; 71
    1168:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    116c:	18 16       	cp	r1, r24
    116e:	4c f5       	brge	.+82     	; 0x11c2 <enterPassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1170:	69 8d       	ldd	r22, Y+25	; 0x19
    1172:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1174:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1176:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e2       	ldi	r20, 0x20	; 32
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9c 8b       	std	Y+20, r25	; 0x14
    1196:	8b 8b       	std	Y+19, r24	; 0x13
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <enterPassword+0xea>
    119a:	89 e1       	ldi	r24, 0x19	; 25
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9a 8b       	std	Y+18, r25	; 0x12
    11a0:	89 8b       	std	Y+17, r24	; 0x11
    11a2:	89 89       	ldd	r24, Y+17	; 0x11
    11a4:	9a 89       	ldd	r25, Y+18	; 0x12
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <enterPassword+0xd8>
    11aa:	9a 8b       	std	Y+18, r25	; 0x12
    11ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ae:	8b 89       	ldd	r24, Y+19	; 0x13
    11b0:	9c 89       	ldd	r25, Y+20	; 0x14
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	9c 8b       	std	Y+20, r25	; 0x14
    11b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	8b 89       	ldd	r24, Y+19	; 0x13
    11ba:	9c 89       	ldd	r25, Y+20	; 0x14
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	69 f7       	brne	.-38     	; 0x119a <enterPassword+0xcc>
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <enterPassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c2:	6d 89       	ldd	r22, Y+21	; 0x15
    11c4:	7e 89       	ldd	r23, Y+22	; 0x16
    11c6:	8f 89       	ldd	r24, Y+23	; 0x17
    11c8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9c 8b       	std	Y+20, r25	; 0x14
    11d4:	8b 8b       	std	Y+19, r24	; 0x13
    11d6:	8b 89       	ldd	r24, Y+19	; 0x13
    11d8:	9c 89       	ldd	r25, Y+20	; 0x14
    11da:	98 8b       	std	Y+16, r25	; 0x10
    11dc:	8f 87       	std	Y+15, r24	; 0x0f
    11de:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e0:	98 89       	ldd	r25, Y+16	; 0x10
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <enterPassword+0x114>
    11e6:	98 8b       	std	Y+16, r25	; 0x10
    11e8:	8f 87       	std	Y+15, r24	; 0x0f
	while(1)
	{

		_delay_ms(1400); /* delay for slow down input from kaypad */
		uint8 buttonPressed = KeyPad_getPressedKey(); /* get key from user */
    11ea:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <KeyPad_getPressedKey>
    11ee:	8d 8f       	std	Y+29, r24	; 0x1d
		if(buttonPressed >= 0 && buttonPressed <= 9)
    11f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11f2:	8a 30       	cpi	r24, 0x0A	; 10
    11f4:	08 f5       	brcc	.+66     	; 0x1238 <enterPassword+0x16a>
		{
			password = (password * 10) + buttonPressed; /* form a 4 byte value */
    11f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11f8:	98 a1       	ldd	r25, Y+32	; 0x20
    11fa:	a9 a1       	ldd	r26, Y+33	; 0x21
    11fc:	ba a1       	ldd	r27, Y+34	; 0x22
    11fe:	2a e0       	ldi	r18, 0x0A	; 10
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	50 e0       	ldi	r21, 0x00	; 0
    1206:	bc 01       	movw	r22, r24
    1208:	cd 01       	movw	r24, r26
    120a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__mulsi3>
    120e:	9b 01       	movw	r18, r22
    1210:	ac 01       	movw	r20, r24
    1212:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a0 e0       	ldi	r26, 0x00	; 0
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	82 0f       	add	r24, r18
    121e:	93 1f       	adc	r25, r19
    1220:	a4 1f       	adc	r26, r20
    1222:	b5 1f       	adc	r27, r21
    1224:	8f 8f       	std	Y+31, r24	; 0x1f
    1226:	98 a3       	std	Y+32, r25	; 0x20
    1228:	a9 a3       	std	Y+33, r26	; 0x21
    122a:	ba a3       	std	Y+34, r27	; 0x22

			counter++; /* counter for limitition the input Password */
    122c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	8e 8f       	std	Y+30, r24	; 0x1e

			LCD_displayCharacter('*'); /* print '*' instead of the real number */
    1232:	8a e2       	ldi	r24, 0x2A	; 42
    1234:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_displayCharacter>


		}
		if(counter == 5)
    1238:	8e 8d       	ldd	r24, Y+30	; 0x1e
    123a:	85 30       	cpi	r24, 0x05	; 5
    123c:	29 f4       	brne	.+10     	; 0x1248 <enterPassword+0x17a>
		{
			do
			{
				/* stop the user from entering any more input and waiting to press enter to leave loop */
			}
			while(KeyPad_getPressedKey() != '#');
    123e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <KeyPad_getPressedKey>
    1242:	83 32       	cpi	r24, 0x23	; 35
    1244:	e1 f7       	brne	.-8      	; 0x123e <enterPassword+0x170>
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <enterPassword+0x182>
			break;
		}

		if(buttonPressed == '#')
    1248:	8d 8d       	ldd	r24, Y+29	; 0x1d
    124a:	83 32       	cpi	r24, 0x23	; 35
    124c:	09 f0       	breq	.+2      	; 0x1250 <enterPassword+0x182>
    124e:	5b cf       	rjmp	.-330    	; 0x1106 <enterPassword+0x38>
		{
			break; /* leave loop when entering enter on keyboard */
		}

	}
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	a8 ec       	ldi	r26, 0xC8	; 200
    1256:	b2 e4       	ldi	r27, 0x42	; 66
    1258:	8b 87       	std	Y+11, r24	; 0x0b
    125a:	9c 87       	std	Y+12, r25	; 0x0c
    125c:	ad 87       	std	Y+13, r26	; 0x0d
    125e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1260:	6b 85       	ldd	r22, Y+11	; 0x0b
    1262:	7c 85       	ldd	r23, Y+12	; 0x0c
    1264:	8d 85       	ldd	r24, Y+13	; 0x0d
    1266:	9e 85       	ldd	r25, Y+14	; 0x0e
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	4a e7       	ldi	r20, 0x7A	; 122
    126e:	53 e4       	ldi	r21, 0x43	; 67
    1270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	8f 83       	std	Y+7, r24	; 0x07
    127a:	98 87       	std	Y+8, r25	; 0x08
    127c:	a9 87       	std	Y+9, r26	; 0x09
    127e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1280:	6f 81       	ldd	r22, Y+7	; 0x07
    1282:	78 85       	ldd	r23, Y+8	; 0x08
    1284:	89 85       	ldd	r24, Y+9	; 0x09
    1286:	9a 85       	ldd	r25, Y+10	; 0x0a
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e8       	ldi	r20, 0x80	; 128
    128e:	5f e3       	ldi	r21, 0x3F	; 63
    1290:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1294:	88 23       	and	r24, r24
    1296:	2c f4       	brge	.+10     	; 0x12a2 <enterPassword+0x1d4>
		__ticks = 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9e 83       	std	Y+6, r25	; 0x06
    129e:	8d 83       	std	Y+5, r24	; 0x05
    12a0:	3f c0       	rjmp	.+126    	; 0x1320 <enterPassword+0x252>
	else if (__tmp > 65535)
    12a2:	6f 81       	ldd	r22, Y+7	; 0x07
    12a4:	78 85       	ldd	r23, Y+8	; 0x08
    12a6:	89 85       	ldd	r24, Y+9	; 0x09
    12a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	3f ef       	ldi	r19, 0xFF	; 255
    12ae:	4f e7       	ldi	r20, 0x7F	; 127
    12b0:	57 e4       	ldi	r21, 0x47	; 71
    12b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12b6:	18 16       	cp	r1, r24
    12b8:	4c f5       	brge	.+82     	; 0x130c <enterPassword+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    12bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    12be:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9e 83       	std	Y+6, r25	; 0x06
    12e0:	8d 83       	std	Y+5, r24	; 0x05
    12e2:	0f c0       	rjmp	.+30     	; 0x1302 <enterPassword+0x234>
    12e4:	89 e1       	ldi	r24, 0x19	; 25
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9c 83       	std	Y+4, r25	; 0x04
    12ea:	8b 83       	std	Y+3, r24	; 0x03
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <enterPassword+0x222>
    12f4:	9c 83       	std	Y+4, r25	; 0x04
    12f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f8:	8d 81       	ldd	r24, Y+5	; 0x05
    12fa:	9e 81       	ldd	r25, Y+6	; 0x06
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	69 f7       	brne	.-38     	; 0x12e4 <enterPassword+0x216>
    130a:	14 c0       	rjmp	.+40     	; 0x1334 <enterPassword+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130c:	6f 81       	ldd	r22, Y+7	; 0x07
    130e:	78 85       	ldd	r23, Y+8	; 0x08
    1310:	89 85       	ldd	r24, Y+9	; 0x09
    1312:	9a 85       	ldd	r25, Y+10	; 0x0a
    1314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	9e 83       	std	Y+6, r25	; 0x06
    131e:	8d 83       	std	Y+5, r24	; 0x05
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <enterPassword+0x25e>
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	return password; /* return the entered value from user */
    1334:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1336:	98 a1       	ldd	r25, Y+32	; 0x20
    1338:	a9 a1       	ldd	r26, Y+33	; 0x21
    133a:	ba a1       	ldd	r27, Y+34	; 0x22

}
    133c:	bc 01       	movw	r22, r24
    133e:	cd 01       	movw	r24, r26
    1340:	a2 96       	adiw	r28, 0x22	; 34
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <RenterPassword>:

/* enter password again for confirmation */
uint32 RenterPassword(void)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	a2 97       	sbiw	r28, 0x22	; 34
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
	uint32 password = 0;
    1366:	1f 8e       	std	Y+31, r1	; 0x1f
    1368:	18 a2       	std	Y+32, r1	; 0x20
    136a:	19 a2       	std	Y+33, r1	; 0x21
    136c:	1a a2       	std	Y+34, r1	; 0x22
	uint8 counter=0;
    136e:	1e 8e       	std	Y+30, r1	; 0x1e
	LCD_clearScreen();
    1370:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Renter password");
    1374:	28 e9       	ldi	r18, 0x98	; 152
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	a9 01       	movw	r20, r18
    137e:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_goToRowColumn>
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	af ea       	ldi	r26, 0xAF	; 175
    1390:	b4 e4       	ldi	r27, 0x44	; 68
    1392:	89 8f       	std	Y+25, r24	; 0x19
    1394:	9a 8f       	std	Y+26, r25	; 0x1a
    1396:	ab 8f       	std	Y+27, r26	; 0x1b
    1398:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139a:	69 8d       	ldd	r22, Y+25	; 0x19
    139c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    139e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	4a e7       	ldi	r20, 0x7A	; 122
    13a8:	53 e4       	ldi	r21, 0x43	; 67
    13aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	8d 8b       	std	Y+21, r24	; 0x15
    13b4:	9e 8b       	std	Y+22, r25	; 0x16
    13b6:	af 8b       	std	Y+23, r26	; 0x17
    13b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13ba:	6d 89       	ldd	r22, Y+21	; 0x15
    13bc:	7e 89       	ldd	r23, Y+22	; 0x16
    13be:	8f 89       	ldd	r24, Y+23	; 0x17
    13c0:	98 8d       	ldd	r25, Y+24	; 0x18
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e8       	ldi	r20, 0x80	; 128
    13c8:	5f e3       	ldi	r21, 0x3F	; 63
    13ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13ce:	88 23       	and	r24, r24
    13d0:	2c f4       	brge	.+10     	; 0x13dc <RenterPassword+0x8a>
		__ticks = 1;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 8b       	std	Y+20, r25	; 0x14
    13d8:	8b 8b       	std	Y+19, r24	; 0x13
    13da:	3f c0       	rjmp	.+126    	; 0x145a <RenterPassword+0x108>
	else if (__tmp > 65535)
    13dc:	6d 89       	ldd	r22, Y+21	; 0x15
    13de:	7e 89       	ldd	r23, Y+22	; 0x16
    13e0:	8f 89       	ldd	r24, Y+23	; 0x17
    13e2:	98 8d       	ldd	r25, Y+24	; 0x18
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	3f ef       	ldi	r19, 0xFF	; 255
    13e8:	4f e7       	ldi	r20, 0x7F	; 127
    13ea:	57 e4       	ldi	r21, 0x47	; 71
    13ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13f0:	18 16       	cp	r1, r24
    13f2:	4c f5       	brge	.+82     	; 0x1446 <RenterPassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f4:	69 8d       	ldd	r22, Y+25	; 0x19
    13f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e2       	ldi	r20, 0x20	; 32
    1402:	51 e4       	ldi	r21, 0x41	; 65
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	bc 01       	movw	r22, r24
    140e:	cd 01       	movw	r24, r26
    1410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9c 8b       	std	Y+20, r25	; 0x14
    141a:	8b 8b       	std	Y+19, r24	; 0x13
    141c:	0f c0       	rjmp	.+30     	; 0x143c <RenterPassword+0xea>
    141e:	89 e1       	ldi	r24, 0x19	; 25
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	9a 8b       	std	Y+18, r25	; 0x12
    1424:	89 8b       	std	Y+17, r24	; 0x11
    1426:	89 89       	ldd	r24, Y+17	; 0x11
    1428:	9a 89       	ldd	r25, Y+18	; 0x12
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <RenterPassword+0xd8>
    142e:	9a 8b       	std	Y+18, r25	; 0x12
    1430:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1432:	8b 89       	ldd	r24, Y+19	; 0x13
    1434:	9c 89       	ldd	r25, Y+20	; 0x14
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	9c 8b       	std	Y+20, r25	; 0x14
    143a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    143c:	8b 89       	ldd	r24, Y+19	; 0x13
    143e:	9c 89       	ldd	r25, Y+20	; 0x14
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	69 f7       	brne	.-38     	; 0x141e <RenterPassword+0xcc>
    1444:	14 c0       	rjmp	.+40     	; 0x146e <RenterPassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1446:	6d 89       	ldd	r22, Y+21	; 0x15
    1448:	7e 89       	ldd	r23, Y+22	; 0x16
    144a:	8f 89       	ldd	r24, Y+23	; 0x17
    144c:	98 8d       	ldd	r25, Y+24	; 0x18
    144e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	9c 8b       	std	Y+20, r25	; 0x14
    1458:	8b 8b       	std	Y+19, r24	; 0x13
    145a:	8b 89       	ldd	r24, Y+19	; 0x13
    145c:	9c 89       	ldd	r25, Y+20	; 0x14
    145e:	98 8b       	std	Y+16, r25	; 0x10
    1460:	8f 87       	std	Y+15, r24	; 0x0f
    1462:	8f 85       	ldd	r24, Y+15	; 0x0f
    1464:	98 89       	ldd	r25, Y+16	; 0x10
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <RenterPassword+0x114>
    146a:	98 8b       	std	Y+16, r25	; 0x10
    146c:	8f 87       	std	Y+15, r24	; 0x0f
	while(1)
	{
		_delay_ms(1400);
		uint8 buttonPressed = KeyPad_getPressedKey();
    146e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <KeyPad_getPressedKey>
    1472:	8d 8f       	std	Y+29, r24	; 0x1d
		if(buttonPressed >= 0 && buttonPressed <= 9)
    1474:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1476:	8a 30       	cpi	r24, 0x0A	; 10
    1478:	08 f5       	brcc	.+66     	; 0x14bc <RenterPassword+0x16a>
		{
			password = (password * 10) + buttonPressed;
    147a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    147c:	98 a1       	ldd	r25, Y+32	; 0x20
    147e:	a9 a1       	ldd	r26, Y+33	; 0x21
    1480:	ba a1       	ldd	r27, Y+34	; 0x22
    1482:	2a e0       	ldi	r18, 0x0A	; 10
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	bc 01       	movw	r22, r24
    148c:	cd 01       	movw	r24, r26
    148e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__mulsi3>
    1492:	9b 01       	movw	r18, r22
    1494:	ac 01       	movw	r20, r24
    1496:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1498:	88 2f       	mov	r24, r24
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	a0 e0       	ldi	r26, 0x00	; 0
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	82 0f       	add	r24, r18
    14a2:	93 1f       	adc	r25, r19
    14a4:	a4 1f       	adc	r26, r20
    14a6:	b5 1f       	adc	r27, r21
    14a8:	8f 8f       	std	Y+31, r24	; 0x1f
    14aa:	98 a3       	std	Y+32, r25	; 0x20
    14ac:	a9 a3       	std	Y+33, r26	; 0x21
    14ae:	ba a3       	std	Y+34, r27	; 0x22
			counter++;
    14b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14b2:	8f 5f       	subi	r24, 0xFF	; 255
    14b4:	8e 8f       	std	Y+30, r24	; 0x1e
			LCD_displayCharacter('*');
    14b6:	8a e2       	ldi	r24, 0x2A	; 42
    14b8:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_displayCharacter>


		}
		if(counter == 5)
    14bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14be:	85 30       	cpi	r24, 0x05	; 5
    14c0:	29 f4       	brne	.+10     	; 0x14cc <RenterPassword+0x17a>
		{
			do
			{

			}
			while(KeyPad_getPressedKey() != '#');
    14c2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <KeyPad_getPressedKey>
    14c6:	83 32       	cpi	r24, 0x23	; 35
    14c8:	e1 f7       	brne	.-8      	; 0x14c2 <RenterPassword+0x170>
    14ca:	04 c0       	rjmp	.+8      	; 0x14d4 <RenterPassword+0x182>
			break;
		}

		if(buttonPressed == '#')
    14cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ce:	83 32       	cpi	r24, 0x23	; 35
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <RenterPassword+0x182>
    14d2:	5b cf       	rjmp	.-330    	; 0x138a <RenterPassword+0x38>
		{
			break;
		}

	}
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a8 ec       	ldi	r26, 0xC8	; 200
    14da:	b2 e4       	ldi	r27, 0x42	; 66
    14dc:	8b 87       	std	Y+11, r24	; 0x0b
    14de:	9c 87       	std	Y+12, r25	; 0x0c
    14e0:	ad 87       	std	Y+13, r26	; 0x0d
    14e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	4a e7       	ldi	r20, 0x7A	; 122
    14f2:	53 e4       	ldi	r21, 0x43	; 67
    14f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	8f 83       	std	Y+7, r24	; 0x07
    14fe:	98 87       	std	Y+8, r25	; 0x08
    1500:	a9 87       	std	Y+9, r26	; 0x09
    1502:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e8       	ldi	r20, 0x80	; 128
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1518:	88 23       	and	r24, r24
    151a:	2c f4       	brge	.+10     	; 0x1526 <RenterPassword+0x1d4>
		__ticks = 1;
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	9e 83       	std	Y+6, r25	; 0x06
    1522:	8d 83       	std	Y+5, r24	; 0x05
    1524:	3f c0       	rjmp	.+126    	; 0x15a4 <RenterPassword+0x252>
	else if (__tmp > 65535)
    1526:	6f 81       	ldd	r22, Y+7	; 0x07
    1528:	78 85       	ldd	r23, Y+8	; 0x08
    152a:	89 85       	ldd	r24, Y+9	; 0x09
    152c:	9a 85       	ldd	r25, Y+10	; 0x0a
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	4f e7       	ldi	r20, 0x7F	; 127
    1534:	57 e4       	ldi	r21, 0x47	; 71
    1536:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    153a:	18 16       	cp	r1, r24
    153c:	4c f5       	brge	.+82     	; 0x1590 <RenterPassword+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    153e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1540:	7c 85       	ldd	r23, Y+12	; 0x0c
    1542:	8d 85       	ldd	r24, Y+13	; 0x0d
    1544:	9e 85       	ldd	r25, Y+14	; 0x0e
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	40 e2       	ldi	r20, 0x20	; 32
    154c:	51 e4       	ldi	r21, 0x41	; 65
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	bc 01       	movw	r22, r24
    1558:	cd 01       	movw	r24, r26
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <RenterPassword+0x234>
    1568:	89 e1       	ldi	r24, 0x19	; 25
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9c 83       	std	Y+4, r25	; 0x04
    156e:	8b 83       	std	Y+3, r24	; 0x03
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <RenterPassword+0x222>
    1578:	9c 83       	std	Y+4, r25	; 0x04
    157a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    157c:	8d 81       	ldd	r24, Y+5	; 0x05
    157e:	9e 81       	ldd	r25, Y+6	; 0x06
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	9e 81       	ldd	r25, Y+6	; 0x06
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	69 f7       	brne	.-38     	; 0x1568 <RenterPassword+0x216>
    158e:	14 c0       	rjmp	.+40     	; 0x15b8 <RenterPassword+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1590:	6f 81       	ldd	r22, Y+7	; 0x07
    1592:	78 85       	ldd	r23, Y+8	; 0x08
    1594:	89 85       	ldd	r24, Y+9	; 0x09
    1596:	9a 85       	ldd	r25, Y+10	; 0x0a
    1598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	9e 83       	std	Y+6, r25	; 0x06
    15a2:	8d 83       	std	Y+5, r24	; 0x05
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	9a 83       	std	Y+2, r25	; 0x02
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <RenterPassword+0x25e>
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	return password;
    15b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15ba:	98 a1       	ldd	r25, Y+32	; 0x20
    15bc:	a9 a1       	ldd	r26, Y+33	; 0x21
    15be:	ba a1       	ldd	r27, Y+34	; 0x22
}
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	a2 96       	adiw	r28, 0x22	; 34
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <doorOptions>:


uint8 doorOptions(void)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	61 97       	sbiw	r28, 0x11	; 17
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
	uint8 buttonPressed;
	bool rotateMotorFlag = '*';
    15ea:	8a e2       	ldi	r24, 0x2A	; 42
    15ec:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
    15ee:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_clearScreen>
	LCD_goToRowColumn(0,0);
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_goToRowColumn>
	LCD_displayCharacter('*');
    15fa:	8a e2       	ldi	r24, 0x2A	; 42
    15fc:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_displayCharacter>
	LCD_displayString(" open door");
    1600:	88 ea       	ldi	r24, 0xA8	; 168
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 6e 13 	call	0x26dc	; 0x26dc <LCD_displayString>
	LCD_goToRowColumn(1,0);
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_goToRowColumn>
	LCD_displayCharacter('#');
    1610:	83 e2       	ldi	r24, 0x23	; 35
    1612:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_displayCharacter>
	LCD_displayString(" change pass");
    1616:	83 eb       	ldi	r24, 0xB3	; 179
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 6e 13 	call	0x26dc	; 0x26dc <LCD_displayString>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	af ea       	ldi	r26, 0xAF	; 175
    1624:	b4 e4       	ldi	r27, 0x44	; 68
    1626:	8b 87       	std	Y+11, r24	; 0x0b
    1628:	9c 87       	std	Y+12, r25	; 0x0c
    162a:	ad 87       	std	Y+13, r26	; 0x0d
    162c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1630:	7c 85       	ldd	r23, Y+12	; 0x0c
    1632:	8d 85       	ldd	r24, Y+13	; 0x0d
    1634:	9e 85       	ldd	r25, Y+14	; 0x0e
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a e7       	ldi	r20, 0x7A	; 122
    163c:	53 e4       	ldi	r21, 0x43	; 67
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	8f 83       	std	Y+7, r24	; 0x07
    1648:	98 87       	std	Y+8, r25	; 0x08
    164a:	a9 87       	std	Y+9, r26	; 0x09
    164c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    164e:	6f 81       	ldd	r22, Y+7	; 0x07
    1650:	78 85       	ldd	r23, Y+8	; 0x08
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	9a 85       	ldd	r25, Y+10	; 0x0a
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e8       	ldi	r20, 0x80	; 128
    165c:	5f e3       	ldi	r21, 0x3F	; 63
    165e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1662:	88 23       	and	r24, r24
    1664:	2c f4       	brge	.+10     	; 0x1670 <doorOptions+0x9a>
		__ticks = 1;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	3f c0       	rjmp	.+126    	; 0x16ee <doorOptions+0x118>
	else if (__tmp > 65535)
    1670:	6f 81       	ldd	r22, Y+7	; 0x07
    1672:	78 85       	ldd	r23, Y+8	; 0x08
    1674:	89 85       	ldd	r24, Y+9	; 0x09
    1676:	9a 85       	ldd	r25, Y+10	; 0x0a
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	4f e7       	ldi	r20, 0x7F	; 127
    167e:	57 e4       	ldi	r21, 0x47	; 71
    1680:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1684:	18 16       	cp	r1, r24
    1686:	4c f5       	brge	.+82     	; 0x16da <doorOptions+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	6b 85       	ldd	r22, Y+11	; 0x0b
    168a:	7c 85       	ldd	r23, Y+12	; 0x0c
    168c:	8d 85       	ldd	r24, Y+13	; 0x0d
    168e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	8d 83       	std	Y+5, r24	; 0x05
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <doorOptions+0xfa>
    16b2:	89 e1       	ldi	r24, 0x19	; 25
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9c 83       	std	Y+4, r25	; 0x04
    16b8:	8b 83       	std	Y+3, r24	; 0x03
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <doorOptions+0xe8>
    16c2:	9c 83       	std	Y+4, r25	; 0x04
    16c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	8d 81       	ldd	r24, Y+5	; 0x05
    16c8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	9e 83       	std	Y+6, r25	; 0x06
    16ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <doorOptions+0xdc>
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <doorOptions+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	8d 81       	ldd	r24, Y+5	; 0x05
    16f0:	9e 81       	ldd	r25, Y+6	; 0x06
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	89 81       	ldd	r24, Y+1	; 0x01
    16f8:	9a 81       	ldd	r25, Y+2	; 0x02
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <doorOptions+0x124>
    16fe:	9a 83       	std	Y+2, r25	; 0x02
    1700:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		_delay_ms(1400);
		buttonPressed = KeyPad_getPressedKey();
    1702:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <KeyPad_getPressedKey>
    1706:	88 8b       	std	Y+16, r24	; 0x10
		if(buttonPressed == '#')
    1708:	88 89       	ldd	r24, Y+16	; 0x10
    170a:	83 32       	cpi	r24, 0x23	; 35
    170c:	11 f4       	brne	.+4      	; 0x1712 <doorOptions+0x13c>
		{
			return 0;
    170e:	19 8a       	std	Y+17, r1	; 0x11
    1710:	06 c0       	rjmp	.+12     	; 0x171e <doorOptions+0x148>
		}
	}
	while(buttonPressed != '*');
    1712:	88 89       	ldd	r24, Y+16	; 0x10
    1714:	8a 32       	cpi	r24, 0x2A	; 42
    1716:	09 f0       	breq	.+2      	; 0x171a <doorOptions+0x144>
    1718:	82 cf       	rjmp	.-252    	; 0x161e <doorOptions+0x48>
	return rotateMotorFlag;
    171a:	8f 85       	ldd	r24, Y+15	; 0x0f
    171c:	89 8b       	std	Y+17, r24	; 0x11
    171e:	89 89       	ldd	r24, Y+17	; 0x11

}
    1720:	61 96       	adiw	r28, 0x11	; 17
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <changePassword>:


uint32 changePassword(void)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	a2 97       	sbiw	r28, 0x22	; 34
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
	uint32 password = 0;
    1746:	1f 8e       	std	Y+31, r1	; 0x1f
    1748:	18 a2       	std	Y+32, r1	; 0x20
    174a:	19 a2       	std	Y+33, r1	; 0x21
    174c:	1a a2       	std	Y+34, r1	; 0x22
	uint8 counter=0;
    174e:	1e 8e       	std	Y+30, r1	; 0x1e
	LCD_clearScreen();
    1750:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"enter old pass");
    1754:	20 ec       	ldi	r18, 0xC0	; 192
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	a9 01       	movw	r20, r18
    175e:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_displayStringRowColumn>
	LCD_goToRowColumn(1,0);
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_goToRowColumn>
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	af ea       	ldi	r26, 0xAF	; 175
    1770:	b4 e4       	ldi	r27, 0x44	; 68
    1772:	89 8f       	std	Y+25, r24	; 0x19
    1774:	9a 8f       	std	Y+26, r25	; 0x1a
    1776:	ab 8f       	std	Y+27, r26	; 0x1b
    1778:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177a:	69 8d       	ldd	r22, Y+25	; 0x19
    177c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    177e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1780:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	4a e7       	ldi	r20, 0x7A	; 122
    1788:	53 e4       	ldi	r21, 0x43	; 67
    178a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	8d 8b       	std	Y+21, r24	; 0x15
    1794:	9e 8b       	std	Y+22, r25	; 0x16
    1796:	af 8b       	std	Y+23, r26	; 0x17
    1798:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    179a:	6d 89       	ldd	r22, Y+21	; 0x15
    179c:	7e 89       	ldd	r23, Y+22	; 0x16
    179e:	8f 89       	ldd	r24, Y+23	; 0x17
    17a0:	98 8d       	ldd	r25, Y+24	; 0x18
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 e8       	ldi	r20, 0x80	; 128
    17a8:	5f e3       	ldi	r21, 0x3F	; 63
    17aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ae:	88 23       	and	r24, r24
    17b0:	2c f4       	brge	.+10     	; 0x17bc <changePassword+0x8a>
		__ticks = 1;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	9c 8b       	std	Y+20, r25	; 0x14
    17b8:	8b 8b       	std	Y+19, r24	; 0x13
    17ba:	3f c0       	rjmp	.+126    	; 0x183a <changePassword+0x108>
	else if (__tmp > 65535)
    17bc:	6d 89       	ldd	r22, Y+21	; 0x15
    17be:	7e 89       	ldd	r23, Y+22	; 0x16
    17c0:	8f 89       	ldd	r24, Y+23	; 0x17
    17c2:	98 8d       	ldd	r25, Y+24	; 0x18
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	3f ef       	ldi	r19, 0xFF	; 255
    17c8:	4f e7       	ldi	r20, 0x7F	; 127
    17ca:	57 e4       	ldi	r21, 0x47	; 71
    17cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17d0:	18 16       	cp	r1, r24
    17d2:	4c f5       	brge	.+82     	; 0x1826 <changePassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d4:	69 8d       	ldd	r22, Y+25	; 0x19
    17d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	40 e2       	ldi	r20, 0x20	; 32
    17e2:	51 e4       	ldi	r21, 0x41	; 65
    17e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	bc 01       	movw	r22, r24
    17ee:	cd 01       	movw	r24, r26
    17f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	9c 8b       	std	Y+20, r25	; 0x14
    17fa:	8b 8b       	std	Y+19, r24	; 0x13
    17fc:	0f c0       	rjmp	.+30     	; 0x181c <changePassword+0xea>
    17fe:	89 e1       	ldi	r24, 0x19	; 25
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	9a 8b       	std	Y+18, r25	; 0x12
    1804:	89 8b       	std	Y+17, r24	; 0x11
    1806:	89 89       	ldd	r24, Y+17	; 0x11
    1808:	9a 89       	ldd	r25, Y+18	; 0x12
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <changePassword+0xd8>
    180e:	9a 8b       	std	Y+18, r25	; 0x12
    1810:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1812:	8b 89       	ldd	r24, Y+19	; 0x13
    1814:	9c 89       	ldd	r25, Y+20	; 0x14
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	9c 8b       	std	Y+20, r25	; 0x14
    181a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181c:	8b 89       	ldd	r24, Y+19	; 0x13
    181e:	9c 89       	ldd	r25, Y+20	; 0x14
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	69 f7       	brne	.-38     	; 0x17fe <changePassword+0xcc>
    1824:	14 c0       	rjmp	.+40     	; 0x184e <changePassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1826:	6d 89       	ldd	r22, Y+21	; 0x15
    1828:	7e 89       	ldd	r23, Y+22	; 0x16
    182a:	8f 89       	ldd	r24, Y+23	; 0x17
    182c:	98 8d       	ldd	r25, Y+24	; 0x18
    182e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	9c 8b       	std	Y+20, r25	; 0x14
    1838:	8b 8b       	std	Y+19, r24	; 0x13
    183a:	8b 89       	ldd	r24, Y+19	; 0x13
    183c:	9c 89       	ldd	r25, Y+20	; 0x14
    183e:	98 8b       	std	Y+16, r25	; 0x10
    1840:	8f 87       	std	Y+15, r24	; 0x0f
    1842:	8f 85       	ldd	r24, Y+15	; 0x0f
    1844:	98 89       	ldd	r25, Y+16	; 0x10
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	f1 f7       	brne	.-4      	; 0x1846 <changePassword+0x114>
    184a:	98 8b       	std	Y+16, r25	; 0x10
    184c:	8f 87       	std	Y+15, r24	; 0x0f
	while(1)
	{

		_delay_ms(1400); /* delay for slow down input from kaypad */
		uint8 buttonPressed = KeyPad_getPressedKey(); /* get key from user */
    184e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <KeyPad_getPressedKey>
    1852:	8d 8f       	std	Y+29, r24	; 0x1d
		if(buttonPressed >= 0 && buttonPressed <= 9)
    1854:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1856:	8a 30       	cpi	r24, 0x0A	; 10
    1858:	08 f5       	brcc	.+66     	; 0x189c <changePassword+0x16a>
		{
			password = (password * 10) + buttonPressed; /* form a 4 byte value */
    185a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    185c:	98 a1       	ldd	r25, Y+32	; 0x20
    185e:	a9 a1       	ldd	r26, Y+33	; 0x21
    1860:	ba a1       	ldd	r27, Y+34	; 0x22
    1862:	2a e0       	ldi	r18, 0x0A	; 10
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__mulsi3>
    1872:	9b 01       	movw	r18, r22
    1874:	ac 01       	movw	r20, r24
    1876:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1878:	88 2f       	mov	r24, r24
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a0 e0       	ldi	r26, 0x00	; 0
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	82 0f       	add	r24, r18
    1882:	93 1f       	adc	r25, r19
    1884:	a4 1f       	adc	r26, r20
    1886:	b5 1f       	adc	r27, r21
    1888:	8f 8f       	std	Y+31, r24	; 0x1f
    188a:	98 a3       	std	Y+32, r25	; 0x20
    188c:	a9 a3       	std	Y+33, r26	; 0x21
    188e:	ba a3       	std	Y+34, r27	; 0x22

			counter++; /* counter for limitition the input Password */
    1890:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1892:	8f 5f       	subi	r24, 0xFF	; 255
    1894:	8e 8f       	std	Y+30, r24	; 0x1e

			LCD_displayCharacter('*'); /* print '*' instead of the real number */
    1896:	8a e2       	ldi	r24, 0x2A	; 42
    1898:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_displayCharacter>


		}
		if(counter == 5)
    189c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    189e:	85 30       	cpi	r24, 0x05	; 5
    18a0:	29 f4       	brne	.+10     	; 0x18ac <changePassword+0x17a>
		{
			do
			{
				/* stop the user from entering any more input and waiting to press enter to leave loop */
			}
			while(KeyPad_getPressedKey() != '#');
    18a2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <KeyPad_getPressedKey>
    18a6:	83 32       	cpi	r24, 0x23	; 35
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <changePassword+0x170>
    18aa:	04 c0       	rjmp	.+8      	; 0x18b4 <changePassword+0x182>
			break;
		}

		if(buttonPressed == '#')
    18ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18ae:	83 32       	cpi	r24, 0x23	; 35
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <changePassword+0x182>
    18b2:	5b cf       	rjmp	.-330    	; 0x176a <changePassword+0x38>
		{
			break; /* leave loop when entering enter on keyboard */
		}

	}
    18b4:	80 e0       	ldi	r24, 0x00	; 0
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a8 ec       	ldi	r26, 0xC8	; 200
    18ba:	b2 e4       	ldi	r27, 0x42	; 66
    18bc:	8b 87       	std	Y+11, r24	; 0x0b
    18be:	9c 87       	std	Y+12, r25	; 0x0c
    18c0:	ad 87       	std	Y+13, r26	; 0x0d
    18c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	4a e7       	ldi	r20, 0x7A	; 122
    18d2:	53 e4       	ldi	r21, 0x43	; 67
    18d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	8f 83       	std	Y+7, r24	; 0x07
    18de:	98 87       	std	Y+8, r25	; 0x08
    18e0:	a9 87       	std	Y+9, r26	; 0x09
    18e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e4:	6f 81       	ldd	r22, Y+7	; 0x07
    18e6:	78 85       	ldd	r23, Y+8	; 0x08
    18e8:	89 85       	ldd	r24, Y+9	; 0x09
    18ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e8       	ldi	r20, 0x80	; 128
    18f2:	5f e3       	ldi	r21, 0x3F	; 63
    18f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f8:	88 23       	and	r24, r24
    18fa:	2c f4       	brge	.+10     	; 0x1906 <changePassword+0x1d4>
		__ticks = 1;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
    1904:	3f c0       	rjmp	.+126    	; 0x1984 <changePassword+0x252>
	else if (__tmp > 65535)
    1906:	6f 81       	ldd	r22, Y+7	; 0x07
    1908:	78 85       	ldd	r23, Y+8	; 0x08
    190a:	89 85       	ldd	r24, Y+9	; 0x09
    190c:	9a 85       	ldd	r25, Y+10	; 0x0a
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	3f ef       	ldi	r19, 0xFF	; 255
    1912:	4f e7       	ldi	r20, 0x7F	; 127
    1914:	57 e4       	ldi	r21, 0x47	; 71
    1916:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    191a:	18 16       	cp	r1, r24
    191c:	4c f5       	brge	.+82     	; 0x1970 <changePassword+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    191e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1920:	7c 85       	ldd	r23, Y+12	; 0x0c
    1922:	8d 85       	ldd	r24, Y+13	; 0x0d
    1924:	9e 85       	ldd	r25, Y+14	; 0x0e
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e2       	ldi	r20, 0x20	; 32
    192c:	51 e4       	ldi	r21, 0x41	; 65
    192e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	0f c0       	rjmp	.+30     	; 0x1966 <changePassword+0x234>
    1948:	89 e1       	ldi	r24, 0x19	; 25
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	8b 83       	std	Y+3, r24	; 0x03
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	01 97       	sbiw	r24, 0x01	; 1
    1956:	f1 f7       	brne	.-4      	; 0x1954 <changePassword+0x222>
    1958:	9c 83       	std	Y+4, r25	; 0x04
    195a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    195c:	8d 81       	ldd	r24, Y+5	; 0x05
    195e:	9e 81       	ldd	r25, Y+6	; 0x06
    1960:	01 97       	sbiw	r24, 0x01	; 1
    1962:	9e 83       	std	Y+6, r25	; 0x06
    1964:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1966:	8d 81       	ldd	r24, Y+5	; 0x05
    1968:	9e 81       	ldd	r25, Y+6	; 0x06
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	69 f7       	brne	.-38     	; 0x1948 <changePassword+0x216>
    196e:	14 c0       	rjmp	.+40     	; 0x1998 <changePassword+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1970:	6f 81       	ldd	r22, Y+7	; 0x07
    1972:	78 85       	ldd	r23, Y+8	; 0x08
    1974:	89 85       	ldd	r24, Y+9	; 0x09
    1976:	9a 85       	ldd	r25, Y+10	; 0x0a
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	9e 83       	std	Y+6, r25	; 0x06
    1982:	8d 83       	std	Y+5, r24	; 0x05
    1984:	8d 81       	ldd	r24, Y+5	; 0x05
    1986:	9e 81       	ldd	r25, Y+6	; 0x06
    1988:	9a 83       	std	Y+2, r25	; 0x02
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	9a 81       	ldd	r25, Y+2	; 0x02
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <changePassword+0x25e>
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	return password; /* return the entered value from user */
    1998:	8f 8d       	ldd	r24, Y+31	; 0x1f
    199a:	98 a1       	ldd	r25, Y+32	; 0x20
    199c:	a9 a1       	ldd	r26, Y+33	; 0x21
    199e:	ba a1       	ldd	r27, Y+34	; 0x22

}
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	a2 96       	adiw	r28, 0x22	; 34
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <SendPassword>:

void SendPassword(uint32 password)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <SendPassword+0x6>
    19bc:	00 d0       	rcall	.+0      	; 0x19be <SendPassword+0x8>
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	69 83       	std	Y+1, r22	; 0x01
    19c4:	7a 83       	std	Y+2, r23	; 0x02
    19c6:	8b 83       	std	Y+3, r24	; 0x03
    19c8:	9c 83       	std	Y+4, r25	; 0x04
    19ca:	22 c0       	rjmp	.+68     	; 0x1a10 <SendPassword+0x5a>

	while(password != 0)
	{
		UART_sendByte(password % 10); /* sending byte by byte from a 4 byte password */
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	ab 81       	ldd	r26, Y+3	; 0x03
    19d2:	bc 81       	ldd	r27, Y+4	; 0x04
    19d4:	2a e0       	ldi	r18, 0x0A	; 10
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	bc 01       	movw	r22, r24
    19de:	cd 01       	movw	r24, r26
    19e0:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__udivmodsi4>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_sendByte>
		password /= 10;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	ab 81       	ldd	r26, Y+3	; 0x03
    19f2:	bc 81       	ldd	r27, Y+4	; 0x04
    19f4:	2a e0       	ldi	r18, 0x0A	; 10
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	bc 01       	movw	r22, r24
    19fe:	cd 01       	movw	r24, r26
    1a00:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__udivmodsi4>
    1a04:	da 01       	movw	r26, r20
    1a06:	c9 01       	movw	r24, r18
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	9a 83       	std	Y+2, r25	; 0x02
    1a0c:	ab 83       	std	Y+3, r26	; 0x03
    1a0e:	bc 83       	std	Y+4, r27	; 0x04
}

void SendPassword(uint32 password)
{

	while(password != 0)
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	ab 81       	ldd	r26, Y+3	; 0x03
    1a16:	bc 81       	ldd	r27, Y+4	; 0x04
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	a1 05       	cpc	r26, r1
    1a1c:	b1 05       	cpc	r27, r1
    1a1e:	b1 f6       	brne	.-84     	; 0x19cc <SendPassword+0x16>
	{
		UART_sendByte(password % 10); /* sending byte by byte from a 4 byte password */
		password /= 10;
	}
	UART_sendByte(STOP_SENDING);
    1a20:	82 e1       	ldi	r24, 0x12	; 18
    1a22:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_sendByte>

}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <recievePassword>:
void recievePassword(uint8 recievedData , uint32 * recievedPassword)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <recievePassword+0x6>
    1a3a:	0f 92       	push	r0
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	7b 83       	std	Y+3, r23	; 0x03
    1a44:	6a 83       	std	Y+2, r22	; 0x02
	recievedData=0;
    1a46:	19 82       	std	Y+1, r1	; 0x01
	*recievedPassword=0;
    1a48:	ea 81       	ldd	r30, Y+2	; 0x02
    1a4a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a4c:	10 82       	st	Z, r1
    1a4e:	11 82       	std	Z+1, r1	; 0x01
    1a50:	12 82       	std	Z+2, r1	; 0x02
    1a52:	13 82       	std	Z+3, r1	; 0x03
    1a54:	25 c0       	rjmp	.+74     	; 0x1aa0 <recievePassword+0x6c>

	while(recievedData != STOP_SENDING)
	{
		*recievedPassword =(*(recievedPassword) * 10) + recievedData; /* Rearrange bytes to form the 4 byte passowrd */
    1a56:	ea 81       	ldd	r30, Y+2	; 0x02
    1a58:	fb 81       	ldd	r31, Y+3	; 0x03
    1a5a:	80 81       	ld	r24, Z
    1a5c:	91 81       	ldd	r25, Z+1	; 0x01
    1a5e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a60:	b3 81       	ldd	r27, Z+3	; 0x03
    1a62:	2a e0       	ldi	r18, 0x0A	; 10
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	bc 01       	movw	r22, r24
    1a6c:	cd 01       	movw	r24, r26
    1a6e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__mulsi3>
    1a72:	9b 01       	movw	r18, r22
    1a74:	ac 01       	movw	r20, r24
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	88 2f       	mov	r24, r24
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	a0 e0       	ldi	r26, 0x00	; 0
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	82 0f       	add	r24, r18
    1a82:	93 1f       	adc	r25, r19
    1a84:	a4 1f       	adc	r26, r20
    1a86:	b5 1f       	adc	r27, r21
    1a88:	ea 81       	ldd	r30, Y+2	; 0x02
    1a8a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a8c:	80 83       	st	Z, r24
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	a2 83       	std	Z+2, r26	; 0x02
    1a92:	b3 83       	std	Z+3, r27	; 0x03

		UART_sendByte(HMI_READY); /* Control Mc is ready for the next byte to recieve */
    1a94:	81 e1       	ldi	r24, 0x11	; 17
    1a96:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_sendByte>
		recievedData = UART_recieveByte();
    1a9a:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <UART_recieveByte>
    1a9e:	89 83       	std	Y+1, r24	; 0x01
void recievePassword(uint8 recievedData , uint32 * recievedPassword)
{
	recievedData=0;
	*recievedPassword=0;

	while(recievedData != STOP_SENDING)
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
    1aa2:	82 31       	cpi	r24, 0x12	; 18
    1aa4:	c1 f6       	brne	.-80     	; 0x1a56 <recievePassword+0x22>

		UART_sendByte(HMI_READY); /* Control Mc is ready for the next byte to recieve */
		recievedData = UART_recieveByte();
	}

}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <reverseNumber>:

uint32 reverseNumber(uint32 number)
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	29 97       	sbiw	r28, 0x09	; 9
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	6e 83       	std	Y+6, r22	; 0x06
    1ac8:	7f 83       	std	Y+7, r23	; 0x07
    1aca:	88 87       	std	Y+8, r24	; 0x08
    1acc:	99 87       	std	Y+9, r25	; 0x09
	uint32 reverse = 0;
    1ace:	1a 82       	std	Y+2, r1	; 0x02
    1ad0:	1b 82       	std	Y+3, r1	; 0x03
    1ad2:	1c 82       	std	Y+4, r1	; 0x04
    1ad4:	1d 82       	std	Y+5, r1	; 0x05
	uint8 remainder = 0;
    1ad6:	19 82       	std	Y+1, r1	; 0x01
    1ad8:	3c c0       	rjmp	.+120    	; 0x1b52 <reverseNumber+0xa0>

	while(number != 0)
	{
		remainder = number % 10;
    1ada:	8e 81       	ldd	r24, Y+6	; 0x06
    1adc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ade:	a8 85       	ldd	r26, Y+8	; 0x08
    1ae0:	b9 85       	ldd	r27, Y+9	; 0x09
    1ae2:	2a e0       	ldi	r18, 0x0A	; 10
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	bc 01       	movw	r22, r24
    1aec:	cd 01       	movw	r24, r26
    1aee:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__udivmodsi4>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	89 83       	std	Y+1, r24	; 0x01
		reverse = (reverse*10) + remainder;
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	9b 81       	ldd	r25, Y+3	; 0x03
    1afc:	ac 81       	ldd	r26, Y+4	; 0x04
    1afe:	bd 81       	ldd	r27, Y+5	; 0x05
    1b00:	2a e0       	ldi	r18, 0x0A	; 10
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e0       	ldi	r20, 0x00	; 0
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__mulsi3>
    1b10:	9b 01       	movw	r18, r22
    1b12:	ac 01       	movw	r20, r24
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	88 2f       	mov	r24, r24
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	a0 e0       	ldi	r26, 0x00	; 0
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	82 0f       	add	r24, r18
    1b20:	93 1f       	adc	r25, r19
    1b22:	a4 1f       	adc	r26, r20
    1b24:	b5 1f       	adc	r27, r21
    1b26:	8a 83       	std	Y+2, r24	; 0x02
    1b28:	9b 83       	std	Y+3, r25	; 0x03
    1b2a:	ac 83       	std	Y+4, r26	; 0x04
    1b2c:	bd 83       	std	Y+5, r27	; 0x05
		number /= 10;
    1b2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b30:	9f 81       	ldd	r25, Y+7	; 0x07
    1b32:	a8 85       	ldd	r26, Y+8	; 0x08
    1b34:	b9 85       	ldd	r27, Y+9	; 0x09
    1b36:	2a e0       	ldi	r18, 0x0A	; 10
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	50 e0       	ldi	r21, 0x00	; 0
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <__udivmodsi4>
    1b46:	da 01       	movw	r26, r20
    1b48:	c9 01       	movw	r24, r18
    1b4a:	8e 83       	std	Y+6, r24	; 0x06
    1b4c:	9f 83       	std	Y+7, r25	; 0x07
    1b4e:	a8 87       	std	Y+8, r26	; 0x08
    1b50:	b9 87       	std	Y+9, r27	; 0x09
uint32 reverseNumber(uint32 number)
{
	uint32 reverse = 0;
	uint8 remainder = 0;

	while(number != 0)
    1b52:	8e 81       	ldd	r24, Y+6	; 0x06
    1b54:	9f 81       	ldd	r25, Y+7	; 0x07
    1b56:	a8 85       	ldd	r26, Y+8	; 0x08
    1b58:	b9 85       	ldd	r27, Y+9	; 0x09
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	a1 05       	cpc	r26, r1
    1b5e:	b1 05       	cpc	r27, r1
    1b60:	09 f0       	breq	.+2      	; 0x1b64 <reverseNumber+0xb2>
    1b62:	bb cf       	rjmp	.-138    	; 0x1ada <reverseNumber+0x28>
		remainder = number % 10;
		reverse = (reverse*10) + remainder;
		number /= 10;
	}

	return reverse;
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	9b 81       	ldd	r25, Y+3	; 0x03
    1b68:	ac 81       	ldd	r26, Y+4	; 0x04
    1b6a:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	cd 01       	movw	r24, r26
    1b70:	29 96       	adiw	r28, 0x09	; 9
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <Mismatch>:

void Mismatch(void)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	2f 97       	sbiw	r28, 0x0f	; 15
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1b96:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_clearScreen>

	for(uint8 i = 0 ;i<10;i++)
    1b9a:	1f 86       	std	Y+15, r1	; 0x0f
    1b9c:	83 c0       	rjmp	.+262    	; 0x1ca4 <Mismatch+0x122>
	{
		LCD_displayStringRowColumn(0,0,"MISMATCH!");
    1b9e:	2f ec       	ldi	r18, 0xCF	; 207
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	a9 01       	movw	r20, r18
    1ba8:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"Try Again");
    1bac:	29 ed       	ldi	r18, 0xD9	; 217
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	a9 01       	movw	r20, r18
    1bb6:	0e 94 a1 13 	call	0x2742	; 0x2742 <LCD_displayStringRowColumn>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	aa ef       	ldi	r26, 0xFA	; 250
    1bc0:	b3 e4       	ldi	r27, 0x43	; 67
    1bc2:	8b 87       	std	Y+11, r24	; 0x0b
    1bc4:	9c 87       	std	Y+12, r25	; 0x0c
    1bc6:	ad 87       	std	Y+13, r26	; 0x0d
    1bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a e7       	ldi	r20, 0x7A	; 122
    1bd8:	53 e4       	ldi	r21, 0x43	; 67
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8f 83       	std	Y+7, r24	; 0x07
    1be4:	98 87       	std	Y+8, r25	; 0x08
    1be6:	a9 87       	std	Y+9, r26	; 0x09
    1be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	78 85       	ldd	r23, Y+8	; 0x08
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <Mismatch+0x8a>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <Mismatch+0x108>
	else if (__tmp > 65535)
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <Mismatch+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <Mismatch+0xea>
    1c4e:	89 e1       	ldi	r24, 0x19	; 25
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	8b 83       	std	Y+3, r24	; 0x03
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <Mismatch+0xd8>
    1c5e:	9c 83       	std	Y+4, r25	; 0x04
    1c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <Mismatch+0xcc>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <Mismatch+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	6f 81       	ldd	r22, Y+7	; 0x07
    1c78:	78 85       	ldd	r23, Y+8	; 0x08
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <Mismatch+0x114>
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	89 83       	std	Y+1, r24	; 0x01

void Mismatch(void)
{
	LCD_clearScreen();

	for(uint8 i = 0 ;i<10;i++)
    1c9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca0:	8f 5f       	subi	r24, 0xFF	; 255
    1ca2:	8f 87       	std	Y+15, r24	; 0x0f
    1ca4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca6:	8a 30       	cpi	r24, 0x0A	; 10
    1ca8:	08 f4       	brcc	.+2      	; 0x1cac <Mismatch+0x12a>
    1caa:	79 cf       	rjmp	.-270    	; 0x1b9e <Mismatch+0x1c>
	{
		LCD_displayStringRowColumn(0,0,"MISMATCH!");
		LCD_displayStringRowColumn(1,0,"Try Again");
		_delay_ms(500);
	}
}
    1cac:	2f 96       	adiw	r28, 0x0f	; 15
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <recieveEepromFlag>:

void recieveEepromFlag(uint8 * Ptr)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <recieveEepromFlag+0x6>
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
	*Ptr = FALSE;
    1ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cce:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd0:	10 82       	st	Z, r1
	UART_sendByte(HMI_READY);
    1cd2:	81 e1       	ldi	r24, 0x11	; 17
    1cd4:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_sendByte>
	*Ptr = UART_recieveByte();
    1cd8:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <UART_recieveByte>
    1cdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cde:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce0:	80 83       	st	Z, r24


}
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	cf 91       	pop	r28
    1ce8:	df 91       	pop	r29
    1cea:	08 95       	ret

00001cec <recieveEepromPassword>:

uint32 recieveEepromPassword(uint8 recievedData , uint32 * recievedPassword)
{
    1cec:	df 93       	push	r29
    1cee:	cf 93       	push	r28
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	27 97       	sbiw	r28, 0x07	; 7
    1cf6:	0f b6       	in	r0, 0x3f	; 63
    1cf8:	f8 94       	cli
    1cfa:	de bf       	out	0x3e, r29	; 62
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	cd bf       	out	0x3d, r28	; 61
    1d00:	8d 83       	std	Y+5, r24	; 0x05
    1d02:	7f 83       	std	Y+7, r23	; 0x07
    1d04:	6e 83       	std	Y+6, r22	; 0x06
	recievedData=0;
    1d06:	1d 82       	std	Y+5, r1	; 0x05
	*recievedPassword=0;
    1d08:	ee 81       	ldd	r30, Y+6	; 0x06
    1d0a:	ff 81       	ldd	r31, Y+7	; 0x07
    1d0c:	10 82       	st	Z, r1
    1d0e:	11 82       	std	Z+1, r1	; 0x01
    1d10:	12 82       	std	Z+2, r1	; 0x02
    1d12:	13 82       	std	Z+3, r1	; 0x03
	uint32 password=0;
    1d14:	19 82       	std	Y+1, r1	; 0x01
    1d16:	1a 82       	std	Y+2, r1	; 0x02
    1d18:	1b 82       	std	Y+3, r1	; 0x03
    1d1a:	1c 82       	std	Y+4, r1	; 0x04
	recievePassword(recievedData , recievedPassword);
    1d1c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d1e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	b9 01       	movw	r22, r18
    1d24:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <recievePassword>
	password = reverseNumber(*recievedPassword);
    1d28:	ee 81       	ldd	r30, Y+6	; 0x06
    1d2a:	ff 81       	ldd	r31, Y+7	; 0x07
    1d2c:	80 81       	ld	r24, Z
    1d2e:	91 81       	ldd	r25, Z+1	; 0x01
    1d30:	a2 81       	ldd	r26, Z+2	; 0x02
    1d32:	b3 81       	ldd	r27, Z+3	; 0x03
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <reverseNumber>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	ab 83       	std	Y+3, r26	; 0x03
    1d46:	bc 83       	std	Y+4, r27	; 0x04
	return password;
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d4e:	bc 81       	ldd	r27, Y+4	; 0x04


}
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	27 96       	adiw	r28, 0x07	; 7
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <closeDoor>:
void closeDoor(void)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	0f 92       	push	r0
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
	uint8 buttonPressed;
	LCD_clearScreen();
    1d70:	0e 94 97 13 	call	0x272e	; 0x272e <LCD_clearScreen>
	LCD_goToRowColumn(0,0);
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_goToRowColumn>
	LCD_displayCharacter('*');
    1d7c:	8a e2       	ldi	r24, 0x2A	; 42
    1d7e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_displayCharacter>
	LCD_displayString(" close door");
    1d82:	83 ee       	ldi	r24, 0xE3	; 227
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 6e 13 	call	0x26dc	; 0x26dc <LCD_displayString>
	do
	{
		buttonPressed = KeyPad_getPressedKey();
    1d8a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <KeyPad_getPressedKey>
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	}
	while(buttonPressed != '*');
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	8a 32       	cpi	r24, 0x2A	; 42
    1d94:	d1 f7       	brne	.-12     	; 0x1d8a <closeDoor+0x24>
}
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <KeyPad_getPressedKey+0x6>
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1da8:	1a 82       	std	Y+2, r1	; 0x02
    1daa:	4d c0       	rjmp	.+154    	; 0x1e46 <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1dac:	ea e3       	ldi	r30, 0x3A	; 58
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	80 e1       	ldi	r24, 0x10	; 16
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <KeyPad_getPressedKey+0x22>
    1dbc:	88 0f       	add	r24, r24
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	2a 95       	dec	r18
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <KeyPad_getPressedKey+0x1e>
    1dc4:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    1dc6:	eb e3       	ldi	r30, 0x3B	; 59
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	80 e1       	ldi	r24, 0x10	; 16
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	02 2e       	mov	r0, r18
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <KeyPad_getPressedKey+0x3e>
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	0a 94       	dec	r0
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <KeyPad_getPressedKey+0x3a>
    1de0:	80 95       	com	r24
    1de2:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    1de4:	19 82       	std	Y+1, r1	; 0x01
    1de6:	29 c0       	rjmp	.+82     	; 0x1e3a <KeyPad_getPressedKey+0x9c>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1de8:	e9 e3       	ldi	r30, 0x39	; 57
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	28 2f       	mov	r18, r24
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a9 01       	movw	r20, r18
    1dfa:	02 c0       	rjmp	.+4      	; 0x1e00 <KeyPad_getPressedKey+0x62>
    1dfc:	55 95       	asr	r21
    1dfe:	47 95       	ror	r20
    1e00:	8a 95       	dec	r24
    1e02:	e2 f7       	brpl	.-8      	; 0x1dfc <KeyPad_getPressedKey+0x5e>
    1e04:	ca 01       	movw	r24, r20
    1e06:	81 70       	andi	r24, 0x01	; 1
    1e08:	90 70       	andi	r25, 0x00	; 0
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	99 f4       	brne	.+38     	; 0x1e34 <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	c9 01       	movw	r24, r18
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	82 0f       	add	r24, r18
    1e1c:	93 1f       	adc	r25, r19
    1e1e:	98 2f       	mov	r25, r24
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	89 0f       	add	r24, r25
    1e24:	8f 5f       	subi	r24, 0xFF	; 255
    1e26:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <KeyPad_4x3_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	8f 5f       	subi	r24, 0xFF	; 255
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	84 30       	cpi	r24, 0x04	; 4
    1e3e:	a0 f2       	brcs	.-88     	; 0x1de8 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	8f 5f       	subi	r24, 0xFF	; 255
    1e44:	8a 83       	std	Y+2, r24	; 0x02
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	83 30       	cpi	r24, 0x03	; 3
    1e4a:	08 f4       	brcc	.+2      	; 0x1e4e <KeyPad_getPressedKey+0xb0>
    1e4c:	af cf       	rjmp	.-162    	; 0x1dac <KeyPad_getPressedKey+0xe>
    1e4e:	ac cf       	rjmp	.-168    	; 0x1da8 <KeyPad_getPressedKey+0xa>

00001e50 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

static uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <KeyPad_4x3_adjustKeyNumber+0x6>
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <KeyPad_4x3_adjustKeyNumber+0x8>
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	3c 83       	std	Y+4, r19	; 0x04
    1e66:	2b 83       	std	Y+3, r18	; 0x03
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	8a 30       	cpi	r24, 0x0A	; 10
    1e6e:	91 05       	cpc	r25, r1
    1e70:	81 f0       	breq	.+32     	; 0x1e92 <KeyPad_4x3_adjustKeyNumber+0x42>
    1e72:	2b 81       	ldd	r18, Y+3	; 0x03
    1e74:	3c 81       	ldd	r19, Y+4	; 0x04
    1e76:	2a 30       	cpi	r18, 0x0A	; 10
    1e78:	31 05       	cpc	r19, r1
    1e7a:	9c f0       	brlt	.+38     	; 0x1ea2 <KeyPad_4x3_adjustKeyNumber+0x52>
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	8b 30       	cpi	r24, 0x0B	; 11
    1e82:	91 05       	cpc	r25, r1
    1e84:	49 f0       	breq	.+18     	; 0x1e98 <KeyPad_4x3_adjustKeyNumber+0x48>
    1e86:	2b 81       	ldd	r18, Y+3	; 0x03
    1e88:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8a:	2c 30       	cpi	r18, 0x0C	; 12
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <KeyPad_4x3_adjustKeyNumber+0x4c>
    1e90:	08 c0       	rjmp	.+16     	; 0x1ea2 <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of =
    1e92:	3a e2       	ldi	r19, 0x2A	; 42
    1e94:	3a 83       	std	Y+2, r19	; 0x02
    1e96:	07 c0       	rjmp	.+14     	; 0x1ea6 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
    1e98:	1a 82       	std	Y+2, r1	; 0x02
    1e9a:	05 c0       	rjmp	.+10     	; 0x1ea6 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;		
		case 12: return '#'; // ASCII Code of +
    1e9c:	83 e2       	ldi	r24, 0x23	; 35
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;								 						
    1ea2:	99 81       	ldd	r25, Y+1	; 0x01
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <LCD_init>:
 *  Created on: Dec 29, 2019
 *      Author: Basel Ashraf
 */
#include "lcd.h"
void LCD_init(void)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR|=(1<<RS)|(1<<E)|(1<<RW);
    1ebe:	a7 e3       	ldi	r26, 0x37	; 55
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e7 e3       	ldi	r30, 0x37	; 55
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	8e 60       	ori	r24, 0x0E	; 14
    1eca:	8c 93       	st	X, r24
	LCD_DATA_PORT_DIR=0xff;
    1ecc:	e4 e3       	ldi	r30, 0x34	; 52
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	8f ef       	ldi	r24, 0xFF	; 255
    1ed2:	80 83       	st	Z, r24
	LCD_sendCommand(EIGHT_BITS_MODE);
    1ed4:	88 e3       	ldi	r24, 0x38	; 56
    1ed6:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF);
    1eda:	8c e0       	ldi	r24, 0x0C	; 12
    1edc:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_sendCommand>
	LCD_sendCommand(CLEAR_DISPLAY);
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_sendCommand>
}
    1ee6:	cf 91       	pop	r28
    1ee8:	df 91       	pop	r29
    1eea:	08 95       	ret

00001eec <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1eec:	df 93       	push	r29
    1eee:	cf 93       	push	r28
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	e9 97       	sbiw	r28, 0x39	; 57
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS);
    1f02:	a8 e3       	ldi	r26, 0x38	; 56
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e8 e3       	ldi	r30, 0x38	; 56
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	8d 7f       	andi	r24, 0xFD	; 253
    1f0e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    1f10:	a8 e3       	ldi	r26, 0x38	; 56
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e8 e3       	ldi	r30, 0x38	; 56
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	8b 7f       	andi	r24, 0xFB	; 251
    1f1c:	8c 93       	st	X, r24
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e8       	ldi	r26, 0x80	; 128
    1f24:	bf e3       	ldi	r27, 0x3F	; 63
    1f26:	8d ab       	std	Y+53, r24	; 0x35
    1f28:	9e ab       	std	Y+54, r25	; 0x36
    1f2a:	af ab       	std	Y+55, r26	; 0x37
    1f2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f30:	7e a9       	ldd	r23, Y+54	; 0x36
    1f32:	8f a9       	ldd	r24, Y+55	; 0x37
    1f34:	98 ad       	ldd	r25, Y+56	; 0x38
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a e7       	ldi	r20, 0x7A	; 122
    1f3c:	53 e4       	ldi	r21, 0x43	; 67
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	89 ab       	std	Y+49, r24	; 0x31
    1f48:	9a ab       	std	Y+50, r25	; 0x32
    1f4a:	ab ab       	std	Y+51, r26	; 0x33
    1f4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f4e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f50:	7a a9       	ldd	r23, Y+50	; 0x32
    1f52:	8b a9       	ldd	r24, Y+51	; 0x33
    1f54:	9c a9       	ldd	r25, Y+52	; 0x34
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e8       	ldi	r20, 0x80	; 128
    1f5c:	5f e3       	ldi	r21, 0x3F	; 63
    1f5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f62:	88 23       	and	r24, r24
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <LCD_sendCommand+0x84>
		__ticks = 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	98 ab       	std	Y+48, r25	; 0x30
    1f6c:	8f a7       	std	Y+47, r24	; 0x2f
    1f6e:	3f c0       	rjmp	.+126    	; 0x1fee <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    1f70:	69 a9       	ldd	r22, Y+49	; 0x31
    1f72:	7a a9       	ldd	r23, Y+50	; 0x32
    1f74:	8b a9       	ldd	r24, Y+51	; 0x33
    1f76:	9c a9       	ldd	r25, Y+52	; 0x34
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
    1f7c:	4f e7       	ldi	r20, 0x7F	; 127
    1f7e:	57 e4       	ldi	r21, 0x47	; 71
    1f80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f84:	18 16       	cp	r1, r24
    1f86:	4c f5       	brge	.+82     	; 0x1fda <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f88:	6d a9       	ldd	r22, Y+53	; 0x35
    1f8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e2       	ldi	r20, 0x20	; 32
    1f96:	51 e4       	ldi	r21, 0x41	; 65
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	98 ab       	std	Y+48, r25	; 0x30
    1fae:	8f a7       	std	Y+47, r24	; 0x2f
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <LCD_sendCommand+0xe4>
    1fb2:	89 e1       	ldi	r24, 0x19	; 25
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9e a7       	std	Y+46, r25	; 0x2e
    1fb8:	8d a7       	std	Y+45, r24	; 0x2d
    1fba:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <LCD_sendCommand+0xd2>
    1fc2:	9e a7       	std	Y+46, r25	; 0x2e
    1fc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	98 ab       	std	Y+48, r25	; 0x30
    1fce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	69 f7       	brne	.-38     	; 0x1fb2 <LCD_sendCommand+0xc6>
    1fd8:	14 c0       	rjmp	.+40     	; 0x2002 <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fda:	69 a9       	ldd	r22, Y+49	; 0x31
    1fdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1fde:	8b a9       	ldd	r24, Y+51	; 0x33
    1fe0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	98 ab       	std	Y+48, r25	; 0x30
    1fec:	8f a7       	std	Y+47, r24	; 0x2f
    1fee:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff2:	9c a7       	std	Y+44, r25	; 0x2c
    1ff4:	8b a7       	std	Y+43, r24	; 0x2b
    1ff6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <LCD_sendCommand+0x10e>
    1ffe:	9c a7       	std	Y+44, r25	; 0x2c
    2000:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    2002:	a8 e3       	ldi	r26, 0x38	; 56
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e8 e3       	ldi	r30, 0x38	; 56
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	88 60       	ori	r24, 0x08	; 8
    200e:	8c 93       	st	X, r24
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a0 e8       	ldi	r26, 0x80	; 128
    2016:	bf e3       	ldi	r27, 0x3F	; 63
    2018:	8f a3       	std	Y+39, r24	; 0x27
    201a:	98 a7       	std	Y+40, r25	; 0x28
    201c:	a9 a7       	std	Y+41, r26	; 0x29
    201e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2020:	6f a1       	ldd	r22, Y+39	; 0x27
    2022:	78 a5       	ldd	r23, Y+40	; 0x28
    2024:	89 a5       	ldd	r24, Y+41	; 0x29
    2026:	9a a5       	ldd	r25, Y+42	; 0x2a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4a e7       	ldi	r20, 0x7A	; 122
    202e:	53 e4       	ldi	r21, 0x43	; 67
    2030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	8b a3       	std	Y+35, r24	; 0x23
    203a:	9c a3       	std	Y+36, r25	; 0x24
    203c:	ad a3       	std	Y+37, r26	; 0x25
    203e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2040:	6b a1       	ldd	r22, Y+35	; 0x23
    2042:	7c a1       	ldd	r23, Y+36	; 0x24
    2044:	8d a1       	ldd	r24, Y+37	; 0x25
    2046:	9e a1       	ldd	r25, Y+38	; 0x26
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	40 e8       	ldi	r20, 0x80	; 128
    204e:	5f e3       	ldi	r21, 0x3F	; 63
    2050:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2054:	88 23       	and	r24, r24
    2056:	2c f4       	brge	.+10     	; 0x2062 <LCD_sendCommand+0x176>
		__ticks = 1;
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9a a3       	std	Y+34, r25	; 0x22
    205e:	89 a3       	std	Y+33, r24	; 0x21
    2060:	3f c0       	rjmp	.+126    	; 0x20e0 <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    2062:	6b a1       	ldd	r22, Y+35	; 0x23
    2064:	7c a1       	ldd	r23, Y+36	; 0x24
    2066:	8d a1       	ldd	r24, Y+37	; 0x25
    2068:	9e a1       	ldd	r25, Y+38	; 0x26
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	3f ef       	ldi	r19, 0xFF	; 255
    206e:	4f e7       	ldi	r20, 0x7F	; 127
    2070:	57 e4       	ldi	r21, 0x47	; 71
    2072:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2076:	18 16       	cp	r1, r24
    2078:	4c f5       	brge	.+82     	; 0x20cc <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    207a:	6f a1       	ldd	r22, Y+39	; 0x27
    207c:	78 a5       	ldd	r23, Y+40	; 0x28
    207e:	89 a5       	ldd	r24, Y+41	; 0x29
    2080:	9a a5       	ldd	r25, Y+42	; 0x2a
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e2       	ldi	r20, 0x20	; 32
    2088:	51 e4       	ldi	r21, 0x41	; 65
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9a a3       	std	Y+34, r25	; 0x22
    20a0:	89 a3       	std	Y+33, r24	; 0x21
    20a2:	0f c0       	rjmp	.+30     	; 0x20c2 <LCD_sendCommand+0x1d6>
    20a4:	89 e1       	ldi	r24, 0x19	; 25
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	98 a3       	std	Y+32, r25	; 0x20
    20aa:	8f 8f       	std	Y+31, r24	; 0x1f
    20ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20ae:	98 a1       	ldd	r25, Y+32	; 0x20
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_sendCommand+0x1c4>
    20b4:	98 a3       	std	Y+32, r25	; 0x20
    20b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ba:	9a a1       	ldd	r25, Y+34	; 0x22
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	9a a3       	std	Y+34, r25	; 0x22
    20c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c2:	89 a1       	ldd	r24, Y+33	; 0x21
    20c4:	9a a1       	ldd	r25, Y+34	; 0x22
    20c6:	00 97       	sbiw	r24, 0x00	; 0
    20c8:	69 f7       	brne	.-38     	; 0x20a4 <LCD_sendCommand+0x1b8>
    20ca:	14 c0       	rjmp	.+40     	; 0x20f4 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20cc:	6b a1       	ldd	r22, Y+35	; 0x23
    20ce:	7c a1       	ldd	r23, Y+36	; 0x24
    20d0:	8d a1       	ldd	r24, Y+37	; 0x25
    20d2:	9e a1       	ldd	r25, Y+38	; 0x26
    20d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9a a3       	std	Y+34, r25	; 0x22
    20de:	89 a3       	std	Y+33, r24	; 0x21
    20e0:	89 a1       	ldd	r24, Y+33	; 0x21
    20e2:	9a a1       	ldd	r25, Y+34	; 0x22
    20e4:	9e 8f       	std	Y+30, r25	; 0x1e
    20e6:	8d 8f       	std	Y+29, r24	; 0x1d
    20e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <LCD_sendCommand+0x200>
    20f0:	9e 8f       	std	Y+30, r25	; 0x1e
    20f2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = command;
    20f4:	e5 e3       	ldi	r30, 0x35	; 53
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	89 ad       	ldd	r24, Y+57	; 0x39
    20fa:	80 83       	st	Z, r24
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e8       	ldi	r26, 0x80	; 128
    2102:	bf e3       	ldi	r27, 0x3F	; 63
    2104:	89 8f       	std	Y+25, r24	; 0x19
    2106:	9a 8f       	std	Y+26, r25	; 0x1a
    2108:	ab 8f       	std	Y+27, r26	; 0x1b
    210a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210c:	69 8d       	ldd	r22, Y+25	; 0x19
    210e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2110:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2112:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	4a e7       	ldi	r20, 0x7A	; 122
    211a:	53 e4       	ldi	r21, 0x43	; 67
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	8d 8b       	std	Y+21, r24	; 0x15
    2126:	9e 8b       	std	Y+22, r25	; 0x16
    2128:	af 8b       	std	Y+23, r26	; 0x17
    212a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    212c:	6d 89       	ldd	r22, Y+21	; 0x15
    212e:	7e 89       	ldd	r23, Y+22	; 0x16
    2130:	8f 89       	ldd	r24, Y+23	; 0x17
    2132:	98 8d       	ldd	r25, Y+24	; 0x18
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	2c f4       	brge	.+10     	; 0x214e <LCD_sendCommand+0x262>
		__ticks = 1;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9c 8b       	std	Y+20, r25	; 0x14
    214a:	8b 8b       	std	Y+19, r24	; 0x13
    214c:	3f c0       	rjmp	.+126    	; 0x21cc <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    214e:	6d 89       	ldd	r22, Y+21	; 0x15
    2150:	7e 89       	ldd	r23, Y+22	; 0x16
    2152:	8f 89       	ldd	r24, Y+23	; 0x17
    2154:	98 8d       	ldd	r25, Y+24	; 0x18
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	3f ef       	ldi	r19, 0xFF	; 255
    215a:	4f e7       	ldi	r20, 0x7F	; 127
    215c:	57 e4       	ldi	r21, 0x47	; 71
    215e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2162:	18 16       	cp	r1, r24
    2164:	4c f5       	brge	.+82     	; 0x21b8 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2166:	69 8d       	ldd	r22, Y+25	; 0x19
    2168:	7a 8d       	ldd	r23, Y+26	; 0x1a
    216a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e2       	ldi	r20, 0x20	; 32
    2174:	51 e4       	ldi	r21, 0x41	; 65
    2176:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217a:	dc 01       	movw	r26, r24
    217c:	cb 01       	movw	r24, r22
    217e:	bc 01       	movw	r22, r24
    2180:	cd 01       	movw	r24, r26
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9c 8b       	std	Y+20, r25	; 0x14
    218c:	8b 8b       	std	Y+19, r24	; 0x13
    218e:	0f c0       	rjmp	.+30     	; 0x21ae <LCD_sendCommand+0x2c2>
    2190:	89 e1       	ldi	r24, 0x19	; 25
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9a 8b       	std	Y+18, r25	; 0x12
    2196:	89 8b       	std	Y+17, r24	; 0x11
    2198:	89 89       	ldd	r24, Y+17	; 0x11
    219a:	9a 89       	ldd	r25, Y+18	; 0x12
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_sendCommand+0x2b0>
    21a0:	9a 8b       	std	Y+18, r25	; 0x12
    21a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21a4:	8b 89       	ldd	r24, Y+19	; 0x13
    21a6:	9c 89       	ldd	r25, Y+20	; 0x14
    21a8:	01 97       	sbiw	r24, 0x01	; 1
    21aa:	9c 8b       	std	Y+20, r25	; 0x14
    21ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ae:	8b 89       	ldd	r24, Y+19	; 0x13
    21b0:	9c 89       	ldd	r25, Y+20	; 0x14
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	69 f7       	brne	.-38     	; 0x2190 <LCD_sendCommand+0x2a4>
    21b6:	14 c0       	rjmp	.+40     	; 0x21e0 <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ba:	7e 89       	ldd	r23, Y+22	; 0x16
    21bc:	8f 89       	ldd	r24, Y+23	; 0x17
    21be:	98 8d       	ldd	r25, Y+24	; 0x18
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	9c 8b       	std	Y+20, r25	; 0x14
    21ca:	8b 8b       	std	Y+19, r24	; 0x13
    21cc:	8b 89       	ldd	r24, Y+19	; 0x13
    21ce:	9c 89       	ldd	r25, Y+20	; 0x14
    21d0:	98 8b       	std	Y+16, r25	; 0x10
    21d2:	8f 87       	std	Y+15, r24	; 0x0f
    21d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21d6:	98 89       	ldd	r25, Y+16	; 0x10
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <LCD_sendCommand+0x2ec>
    21dc:	98 8b       	std	Y+16, r25	; 0x10
    21de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    21e0:	a8 e3       	ldi	r26, 0x38	; 56
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e8 e3       	ldi	r30, 0x38	; 56
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	87 7f       	andi	r24, 0xF7	; 247
    21ec:	8c 93       	st	X, r24
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	a0 e8       	ldi	r26, 0x80	; 128
    21f4:	bf e3       	ldi	r27, 0x3F	; 63
    21f6:	8b 87       	std	Y+11, r24	; 0x0b
    21f8:	9c 87       	std	Y+12, r25	; 0x0c
    21fa:	ad 87       	std	Y+13, r26	; 0x0d
    21fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2200:	7c 85       	ldd	r23, Y+12	; 0x0c
    2202:	8d 85       	ldd	r24, Y+13	; 0x0d
    2204:	9e 85       	ldd	r25, Y+14	; 0x0e
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	4a e7       	ldi	r20, 0x7A	; 122
    220c:	53 e4       	ldi	r21, 0x43	; 67
    220e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	8f 83       	std	Y+7, r24	; 0x07
    2218:	98 87       	std	Y+8, r25	; 0x08
    221a:	a9 87       	std	Y+9, r26	; 0x09
    221c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    221e:	6f 81       	ldd	r22, Y+7	; 0x07
    2220:	78 85       	ldd	r23, Y+8	; 0x08
    2222:	89 85       	ldd	r24, Y+9	; 0x09
    2224:	9a 85       	ldd	r25, Y+10	; 0x0a
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e8       	ldi	r20, 0x80	; 128
    222c:	5f e3       	ldi	r21, 0x3F	; 63
    222e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2232:	88 23       	and	r24, r24
    2234:	2c f4       	brge	.+10     	; 0x2240 <LCD_sendCommand+0x354>
		__ticks = 1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
    223e:	3f c0       	rjmp	.+126    	; 0x22be <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2240:	6f 81       	ldd	r22, Y+7	; 0x07
    2242:	78 85       	ldd	r23, Y+8	; 0x08
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	3f ef       	ldi	r19, 0xFF	; 255
    224c:	4f e7       	ldi	r20, 0x7F	; 127
    224e:	57 e4       	ldi	r21, 0x47	; 71
    2250:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2254:	18 16       	cp	r1, r24
    2256:	4c f5       	brge	.+82     	; 0x22aa <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2258:	6b 85       	ldd	r22, Y+11	; 0x0b
    225a:	7c 85       	ldd	r23, Y+12	; 0x0c
    225c:	8d 85       	ldd	r24, Y+13	; 0x0d
    225e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	40 e2       	ldi	r20, 0x20	; 32
    2266:	51 e4       	ldi	r21, 0x41	; 65
    2268:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226c:	dc 01       	movw	r26, r24
    226e:	cb 01       	movw	r24, r22
    2270:	bc 01       	movw	r22, r24
    2272:	cd 01       	movw	r24, r26
    2274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
    2280:	0f c0       	rjmp	.+30     	; 0x22a0 <LCD_sendCommand+0x3b4>
    2282:	89 e1       	ldi	r24, 0x19	; 25
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	8b 83       	std	Y+3, r24	; 0x03
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_sendCommand+0x3a2>
    2292:	9c 83       	std	Y+4, r25	; 0x04
    2294:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	9e 81       	ldd	r25, Y+6	; 0x06
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	9e 83       	std	Y+6, r25	; 0x06
    229e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	69 f7       	brne	.-38     	; 0x2282 <LCD_sendCommand+0x396>
    22a8:	14 c0       	rjmp	.+40     	; 0x22d2 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22aa:	6f 81       	ldd	r22, Y+7	; 0x07
    22ac:	78 85       	ldd	r23, Y+8	; 0x08
    22ae:	89 85       	ldd	r24, Y+9	; 0x09
    22b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	9e 83       	std	Y+6, r25	; 0x06
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	8d 81       	ldd	r24, Y+5	; 0x05
    22c0:	9e 81       	ldd	r25, Y+6	; 0x06
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ca:	01 97       	sbiw	r24, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <LCD_sendCommand+0x3de>
    22ce:	9a 83       	std	Y+2, r25	; 0x02
    22d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    22d2:	e9 96       	adiw	r28, 0x39	; 57
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	e9 97       	sbiw	r28, 0x39	; 57
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS);
    22fa:	a8 e3       	ldi	r26, 0x38	; 56
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e8 e3       	ldi	r30, 0x38	; 56
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	82 60       	ori	r24, 0x02	; 2
    2306:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    2308:	a8 e3       	ldi	r26, 0x38	; 56
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e8 e3       	ldi	r30, 0x38	; 56
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	8b 7f       	andi	r24, 0xFB	; 251
    2314:	8c 93       	st	X, r24
    2316:	80 e0       	ldi	r24, 0x00	; 0
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	a0 e8       	ldi	r26, 0x80	; 128
    231c:	bf e3       	ldi	r27, 0x3F	; 63
    231e:	8d ab       	std	Y+53, r24	; 0x35
    2320:	9e ab       	std	Y+54, r25	; 0x36
    2322:	af ab       	std	Y+55, r26	; 0x37
    2324:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2326:	6d a9       	ldd	r22, Y+53	; 0x35
    2328:	7e a9       	ldd	r23, Y+54	; 0x36
    232a:	8f a9       	ldd	r24, Y+55	; 0x37
    232c:	98 ad       	ldd	r25, Y+56	; 0x38
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	4a e7       	ldi	r20, 0x7A	; 122
    2334:	53 e4       	ldi	r21, 0x43	; 67
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	89 ab       	std	Y+49, r24	; 0x31
    2340:	9a ab       	std	Y+50, r25	; 0x32
    2342:	ab ab       	std	Y+51, r26	; 0x33
    2344:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2346:	69 a9       	ldd	r22, Y+49	; 0x31
    2348:	7a a9       	ldd	r23, Y+50	; 0x32
    234a:	8b a9       	ldd	r24, Y+51	; 0x33
    234c:	9c a9       	ldd	r25, Y+52	; 0x34
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235a:	88 23       	and	r24, r24
    235c:	2c f4       	brge	.+10     	; 0x2368 <LCD_displayCharacter+0x84>
		__ticks = 1;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	98 ab       	std	Y+48, r25	; 0x30
    2364:	8f a7       	std	Y+47, r24	; 0x2f
    2366:	3f c0       	rjmp	.+126    	; 0x23e6 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    2368:	69 a9       	ldd	r22, Y+49	; 0x31
    236a:	7a a9       	ldd	r23, Y+50	; 0x32
    236c:	8b a9       	ldd	r24, Y+51	; 0x33
    236e:	9c a9       	ldd	r25, Y+52	; 0x34
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	3f ef       	ldi	r19, 0xFF	; 255
    2374:	4f e7       	ldi	r20, 0x7F	; 127
    2376:	57 e4       	ldi	r21, 0x47	; 71
    2378:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237c:	18 16       	cp	r1, r24
    237e:	4c f5       	brge	.+82     	; 0x23d2 <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2380:	6d a9       	ldd	r22, Y+53	; 0x35
    2382:	7e a9       	ldd	r23, Y+54	; 0x36
    2384:	8f a9       	ldd	r24, Y+55	; 0x37
    2386:	98 ad       	ldd	r25, Y+56	; 0x38
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e2       	ldi	r20, 0x20	; 32
    238e:	51 e4       	ldi	r21, 0x41	; 65
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	bc 01       	movw	r22, r24
    239a:	cd 01       	movw	r24, r26
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	98 ab       	std	Y+48, r25	; 0x30
    23a6:	8f a7       	std	Y+47, r24	; 0x2f
    23a8:	0f c0       	rjmp	.+30     	; 0x23c8 <LCD_displayCharacter+0xe4>
    23aa:	89 e1       	ldi	r24, 0x19	; 25
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	9e a7       	std	Y+46, r25	; 0x2e
    23b0:	8d a7       	std	Y+45, r24	; 0x2d
    23b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    23b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <LCD_displayCharacter+0xd2>
    23ba:	9e a7       	std	Y+46, r25	; 0x2e
    23bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23be:	8f a5       	ldd	r24, Y+47	; 0x2f
    23c0:	98 a9       	ldd	r25, Y+48	; 0x30
    23c2:	01 97       	sbiw	r24, 0x01	; 1
    23c4:	98 ab       	std	Y+48, r25	; 0x30
    23c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ca:	98 a9       	ldd	r25, Y+48	; 0x30
    23cc:	00 97       	sbiw	r24, 0x00	; 0
    23ce:	69 f7       	brne	.-38     	; 0x23aa <LCD_displayCharacter+0xc6>
    23d0:	14 c0       	rjmp	.+40     	; 0x23fa <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d2:	69 a9       	ldd	r22, Y+49	; 0x31
    23d4:	7a a9       	ldd	r23, Y+50	; 0x32
    23d6:	8b a9       	ldd	r24, Y+51	; 0x33
    23d8:	9c a9       	ldd	r25, Y+52	; 0x34
    23da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	98 ab       	std	Y+48, r25	; 0x30
    23e4:	8f a7       	std	Y+47, r24	; 0x2f
    23e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e8:	98 a9       	ldd	r25, Y+48	; 0x30
    23ea:	9c a7       	std	Y+44, r25	; 0x2c
    23ec:	8b a7       	std	Y+43, r24	; 0x2b
    23ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	f1 f7       	brne	.-4      	; 0x23f2 <LCD_displayCharacter+0x10e>
    23f6:	9c a7       	std	Y+44, r25	; 0x2c
    23f8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);
    23fa:	a8 e3       	ldi	r26, 0x38	; 56
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e8 e3       	ldi	r30, 0x38	; 56
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	88 60       	ori	r24, 0x08	; 8
    2406:	8c 93       	st	X, r24
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a0 e8       	ldi	r26, 0x80	; 128
    240e:	bf e3       	ldi	r27, 0x3F	; 63
    2410:	8f a3       	std	Y+39, r24	; 0x27
    2412:	98 a7       	std	Y+40, r25	; 0x28
    2414:	a9 a7       	std	Y+41, r26	; 0x29
    2416:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2418:	6f a1       	ldd	r22, Y+39	; 0x27
    241a:	78 a5       	ldd	r23, Y+40	; 0x28
    241c:	89 a5       	ldd	r24, Y+41	; 0x29
    241e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	4a e7       	ldi	r20, 0x7A	; 122
    2426:	53 e4       	ldi	r21, 0x43	; 67
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	8b a3       	std	Y+35, r24	; 0x23
    2432:	9c a3       	std	Y+36, r25	; 0x24
    2434:	ad a3       	std	Y+37, r26	; 0x25
    2436:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2438:	6b a1       	ldd	r22, Y+35	; 0x23
    243a:	7c a1       	ldd	r23, Y+36	; 0x24
    243c:	8d a1       	ldd	r24, Y+37	; 0x25
    243e:	9e a1       	ldd	r25, Y+38	; 0x26
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e8       	ldi	r20, 0x80	; 128
    2446:	5f e3       	ldi	r21, 0x3F	; 63
    2448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    244c:	88 23       	and	r24, r24
    244e:	2c f4       	brge	.+10     	; 0x245a <LCD_displayCharacter+0x176>
		__ticks = 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9a a3       	std	Y+34, r25	; 0x22
    2456:	89 a3       	std	Y+33, r24	; 0x21
    2458:	3f c0       	rjmp	.+126    	; 0x24d8 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    245a:	6b a1       	ldd	r22, Y+35	; 0x23
    245c:	7c a1       	ldd	r23, Y+36	; 0x24
    245e:	8d a1       	ldd	r24, Y+37	; 0x25
    2460:	9e a1       	ldd	r25, Y+38	; 0x26
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	3f ef       	ldi	r19, 0xFF	; 255
    2466:	4f e7       	ldi	r20, 0x7F	; 127
    2468:	57 e4       	ldi	r21, 0x47	; 71
    246a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    246e:	18 16       	cp	r1, r24
    2470:	4c f5       	brge	.+82     	; 0x24c4 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2472:	6f a1       	ldd	r22, Y+39	; 0x27
    2474:	78 a5       	ldd	r23, Y+40	; 0x28
    2476:	89 a5       	ldd	r24, Y+41	; 0x29
    2478:	9a a5       	ldd	r25, Y+42	; 0x2a
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e2       	ldi	r20, 0x20	; 32
    2480:	51 e4       	ldi	r21, 0x41	; 65
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9a a3       	std	Y+34, r25	; 0x22
    2498:	89 a3       	std	Y+33, r24	; 0x21
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <LCD_displayCharacter+0x1d6>
    249c:	89 e1       	ldi	r24, 0x19	; 25
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	98 a3       	std	Y+32, r25	; 0x20
    24a2:	8f 8f       	std	Y+31, r24	; 0x1f
    24a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24a6:	98 a1       	ldd	r25, Y+32	; 0x20
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	f1 f7       	brne	.-4      	; 0x24a8 <LCD_displayCharacter+0x1c4>
    24ac:	98 a3       	std	Y+32, r25	; 0x20
    24ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b0:	89 a1       	ldd	r24, Y+33	; 0x21
    24b2:	9a a1       	ldd	r25, Y+34	; 0x22
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	9a a3       	std	Y+34, r25	; 0x22
    24b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ba:	89 a1       	ldd	r24, Y+33	; 0x21
    24bc:	9a a1       	ldd	r25, Y+34	; 0x22
    24be:	00 97       	sbiw	r24, 0x00	; 0
    24c0:	69 f7       	brne	.-38     	; 0x249c <LCD_displayCharacter+0x1b8>
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c4:	6b a1       	ldd	r22, Y+35	; 0x23
    24c6:	7c a1       	ldd	r23, Y+36	; 0x24
    24c8:	8d a1       	ldd	r24, Y+37	; 0x25
    24ca:	9e a1       	ldd	r25, Y+38	; 0x26
    24cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9a a3       	std	Y+34, r25	; 0x22
    24d6:	89 a3       	std	Y+33, r24	; 0x21
    24d8:	89 a1       	ldd	r24, Y+33	; 0x21
    24da:	9a a1       	ldd	r25, Y+34	; 0x22
    24dc:	9e 8f       	std	Y+30, r25	; 0x1e
    24de:	8d 8f       	std	Y+29, r24	; 0x1d
    24e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_displayCharacter+0x200>
    24e8:	9e 8f       	std	Y+30, r25	; 0x1e
    24ea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = data;
    24ec:	e5 e3       	ldi	r30, 0x35	; 53
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	89 ad       	ldd	r24, Y+57	; 0x39
    24f2:	80 83       	st	Z, r24
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	a0 e8       	ldi	r26, 0x80	; 128
    24fa:	bf e3       	ldi	r27, 0x3F	; 63
    24fc:	89 8f       	std	Y+25, r24	; 0x19
    24fe:	9a 8f       	std	Y+26, r25	; 0x1a
    2500:	ab 8f       	std	Y+27, r26	; 0x1b
    2502:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2504:	69 8d       	ldd	r22, Y+25	; 0x19
    2506:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2508:	8b 8d       	ldd	r24, Y+27	; 0x1b
    250a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	4a e7       	ldi	r20, 0x7A	; 122
    2512:	53 e4       	ldi	r21, 0x43	; 67
    2514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	8d 8b       	std	Y+21, r24	; 0x15
    251e:	9e 8b       	std	Y+22, r25	; 0x16
    2520:	af 8b       	std	Y+23, r26	; 0x17
    2522:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2524:	6d 89       	ldd	r22, Y+21	; 0x15
    2526:	7e 89       	ldd	r23, Y+22	; 0x16
    2528:	8f 89       	ldd	r24, Y+23	; 0x17
    252a:	98 8d       	ldd	r25, Y+24	; 0x18
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e8       	ldi	r20, 0x80	; 128
    2532:	5f e3       	ldi	r21, 0x3F	; 63
    2534:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2538:	88 23       	and	r24, r24
    253a:	2c f4       	brge	.+10     	; 0x2546 <LCD_displayCharacter+0x262>
		__ticks = 1;
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9c 8b       	std	Y+20, r25	; 0x14
    2542:	8b 8b       	std	Y+19, r24	; 0x13
    2544:	3f c0       	rjmp	.+126    	; 0x25c4 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    2546:	6d 89       	ldd	r22, Y+21	; 0x15
    2548:	7e 89       	ldd	r23, Y+22	; 0x16
    254a:	8f 89       	ldd	r24, Y+23	; 0x17
    254c:	98 8d       	ldd	r25, Y+24	; 0x18
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	3f ef       	ldi	r19, 0xFF	; 255
    2552:	4f e7       	ldi	r20, 0x7F	; 127
    2554:	57 e4       	ldi	r21, 0x47	; 71
    2556:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    255a:	18 16       	cp	r1, r24
    255c:	4c f5       	brge	.+82     	; 0x25b0 <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255e:	69 8d       	ldd	r22, Y+25	; 0x19
    2560:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2562:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2564:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	9c 8b       	std	Y+20, r25	; 0x14
    2584:	8b 8b       	std	Y+19, r24	; 0x13
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <LCD_displayCharacter+0x2c2>
    2588:	89 e1       	ldi	r24, 0x19	; 25
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	9a 8b       	std	Y+18, r25	; 0x12
    258e:	89 8b       	std	Y+17, r24	; 0x11
    2590:	89 89       	ldd	r24, Y+17	; 0x11
    2592:	9a 89       	ldd	r25, Y+18	; 0x12
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <LCD_displayCharacter+0x2b0>
    2598:	9a 8b       	std	Y+18, r25	; 0x12
    259a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259c:	8b 89       	ldd	r24, Y+19	; 0x13
    259e:	9c 89       	ldd	r25, Y+20	; 0x14
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	9c 8b       	std	Y+20, r25	; 0x14
    25a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a6:	8b 89       	ldd	r24, Y+19	; 0x13
    25a8:	9c 89       	ldd	r25, Y+20	; 0x14
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	69 f7       	brne	.-38     	; 0x2588 <LCD_displayCharacter+0x2a4>
    25ae:	14 c0       	rjmp	.+40     	; 0x25d8 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	6d 89       	ldd	r22, Y+21	; 0x15
    25b2:	7e 89       	ldd	r23, Y+22	; 0x16
    25b4:	8f 89       	ldd	r24, Y+23	; 0x17
    25b6:	98 8d       	ldd	r25, Y+24	; 0x18
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9c 8b       	std	Y+20, r25	; 0x14
    25c2:	8b 8b       	std	Y+19, r24	; 0x13
    25c4:	8b 89       	ldd	r24, Y+19	; 0x13
    25c6:	9c 89       	ldd	r25, Y+20	; 0x14
    25c8:	98 8b       	std	Y+16, r25	; 0x10
    25ca:	8f 87       	std	Y+15, r24	; 0x0f
    25cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ce:	98 89       	ldd	r25, Y+16	; 0x10
    25d0:	01 97       	sbiw	r24, 0x01	; 1
    25d2:	f1 f7       	brne	.-4      	; 0x25d0 <LCD_displayCharacter+0x2ec>
    25d4:	98 8b       	std	Y+16, r25	; 0x10
    25d6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);
    25d8:	a8 e3       	ldi	r26, 0x38	; 56
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e8 e3       	ldi	r30, 0x38	; 56
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	87 7f       	andi	r24, 0xF7	; 247
    25e4:	8c 93       	st	X, r24
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	a0 e8       	ldi	r26, 0x80	; 128
    25ec:	bf e3       	ldi	r27, 0x3F	; 63
    25ee:	8b 87       	std	Y+11, r24	; 0x0b
    25f0:	9c 87       	std	Y+12, r25	; 0x0c
    25f2:	ad 87       	std	Y+13, r26	; 0x0d
    25f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    25fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4a e7       	ldi	r20, 0x7A	; 122
    2604:	53 e4       	ldi	r21, 0x43	; 67
    2606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260a:	dc 01       	movw	r26, r24
    260c:	cb 01       	movw	r24, r22
    260e:	8f 83       	std	Y+7, r24	; 0x07
    2610:	98 87       	std	Y+8, r25	; 0x08
    2612:	a9 87       	std	Y+9, r26	; 0x09
    2614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e8       	ldi	r20, 0x80	; 128
    2624:	5f e3       	ldi	r21, 0x3F	; 63
    2626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    262a:	88 23       	and	r24, r24
    262c:	2c f4       	brge	.+10     	; 0x2638 <LCD_displayCharacter+0x354>
		__ticks = 1;
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	9e 83       	std	Y+6, r25	; 0x06
    2634:	8d 83       	std	Y+5, r24	; 0x05
    2636:	3f c0       	rjmp	.+126    	; 0x26b6 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2638:	6f 81       	ldd	r22, Y+7	; 0x07
    263a:	78 85       	ldd	r23, Y+8	; 0x08
    263c:	89 85       	ldd	r24, Y+9	; 0x09
    263e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	3f ef       	ldi	r19, 0xFF	; 255
    2644:	4f e7       	ldi	r20, 0x7F	; 127
    2646:	57 e4       	ldi	r21, 0x47	; 71
    2648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    264c:	18 16       	cp	r1, r24
    264e:	4c f5       	brge	.+82     	; 0x26a2 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	6b 85       	ldd	r22, Y+11	; 0x0b
    2652:	7c 85       	ldd	r23, Y+12	; 0x0c
    2654:	8d 85       	ldd	r24, Y+13	; 0x0d
    2656:	9e 85       	ldd	r25, Y+14	; 0x0e
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e2       	ldi	r20, 0x20	; 32
    265e:	51 e4       	ldi	r21, 0x41	; 65
    2660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	bc 01       	movw	r22, r24
    266a:	cd 01       	movw	r24, r26
    266c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	9e 83       	std	Y+6, r25	; 0x06
    2676:	8d 83       	std	Y+5, r24	; 0x05
    2678:	0f c0       	rjmp	.+30     	; 0x2698 <LCD_displayCharacter+0x3b4>
    267a:	89 e1       	ldi	r24, 0x19	; 25
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	9c 83       	std	Y+4, r25	; 0x04
    2680:	8b 83       	std	Y+3, r24	; 0x03
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	01 97       	sbiw	r24, 0x01	; 1
    2688:	f1 f7       	brne	.-4      	; 0x2686 <LCD_displayCharacter+0x3a2>
    268a:	9c 83       	std	Y+4, r25	; 0x04
    268c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	9e 83       	std	Y+6, r25	; 0x06
    2696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2698:	8d 81       	ldd	r24, Y+5	; 0x05
    269a:	9e 81       	ldd	r25, Y+6	; 0x06
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	69 f7       	brne	.-38     	; 0x267a <LCD_displayCharacter+0x396>
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	6f 81       	ldd	r22, Y+7	; 0x07
    26a4:	78 85       	ldd	r23, Y+8	; 0x08
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	9a 83       	std	Y+2, r25	; 0x02
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	f1 f7       	brne	.-4      	; 0x26c2 <LCD_displayCharacter+0x3de>
    26c6:	9a 83       	std	Y+2, r25	; 0x02
    26c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    26ca:	e9 96       	adiw	r28, 0x39	; 57
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <LCD_displayString+0x6>
    26e2:	0f 92       	push	r0
    26e4:	cd b7       	in	r28, 0x3d	; 61
    26e6:	de b7       	in	r29, 0x3e	; 62
    26e8:	9b 83       	std	Y+3, r25	; 0x03
    26ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    26ec:	19 82       	std	Y+1, r1	; 0x01
    26ee:	0e c0       	rjmp	.+28     	; 0x270c <LCD_displayString+0x30>
	while(Str[i]!='\0')
	{
		LCD_displayCharacter(Str[i]);
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	28 2f       	mov	r18, r24
    26f4:	30 e0       	ldi	r19, 0x00	; 0
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	9b 81       	ldd	r25, Y+3	; 0x03
    26fa:	fc 01       	movw	r30, r24
    26fc:	e2 0f       	add	r30, r18
    26fe:	f3 1f       	adc	r31, r19
    2700:	80 81       	ld	r24, Z
    2702:	0e 94 72 11 	call	0x22e4	; 0x22e4 <LCD_displayCharacter>
		i++;
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	8f 5f       	subi	r24, 0xFF	; 255
    270a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i=0;
	while(Str[i]!='\0')
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	9b 81       	ldd	r25, Y+3	; 0x03
    2716:	fc 01       	movw	r30, r24
    2718:	e2 0f       	add	r30, r18
    271a:	f3 1f       	adc	r31, r19
    271c:	80 81       	ld	r24, Z
    271e:	88 23       	and	r24, r24
    2720:	39 f7       	brne	.-50     	; 0x26f0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	cd b7       	in	r28, 0x3d	; 61
    2734:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_DISPLAY);
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_sendCommand>
}
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	00 d0       	rcall	.+0      	; 0x2748 <LCD_displayStringRowColumn+0x6>
    2748:	00 d0       	rcall	.+0      	; 0x274a <LCD_displayStringRowColumn+0x8>
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	89 83       	std	Y+1, r24	; 0x01
    2750:	6a 83       	std	Y+2, r22	; 0x02
    2752:	5c 83       	std	Y+4, r21	; 0x04
    2754:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col);
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	6a 81       	ldd	r22, Y+2	; 0x02
    275a:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_goToRowColumn>
	LCD_displayString(Str);
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04
    2762:	0e 94 6e 13 	call	0x26dc	; 0x26dc <LCD_displayString>
}
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <LCD_goToRowColumn>:
void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	00 d0       	rcall	.+0      	; 0x277a <LCD_goToRowColumn+0x6>
    277a:	00 d0       	rcall	.+0      	; 0x277c <LCD_goToRowColumn+0x8>
    277c:	0f 92       	push	r0
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	8a 83       	std	Y+2, r24	; 0x02
    2784:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	28 2f       	mov	r18, r24
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	3d 83       	std	Y+5, r19	; 0x05
    278e:	2c 83       	std	Y+4, r18	; 0x04
    2790:	8c 81       	ldd	r24, Y+4	; 0x04
    2792:	9d 81       	ldd	r25, Y+5	; 0x05
    2794:	81 30       	cpi	r24, 0x01	; 1
    2796:	91 05       	cpc	r25, r1
    2798:	c1 f0       	breq	.+48     	; 0x27ca <LCD_goToRowColumn+0x56>
    279a:	2c 81       	ldd	r18, Y+4	; 0x04
    279c:	3d 81       	ldd	r19, Y+5	; 0x05
    279e:	22 30       	cpi	r18, 0x02	; 2
    27a0:	31 05       	cpc	r19, r1
    27a2:	2c f4       	brge	.+10     	; 0x27ae <LCD_goToRowColumn+0x3a>
    27a4:	8c 81       	ldd	r24, Y+4	; 0x04
    27a6:	9d 81       	ldd	r25, Y+5	; 0x05
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	61 f0       	breq	.+24     	; 0x27c4 <LCD_goToRowColumn+0x50>
    27ac:	19 c0       	rjmp	.+50     	; 0x27e0 <LCD_goToRowColumn+0x6c>
    27ae:	2c 81       	ldd	r18, Y+4	; 0x04
    27b0:	3d 81       	ldd	r19, Y+5	; 0x05
    27b2:	22 30       	cpi	r18, 0x02	; 2
    27b4:	31 05       	cpc	r19, r1
    27b6:	69 f0       	breq	.+26     	; 0x27d2 <LCD_goToRowColumn+0x5e>
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	9d 81       	ldd	r25, Y+5	; 0x05
    27bc:	83 30       	cpi	r24, 0x03	; 3
    27be:	91 05       	cpc	r25, r1
    27c0:	61 f0       	breq	.+24     	; 0x27da <LCD_goToRowColumn+0x66>
    27c2:	0e c0       	rjmp	.+28     	; 0x27e0 <LCD_goToRowColumn+0x6c>
	{
	case 0 :
		address=col;
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	0b c0       	rjmp	.+22     	; 0x27e0 <LCD_goToRowColumn+0x6c>
		break;
	case 1 :
		address=col+0x40;
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	80 5c       	subi	r24, 0xC0	; 192
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	07 c0       	rjmp	.+14     	; 0x27e0 <LCD_goToRowColumn+0x6c>
		break;
	case 2 :
		address=col+0x10;
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	80 5f       	subi	r24, 0xF0	; 240
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	03 c0       	rjmp	.+6      	; 0x27e0 <LCD_goToRowColumn+0x6c>
		break;
	case 3 :
		address=col+0x50;
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	80 5b       	subi	r24, 0xB0	; 176
    27de:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
		LCD_sendCommand(address|SET_CURSOR_LOCATION);
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	80 68       	ori	r24, 0x80	; 128
    27e4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <LCD_sendCommand>

}
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	62 97       	sbiw	r28, 0x12	; 18
    2802:	0f b6       	in	r0, 0x3f	; 63
    2804:	f8 94       	cli
    2806:	de bf       	out	0x3e, r29	; 62
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	cd bf       	out	0x3d, r28	; 61
    280c:	9a 8b       	std	Y+18, r25	; 0x12
    280e:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    2810:	89 89       	ldd	r24, Y+17	; 0x11
    2812:	9a 89       	ldd	r25, Y+18	; 0x12
    2814:	9e 01       	movw	r18, r28
    2816:	2f 5f       	subi	r18, 0xFF	; 255
    2818:	3f 4f       	sbci	r19, 0xFF	; 255
    281a:	b9 01       	movw	r22, r18
    281c:	4a e0       	ldi	r20, 0x0A	; 10
    281e:	50 e0       	ldi	r21, 0x00	; 0
    2820:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <itoa>
	LCD_displayString(buff);
    2824:	ce 01       	movw	r24, r28
    2826:	01 96       	adiw	r24, 0x01	; 1
    2828:	0e 94 6e 13 	call	0x26dc	; 0x26dc <LCD_displayString>
}
    282c:	62 96       	adiw	r28, 0x12	; 18
    282e:	0f b6       	in	r0, 0x3f	; 63
    2830:	f8 94       	cli
    2832:	de bf       	out	0x3e, r29	; 62
    2834:	0f be       	out	0x3f, r0	; 63
    2836:	cd bf       	out	0x3d, r28	; 61
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <__vector_6>:
}
#endif

#ifdef COMP1A
ISR(TIMER1_COMPA_vect)
{
    283e:	1f 92       	push	r1
    2840:	0f 92       	push	r0
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	0f 92       	push	r0
    2846:	11 24       	eor	r1, r1
    2848:	2f 93       	push	r18
    284a:	3f 93       	push	r19
    284c:	4f 93       	push	r20
    284e:	5f 93       	push	r21
    2850:	6f 93       	push	r22
    2852:	7f 93       	push	r23
    2854:	8f 93       	push	r24
    2856:	9f 93       	push	r25
    2858:	af 93       	push	r26
    285a:	bf 93       	push	r27
    285c:	ef 93       	push	r30
    285e:	ff 93       	push	r31
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	cd b7       	in	r28, 0x3d	; 61
    2866:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackTimer1 != NULL_PTR)
    2868:	80 91 fe 00 	lds	r24, 0x00FE
    286c:	90 91 ff 00 	lds	r25, 0x00FF
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	29 f0       	breq	.+10     	; 0x287e <__vector_6+0x40>
	{
		(*g_callBackTimer1)();
    2874:	e0 91 fe 00 	lds	r30, 0x00FE
    2878:	f0 91 ff 00 	lds	r31, 0x00FF
    287c:	09 95       	icall
	}
}
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	ff 91       	pop	r31
    2884:	ef 91       	pop	r30
    2886:	bf 91       	pop	r27
    2888:	af 91       	pop	r26
    288a:	9f 91       	pop	r25
    288c:	8f 91       	pop	r24
    288e:	7f 91       	pop	r23
    2890:	6f 91       	pop	r22
    2892:	5f 91       	pop	r21
    2894:	4f 91       	pop	r20
    2896:	3f 91       	pop	r19
    2898:	2f 91       	pop	r18
    289a:	0f 90       	pop	r0
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	0f 90       	pop	r0
    28a0:	1f 90       	pop	r1
    28a2:	18 95       	reti

000028a4 <timer1_init>:
/******************************************************************************************************
 * 											FUNCTION DIFINITION
 *****************************************************************************************************/

void timer1_init(timer1Config * timerConfig , uint16 initialValue , uint16 compareValue )
{
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <timer1_init+0x6>
    28aa:	00 d0       	rcall	.+0      	; 0x28ac <timer1_init+0x8>
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <timer1_init+0xa>
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	89 83       	std	Y+1, r24	; 0x01
    28b6:	7c 83       	std	Y+4, r23	; 0x04
    28b8:	6b 83       	std	Y+3, r22	; 0x03
    28ba:	5e 83       	std	Y+6, r21	; 0x06
    28bc:	4d 83       	std	Y+5, r20	; 0x05
	TCCR1A = (TCCR1A & 0x0f) | ((timerConfig ->compareMode) << 4 ); /* masking last 4 bits of TIMER1A control register */
    28be:	af e4       	ldi	r26, 0x4F	; 79
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	ef e4       	ldi	r30, 0x4F	; 79
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	28 2f       	mov	r18, r24
    28ca:	2f 70       	andi	r18, 0x0F	; 15
    28cc:	e9 81       	ldd	r30, Y+1	; 0x01
    28ce:	fa 81       	ldd	r31, Y+2	; 0x02
    28d0:	81 81       	ldd	r24, Z+1	; 0x01
    28d2:	88 2f       	mov	r24, r24
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	82 95       	swap	r24
    28d8:	92 95       	swap	r25
    28da:	90 7f       	andi	r25, 0xF0	; 240
    28dc:	98 27       	eor	r25, r24
    28de:	80 7f       	andi	r24, 0xF0	; 240
    28e0:	98 27       	eor	r25, r24
    28e2:	82 2b       	or	r24, r18
    28e4:	8c 93       	st	X, r24

#ifndef PWM
	/* non_pwm mode */
	SET_BIT(TCCR1A , FOC1A);
    28e6:	af e4       	ldi	r26, 0x4F	; 79
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	ef e4       	ldi	r30, 0x4F	; 79
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	88 60       	ori	r24, 0x08	; 8
    28f2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A , FOC1A);
    28f4:	af e4       	ldi	r26, 0x4F	; 79
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	ef e4       	ldi	r30, 0x4F	; 79
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	88 60       	ori	r24, 0x08	; 8
    2900:	8c 93       	st	X, r24
#endif

	/* masking first 2 bits of TIMER1A control register with the first 2 bits of timer1 waveform mode */
	TCCR1A = (TCCR1A & 0xFC) | ((timerConfig -> mode) & 0x03);
    2902:	af e4       	ldi	r26, 0x4F	; 79
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	ef e4       	ldi	r30, 0x4F	; 79
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	80 81       	ld	r24, Z
    290c:	98 2f       	mov	r25, r24
    290e:	9c 7f       	andi	r25, 0xFC	; 252
    2910:	e9 81       	ldd	r30, Y+1	; 0x01
    2912:	fa 81       	ldd	r31, Y+2	; 0x02
    2914:	80 81       	ld	r24, Z
    2916:	83 70       	andi	r24, 0x03	; 3
    2918:	89 2b       	or	r24, r25
    291a:	8c 93       	st	X, r24

	/* masking  bit 3 and 4 of TIMER1B control register with the other 2 bits of timer1 waveform mode */
	TCCR1B = (TCCR1B & 0xE7) | (((timerConfig -> mode) & 0x0C) << 1);
    291c:	ae e4       	ldi	r26, 0x4E	; 78
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	ee e4       	ldi	r30, 0x4E	; 78
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	28 2f       	mov	r18, r24
    2928:	27 7e       	andi	r18, 0xE7	; 231
    292a:	e9 81       	ldd	r30, Y+1	; 0x01
    292c:	fa 81       	ldd	r31, Y+2	; 0x02
    292e:	80 81       	ld	r24, Z
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	8c 70       	andi	r24, 0x0C	; 12
    2936:	90 70       	andi	r25, 0x00	; 0
    2938:	88 0f       	add	r24, r24
    293a:	99 1f       	adc	r25, r25
    293c:	82 2b       	or	r24, r18
    293e:	8c 93       	st	X, r24

	/* masking first 3 bit in TIMER1B control register for clock prescaler selection */
	TCCR1B = (TCCR1B & 0Xf8) | ((timerConfig -> clock) & 0x07);
    2940:	ae e4       	ldi	r26, 0x4E	; 78
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	ee e4       	ldi	r30, 0x4E	; 78
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	98 2f       	mov	r25, r24
    294c:	98 7f       	andi	r25, 0xF8	; 248
    294e:	e9 81       	ldd	r30, Y+1	; 0x01
    2950:	fa 81       	ldd	r31, Y+2	; 0x02
    2952:	82 81       	ldd	r24, Z+2	; 0x02
    2954:	87 70       	andi	r24, 0x07	; 7
    2956:	89 2b       	or	r24, r25
    2958:	8c 93       	st	X, r24

	TCNT1 = initialValue;
    295a:	ec e4       	ldi	r30, 0x4C	; 76
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	91 83       	std	Z+1, r25	; 0x01
    2964:	80 83       	st	Z, r24
	OCR1A = compareValue;
    2966:	ea e4       	ldi	r30, 0x4A	; 74
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	8d 81       	ldd	r24, Y+5	; 0x05
    296c:	9e 81       	ldd	r25, Y+6	; 0x06
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
	OCR1B = compareValue;
    2972:	e8 e4       	ldi	r30, 0x48	; 72
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	8d 81       	ldd	r24, Y+5	; 0x05
    2978:	9e 81       	ldd	r25, Y+6	; 0x06
    297a:	91 83       	std	Z+1, r25	; 0x01
    297c:	80 83       	st	Z, r24
#ifdef NORMAL__MODE
	SET_BIT(TIMSK , TOIE1);  /* timer1 overflow interrupt enable */
#endif

#ifdef COMP1A
	SET_BIT(TIMSK , OCIE1A); /* compare match A interrupt enable */
    297e:	a9 e5       	ldi	r26, 0x59	; 89
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	e9 e5       	ldi	r30, 0x59	; 89
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	80 61       	ori	r24, 0x10	; 16
    298a:	8c 93       	st	X, r24

#ifdef COMP1B
	SET_BIT(TIMSK , OCIE1B); /* compare match B interrupt enable */
#endif

}
    298c:	26 96       	adiw	r28, 0x06	; 6
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <timer1StopClock>:

void timer1StopClock(void)
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1 << CS10) &~ (1 << CS11) &~ (1 <<CS12); /* stop clock */
    29a6:	ae e4       	ldi	r26, 0x4E	; 78
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	ee e4       	ldi	r30, 0x4E	; 78
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	88 7f       	andi	r24, 0xF8	; 248
    29b2:	8c 93       	st	X, r24
}
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <callBackFunctionTimer1>:

void callBackFunctionTimer1(void(*CallBackPtr)(void))
{
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <callBackFunctionTimer1+0x6>
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	9a 83       	std	Y+2, r25	; 0x02
    29c6:	89 83       	std	Y+1, r24	; 0x01
 g_callBackTimer1 = CallBackPtr;
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	9a 81       	ldd	r25, Y+2	; 0x02
    29cc:	90 93 ff 00 	sts	0x00FF, r25
    29d0:	80 93 fe 00 	sts	0x00FE, r24
}
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	08 95       	ret

000029de <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    29de:	df 93       	push	r29
    29e0:	cf 93       	push	r28
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    29e6:	eb e2       	ldi	r30, 0x2B	; 43
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    29ee:	ea e2       	ldi	r30, 0x2A	; 42
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	88 e1       	ldi	r24, 0x18	; 24
    29f4:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    29f6:	e0 e4       	ldi	r30, 0x40	; 64
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	86 e8       	ldi	r24, 0x86	; 134
    29fc:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    29fe:	e0 e4       	ldi	r30, 0x40	; 64
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    2a04:	e9 e2       	ldi	r30, 0x29	; 41
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	8c e0       	ldi	r24, 0x0C	; 12
    2a0a:	80 83       	st	Z, r24
}
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <UART_sendByte>:
	
void UART_sendByte(const uint8 data)
{
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	0f 92       	push	r0
    2a18:	cd b7       	in	r28, 0x3d	; 61
    2a1a:	de b7       	in	r29, 0x3e	; 62
    2a1c:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */

	UDR = data;
    2a1e:	ec e2       	ldi	r30, 0x2C	; 44
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
    2a26:	eb e2       	ldi	r30, 0x2B	; 43
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	88 2f       	mov	r24, r24
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	80 74       	andi	r24, 0x40	; 64
    2a32:	90 70       	andi	r25, 0x00	; 0
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	b9 f3       	breq	.-18     	; 0x2a26 <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
    2a38:	ab e2       	ldi	r26, 0x2B	; 43
    2a3a:	b0 e0       	ldi	r27, 0x00	; 0
    2a3c:	eb e2       	ldi	r30, 0x2B	; 43
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 81       	ld	r24, Z
    2a42:	80 64       	ori	r24, 0x40	; 64
    2a44:	8c 93       	st	X, r24

}
    2a46:	0f 90       	pop	r0
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2a4e:	df 93       	push	r29
    2a50:	cf 93       	push	r28
    2a52:	cd b7       	in	r28, 0x3d	; 61
    2a54:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a56:	eb e2       	ldi	r30, 0x2B	; 43
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	88 23       	and	r24, r24
    2a5e:	dc f7       	brge	.-10     	; 0x2a56 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    2a60:	ec e2       	ldi	r30, 0x2C	; 44
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
}
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	08 95       	ret

00002a6c <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <UART_sendString+0x6>
    2a72:	0f 92       	push	r0
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	9b 83       	std	Y+3, r25	; 0x03
    2a7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a7c:	19 82       	std	Y+1, r1	; 0x01
    2a7e:	0e c0       	rjmp	.+28     	; 0x2a9c <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	28 2f       	mov	r18, r24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	8a 81       	ldd	r24, Y+2	; 0x02
    2a88:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	e2 0f       	add	r30, r18
    2a8e:	f3 1f       	adc	r31, r19
    2a90:	80 81       	ld	r24, Z
    2a92:	0e 94 09 15 	call	0x2a12	; 0x2a12 <UART_sendByte>
		i++;
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	8f 5f       	subi	r24, 0xFF	; 255
    2a9a:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a9c:	89 81       	ldd	r24, Y+1	; 0x01
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	e2 0f       	add	r30, r18
    2aaa:	f3 1f       	adc	r31, r19
    2aac:	80 81       	ld	r24, Z
    2aae:	88 23       	and	r24, r24
    2ab0:	39 f7       	brne	.-50     	; 0x2a80 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2abe:	0f 93       	push	r16
    2ac0:	1f 93       	push	r17
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <UART_receiveString+0xa>
    2ac8:	0f 92       	push	r0
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	9b 83       	std	Y+3, r25	; 0x03
    2ad0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ad2:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
    2adc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ade:	8c 01       	movw	r16, r24
    2ae0:	02 0f       	add	r16, r18
    2ae2:	13 1f       	adc	r17, r19
    2ae4:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <UART_recieveByte>
    2ae8:	f8 01       	movw	r30, r16
    2aea:	80 83       	st	Z, r24
    2aec:	0f c0       	rjmp	.+30     	; 0x2b0c <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	8f 5f       	subi	r24, 0xFF	; 255
    2af2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	28 2f       	mov	r18, r24
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	8a 81       	ldd	r24, Y+2	; 0x02
    2afc:	9b 81       	ldd	r25, Y+3	; 0x03
    2afe:	8c 01       	movw	r16, r24
    2b00:	02 0f       	add	r16, r18
    2b02:	13 1f       	adc	r17, r19
    2b04:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <UART_recieveByte>
    2b08:	f8 01       	movw	r30, r16
    2b0a:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	28 2f       	mov	r18, r24
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	9b 81       	ldd	r25, Y+3	; 0x03
    2b16:	fc 01       	movw	r30, r24
    2b18:	e2 0f       	add	r30, r18
    2b1a:	f3 1f       	adc	r31, r19
    2b1c:	80 81       	ld	r24, Z
    2b1e:	83 32       	cpi	r24, 0x23	; 35
    2b20:	31 f7       	brne	.-52     	; 0x2aee <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	e2 0f       	add	r30, r18
    2b30:	f3 1f       	adc	r31, r19
    2b32:	10 82       	st	Z, r1
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	1f 91       	pop	r17
    2b40:	0f 91       	pop	r16
    2b42:	08 95       	ret

00002b44 <WDT_ON>:
 *      Author: Basel Ashraf
 */
#include "wd_timer.h"

void WDT_ON(void)
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	cd b7       	in	r28, 0x3d	; 61
    2b4a:	de b7       	in	r29, 0x3e	; 62
	// Watchdog timer enables with timeout period 16.3ms .
	WDTCR = (1<<WDE);
    2b4c:	e1 e4       	ldi	r30, 0x41	; 65
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	88 e0       	ldi	r24, 0x08	; 8
    2b52:	80 83       	st	Z, r24
}
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <WDT_OFF>:

// 	function to disable Watchdog timer.
void WDT_OFF(void)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	68 97       	sbiw	r28, 0x18	; 24
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
	// set the WDTOE & WDE bits in the same operation
	WDTCR = (1<<WDTOE)|(1<<WDE);
    2b6e:	e1 e4       	ldi	r30, 0x41	; 65
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	88 e1       	ldi	r24, 0x18	; 24
    2b74:	80 83       	st	Z, r24
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a0 e8       	ldi	r26, 0x80	; 128
    2b7c:	b0 e4       	ldi	r27, 0x40	; 64
    2b7e:	8d 8b       	std	Y+21, r24	; 0x15
    2b80:	9e 8b       	std	Y+22, r25	; 0x16
    2b82:	af 8b       	std	Y+23, r26	; 0x17
    2b84:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b86:	6d 89       	ldd	r22, Y+21	; 0x15
    2b88:	7e 89       	ldd	r23, Y+22	; 0x16
    2b8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8e:	2b ea       	ldi	r18, 0xAB	; 171
    2b90:	3a ea       	ldi	r19, 0xAA	; 170
    2b92:	4a ea       	ldi	r20, 0xAA	; 170
    2b94:	5e e3       	ldi	r21, 0x3E	; 62
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	89 8b       	std	Y+17, r24	; 0x11
    2ba0:	9a 8b       	std	Y+18, r25	; 0x12
    2ba2:	ab 8b       	std	Y+19, r26	; 0x13
    2ba4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ba6:	69 89       	ldd	r22, Y+17	; 0x11
    2ba8:	7a 89       	ldd	r23, Y+18	; 0x12
    2baa:	8b 89       	ldd	r24, Y+19	; 0x13
    2bac:	9c 89       	ldd	r25, Y+20	; 0x14
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e8       	ldi	r20, 0x80	; 128
    2bb4:	5f e3       	ldi	r21, 0x3F	; 63
    2bb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bba:	88 23       	and	r24, r24
    2bbc:	1c f4       	brge	.+6      	; 0x2bc4 <WDT_OFF+0x6a>
		__ticks = 1;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	88 8b       	std	Y+16, r24	; 0x10
    2bc2:	91 c0       	rjmp	.+290    	; 0x2ce6 <WDT_OFF+0x18c>
	else if (__tmp > 255)
    2bc4:	69 89       	ldd	r22, Y+17	; 0x11
    2bc6:	7a 89       	ldd	r23, Y+18	; 0x12
    2bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bca:	9c 89       	ldd	r25, Y+20	; 0x14
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	4f e7       	ldi	r20, 0x7F	; 127
    2bd2:	53 e4       	ldi	r21, 0x43	; 67
    2bd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd8:	18 16       	cp	r1, r24
    2bda:	0c f0       	brlt	.+2      	; 0x2bde <WDT_OFF+0x84>
    2bdc:	7b c0       	rjmp	.+246    	; 0x2cd4 <WDT_OFF+0x17a>
	{
		_delay_ms(__us / 1000.0);
    2bde:	6d 89       	ldd	r22, Y+21	; 0x15
    2be0:	7e 89       	ldd	r23, Y+22	; 0x16
    2be2:	8f 89       	ldd	r24, Y+23	; 0x17
    2be4:	98 8d       	ldd	r25, Y+24	; 0x18
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	4a e7       	ldi	r20, 0x7A	; 122
    2bec:	54 e4       	ldi	r21, 0x44	; 68
    2bee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	8c 87       	std	Y+12, r24	; 0x0c
    2bf8:	9d 87       	std	Y+13, r25	; 0x0d
    2bfa:	ae 87       	std	Y+14, r26	; 0x0e
    2bfc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfe:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c00:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c02:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c04:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	4a e7       	ldi	r20, 0x7A	; 122
    2c0c:	53 e4       	ldi	r21, 0x43	; 67
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	88 87       	std	Y+8, r24	; 0x08
    2c18:	99 87       	std	Y+9, r25	; 0x09
    2c1a:	aa 87       	std	Y+10, r26	; 0x0a
    2c1c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c1e:	68 85       	ldd	r22, Y+8	; 0x08
    2c20:	79 85       	ldd	r23, Y+9	; 0x09
    2c22:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c24:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e8       	ldi	r20, 0x80	; 128
    2c2c:	5f e3       	ldi	r21, 0x3F	; 63
    2c2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c32:	88 23       	and	r24, r24
    2c34:	2c f4       	brge	.+10     	; 0x2c40 <WDT_OFF+0xe6>
		__ticks = 1;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	9f 83       	std	Y+7, r25	; 0x07
    2c3c:	8e 83       	std	Y+6, r24	; 0x06
    2c3e:	3f c0       	rjmp	.+126    	; 0x2cbe <WDT_OFF+0x164>
	else if (__tmp > 65535)
    2c40:	68 85       	ldd	r22, Y+8	; 0x08
    2c42:	79 85       	ldd	r23, Y+9	; 0x09
    2c44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c46:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	3f ef       	ldi	r19, 0xFF	; 255
    2c4c:	4f e7       	ldi	r20, 0x7F	; 127
    2c4e:	57 e4       	ldi	r21, 0x47	; 71
    2c50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c54:	18 16       	cp	r1, r24
    2c56:	4c f5       	brge	.+82     	; 0x2caa <WDT_OFF+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c58:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c5a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e2       	ldi	r20, 0x20	; 32
    2c66:	51 e4       	ldi	r21, 0x41	; 65
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	9f 83       	std	Y+7, r25	; 0x07
    2c7e:	8e 83       	std	Y+6, r24	; 0x06
    2c80:	0f c0       	rjmp	.+30     	; 0x2ca0 <WDT_OFF+0x146>
    2c82:	89 e1       	ldi	r24, 0x19	; 25
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9d 83       	std	Y+5, r25	; 0x05
    2c88:	8c 83       	std	Y+4, r24	; 0x04
    2c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <WDT_OFF+0x134>
    2c92:	9d 83       	std	Y+5, r25	; 0x05
    2c94:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c96:	8e 81       	ldd	r24, Y+6	; 0x06
    2c98:	9f 81       	ldd	r25, Y+7	; 0x07
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	9f 83       	std	Y+7, r25	; 0x07
    2c9e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ca2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ca4:	00 97       	sbiw	r24, 0x00	; 0
    2ca6:	69 f7       	brne	.-38     	; 0x2c82 <WDT_OFF+0x128>
    2ca8:	24 c0       	rjmp	.+72     	; 0x2cf2 <WDT_OFF+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2caa:	68 85       	ldd	r22, Y+8	; 0x08
    2cac:	79 85       	ldd	r23, Y+9	; 0x09
    2cae:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	9f 83       	std	Y+7, r25	; 0x07
    2cbc:	8e 83       	std	Y+6, r24	; 0x06
    2cbe:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc0:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc2:	9b 83       	std	Y+3, r25	; 0x03
    2cc4:	8a 83       	std	Y+2, r24	; 0x02
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <WDT_OFF+0x170>
    2cce:	9b 83       	std	Y+3, r25	; 0x03
    2cd0:	8a 83       	std	Y+2, r24	; 0x02
    2cd2:	0f c0       	rjmp	.+30     	; 0x2cf2 <WDT_OFF+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cd4:	69 89       	ldd	r22, Y+17	; 0x11
    2cd6:	7a 89       	ldd	r23, Y+18	; 0x12
    2cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cda:	9c 89       	ldd	r25, Y+20	; 0x14
    2cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	88 8b       	std	Y+16, r24	; 0x10
    2ce6:	88 89       	ldd	r24, Y+16	; 0x10
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	8a 95       	dec	r24
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <WDT_OFF+0x192>
    2cf0:	89 83       	std	Y+1, r24	; 0x01
	//wait 4 cycles before clear the WDE bit
	_delay_us(4);
	WDTCR = 0x00;
    2cf2:	e1 e4       	ldi	r30, 0x41	; 65
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	10 82       	st	Z, r1
}
    2cf8:	68 96       	adiw	r28, 0x18	; 24
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <__mulsi3>:
    2d0a:	62 9f       	mul	r22, r18
    2d0c:	d0 01       	movw	r26, r0
    2d0e:	73 9f       	mul	r23, r19
    2d10:	f0 01       	movw	r30, r0
    2d12:	82 9f       	mul	r24, r18
    2d14:	e0 0d       	add	r30, r0
    2d16:	f1 1d       	adc	r31, r1
    2d18:	64 9f       	mul	r22, r20
    2d1a:	e0 0d       	add	r30, r0
    2d1c:	f1 1d       	adc	r31, r1
    2d1e:	92 9f       	mul	r25, r18
    2d20:	f0 0d       	add	r31, r0
    2d22:	83 9f       	mul	r24, r19
    2d24:	f0 0d       	add	r31, r0
    2d26:	74 9f       	mul	r23, r20
    2d28:	f0 0d       	add	r31, r0
    2d2a:	65 9f       	mul	r22, r21
    2d2c:	f0 0d       	add	r31, r0
    2d2e:	99 27       	eor	r25, r25
    2d30:	72 9f       	mul	r23, r18
    2d32:	b0 0d       	add	r27, r0
    2d34:	e1 1d       	adc	r30, r1
    2d36:	f9 1f       	adc	r31, r25
    2d38:	63 9f       	mul	r22, r19
    2d3a:	b0 0d       	add	r27, r0
    2d3c:	e1 1d       	adc	r30, r1
    2d3e:	f9 1f       	adc	r31, r25
    2d40:	bd 01       	movw	r22, r26
    2d42:	cf 01       	movw	r24, r30
    2d44:	11 24       	eor	r1, r1
    2d46:	08 95       	ret

00002d48 <__udivmodsi4>:
    2d48:	a1 e2       	ldi	r26, 0x21	; 33
    2d4a:	1a 2e       	mov	r1, r26
    2d4c:	aa 1b       	sub	r26, r26
    2d4e:	bb 1b       	sub	r27, r27
    2d50:	fd 01       	movw	r30, r26
    2d52:	0d c0       	rjmp	.+26     	; 0x2d6e <__udivmodsi4_ep>

00002d54 <__udivmodsi4_loop>:
    2d54:	aa 1f       	adc	r26, r26
    2d56:	bb 1f       	adc	r27, r27
    2d58:	ee 1f       	adc	r30, r30
    2d5a:	ff 1f       	adc	r31, r31
    2d5c:	a2 17       	cp	r26, r18
    2d5e:	b3 07       	cpc	r27, r19
    2d60:	e4 07       	cpc	r30, r20
    2d62:	f5 07       	cpc	r31, r21
    2d64:	20 f0       	brcs	.+8      	; 0x2d6e <__udivmodsi4_ep>
    2d66:	a2 1b       	sub	r26, r18
    2d68:	b3 0b       	sbc	r27, r19
    2d6a:	e4 0b       	sbc	r30, r20
    2d6c:	f5 0b       	sbc	r31, r21

00002d6e <__udivmodsi4_ep>:
    2d6e:	66 1f       	adc	r22, r22
    2d70:	77 1f       	adc	r23, r23
    2d72:	88 1f       	adc	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	1a 94       	dec	r1
    2d78:	69 f7       	brne	.-38     	; 0x2d54 <__udivmodsi4_loop>
    2d7a:	60 95       	com	r22
    2d7c:	70 95       	com	r23
    2d7e:	80 95       	com	r24
    2d80:	90 95       	com	r25
    2d82:	9b 01       	movw	r18, r22
    2d84:	ac 01       	movw	r20, r24
    2d86:	bd 01       	movw	r22, r26
    2d88:	cf 01       	movw	r24, r30
    2d8a:	08 95       	ret

00002d8c <__prologue_saves__>:
    2d8c:	2f 92       	push	r2
    2d8e:	3f 92       	push	r3
    2d90:	4f 92       	push	r4
    2d92:	5f 92       	push	r5
    2d94:	6f 92       	push	r6
    2d96:	7f 92       	push	r7
    2d98:	8f 92       	push	r8
    2d9a:	9f 92       	push	r9
    2d9c:	af 92       	push	r10
    2d9e:	bf 92       	push	r11
    2da0:	cf 92       	push	r12
    2da2:	df 92       	push	r13
    2da4:	ef 92       	push	r14
    2da6:	ff 92       	push	r15
    2da8:	0f 93       	push	r16
    2daa:	1f 93       	push	r17
    2dac:	cf 93       	push	r28
    2dae:	df 93       	push	r29
    2db0:	cd b7       	in	r28, 0x3d	; 61
    2db2:	de b7       	in	r29, 0x3e	; 62
    2db4:	ca 1b       	sub	r28, r26
    2db6:	db 0b       	sbc	r29, r27
    2db8:	0f b6       	in	r0, 0x3f	; 63
    2dba:	f8 94       	cli
    2dbc:	de bf       	out	0x3e, r29	; 62
    2dbe:	0f be       	out	0x3f, r0	; 63
    2dc0:	cd bf       	out	0x3d, r28	; 61
    2dc2:	09 94       	ijmp

00002dc4 <__epilogue_restores__>:
    2dc4:	2a 88       	ldd	r2, Y+18	; 0x12
    2dc6:	39 88       	ldd	r3, Y+17	; 0x11
    2dc8:	48 88       	ldd	r4, Y+16	; 0x10
    2dca:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dcc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dce:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dd0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dd2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dd4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dd6:	b9 84       	ldd	r11, Y+9	; 0x09
    2dd8:	c8 84       	ldd	r12, Y+8	; 0x08
    2dda:	df 80       	ldd	r13, Y+7	; 0x07
    2ddc:	ee 80       	ldd	r14, Y+6	; 0x06
    2dde:	fd 80       	ldd	r15, Y+5	; 0x05
    2de0:	0c 81       	ldd	r16, Y+4	; 0x04
    2de2:	1b 81       	ldd	r17, Y+3	; 0x03
    2de4:	aa 81       	ldd	r26, Y+2	; 0x02
    2de6:	b9 81       	ldd	r27, Y+1	; 0x01
    2de8:	ce 0f       	add	r28, r30
    2dea:	d1 1d       	adc	r29, r1
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	cd bf       	out	0x3d, r28	; 61
    2df6:	ed 01       	movw	r28, r26
    2df8:	08 95       	ret

00002dfa <itoa>:
    2dfa:	fb 01       	movw	r30, r22
    2dfc:	9f 01       	movw	r18, r30
    2dfe:	e8 94       	clt
    2e00:	42 30       	cpi	r20, 0x02	; 2
    2e02:	c4 f0       	brlt	.+48     	; 0x2e34 <itoa+0x3a>
    2e04:	45 32       	cpi	r20, 0x25	; 37
    2e06:	b4 f4       	brge	.+44     	; 0x2e34 <itoa+0x3a>
    2e08:	4a 30       	cpi	r20, 0x0A	; 10
    2e0a:	29 f4       	brne	.+10     	; 0x2e16 <itoa+0x1c>
    2e0c:	97 fb       	bst	r25, 7
    2e0e:	1e f4       	brtc	.+6      	; 0x2e16 <itoa+0x1c>
    2e10:	90 95       	com	r25
    2e12:	81 95       	neg	r24
    2e14:	9f 4f       	sbci	r25, 0xFF	; 255
    2e16:	64 2f       	mov	r22, r20
    2e18:	77 27       	eor	r23, r23
    2e1a:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__udivmodhi4>
    2e1e:	80 5d       	subi	r24, 0xD0	; 208
    2e20:	8a 33       	cpi	r24, 0x3A	; 58
    2e22:	0c f0       	brlt	.+2      	; 0x2e26 <itoa+0x2c>
    2e24:	89 5d       	subi	r24, 0xD9	; 217
    2e26:	81 93       	st	Z+, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	a1 f7       	brne	.-24     	; 0x2e16 <itoa+0x1c>
    2e2e:	16 f4       	brtc	.+4      	; 0x2e34 <itoa+0x3a>
    2e30:	5d e2       	ldi	r21, 0x2D	; 45
    2e32:	51 93       	st	Z+, r21
    2e34:	10 82       	st	Z, r1
    2e36:	c9 01       	movw	r24, r18
    2e38:	0c 94 1e 17 	jmp	0x2e3c	; 0x2e3c <strrev>

00002e3c <strrev>:
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	fc 01       	movw	r30, r24
    2e40:	67 2f       	mov	r22, r23
    2e42:	71 91       	ld	r23, Z+
    2e44:	77 23       	and	r23, r23
    2e46:	e1 f7       	brne	.-8      	; 0x2e40 <strrev+0x4>
    2e48:	32 97       	sbiw	r30, 0x02	; 2
    2e4a:	04 c0       	rjmp	.+8      	; 0x2e54 <strrev+0x18>
    2e4c:	7c 91       	ld	r23, X
    2e4e:	6d 93       	st	X+, r22
    2e50:	70 83       	st	Z, r23
    2e52:	62 91       	ld	r22, -Z
    2e54:	ae 17       	cp	r26, r30
    2e56:	bf 07       	cpc	r27, r31
    2e58:	c8 f3       	brcs	.-14     	; 0x2e4c <strrev+0x10>
    2e5a:	08 95       	ret

00002e5c <__udivmodhi4>:
    2e5c:	aa 1b       	sub	r26, r26
    2e5e:	bb 1b       	sub	r27, r27
    2e60:	51 e1       	ldi	r21, 0x11	; 17
    2e62:	07 c0       	rjmp	.+14     	; 0x2e72 <__udivmodhi4_ep>

00002e64 <__udivmodhi4_loop>:
    2e64:	aa 1f       	adc	r26, r26
    2e66:	bb 1f       	adc	r27, r27
    2e68:	a6 17       	cp	r26, r22
    2e6a:	b7 07       	cpc	r27, r23
    2e6c:	10 f0       	brcs	.+4      	; 0x2e72 <__udivmodhi4_ep>
    2e6e:	a6 1b       	sub	r26, r22
    2e70:	b7 0b       	sbc	r27, r23

00002e72 <__udivmodhi4_ep>:
    2e72:	88 1f       	adc	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	5a 95       	dec	r21
    2e78:	a9 f7       	brne	.-22     	; 0x2e64 <__udivmodhi4_loop>
    2e7a:	80 95       	com	r24
    2e7c:	90 95       	com	r25
    2e7e:	bc 01       	movw	r22, r24
    2e80:	cd 01       	movw	r24, r26
    2e82:	08 95       	ret

00002e84 <_exit>:
    2e84:	f8 94       	cli

00002e86 <__stop_program>:
    2e86:	ff cf       	rjmp	.-2      	; 0x2e86 <__stop_program>
